[{"title":"stellar从1.23.0到1.26.8","path":"/p/stellar从1.23.0到1.26.8/","content":"各个版本更新及其重要更新内容详见 Releases · xaoxuu&#x2F;hexo-theme-stellar (github.com) 配置默认布局在 1.26.0 版本中，站点主结构树有较大的变化，支持自定义每种页面的组件显示情况，侧边栏会按照指定的顺序从组件库中读取组件并显示： sidebar-&gt;site_treeold123456789101112131415161718192021222324252627######## Sidebar ########sidebar: logo: title: &#x27;[&lt;img no-lazy height=&quot;32px&quot; src=&quot;/assets/website/avatar/avatar.png&quot;/&gt;](/)&#x27; menu: post: &#x27;[&lt;i class=&quot;fa-solid fa-house-chimney&quot;&gt;&lt;/i&gt;](/)&#x27; wiki: &#x27;[&lt;i class=&quot;fa-solid fa-book&quot;&gt;&lt;/i&gt;](/wiki/)&#x27; explore: &#x27;[&lt;i class=&quot;fa-solid fa-icons&quot;&gt;&lt;/i&gt;](/bookmark/)&#x27; friends: &#x27;[&lt;i class=&quot;fa-brands fa-squarespace&quot;&gt;&lt;/i&gt;](/friends/)&#x27; more: &#x27;[&lt;i class=&quot;fa-solid fa-plus fa-flip&quot;&gt;&lt;/i&gt;](/about/)&#x27; widgets: #### 自动生成的页面 #### # 主页 home: search, welcome, recent, timeline # for home # 博客索引页 blog_index: search_blog, recent, timeline # for categories/tags/archives # 文档索引页 wiki_index: search_docs, recent, timeline # for wiki # 其它（404） others: search, welcome, recent, timeline # for 404 and ... #### 手动创建的页面 #### # 文章内页 post: ghrepo,search, toc, ghissues # for pages using &#x27;layout:post&#x27; # 文档内页 wiki: ghrepo,search_docs, toc, ghissues, related # for pages using &#x27;layout:wiki&#x27; # 其它 layout:page 的页面 page: welcome,search, toc # for custom pages using &#x27;layout:page&#x27; new Stellar：自定义小组件的配置与使用（9个） - XAOXUU 侧边栏主功能导航菜单old 123456menu: post: &#x27;[&lt;i class=&quot;fa-solid fa-house-chimney&quot;&gt;&lt;/i&gt;](/)&#x27; wiki: &#x27;[&lt;i class=&quot;fa-solid fa-book&quot;&gt;&lt;/i&gt;](/wiki/)&#x27; explore: &#x27;[&lt;i class=&quot;fa-solid fa-icons&quot;&gt;&lt;/i&gt;](/bookmark/)&#x27; friends: &#x27;[&lt;i class=&quot;fa-brands fa-squarespace&quot;&gt;&lt;/i&gt;](/friends/)&#x27; more: &#x27;[&lt;i class=&quot;fa-solid fa-plus fa-flip&quot;&gt;&lt;/i&gt;](/about/)&#x27; new 1234567891011121314151617181920212223242526272829# 侧边栏主功能导航菜单menubar: columns: 5 # 一行多少个 items: # 可按照自己需求增加，符合以下格式即可 - id: post # 页面中高亮的 menu_id theme: &#x27;#1BCDFC&#x27; # 高亮时的颜色，仅 svg 中 fill=&quot;currentColor&quot; 时有效 icon: solar:documents-bold-duotone # 支持 svg/img 标签，可以定义在 icons.yml 文件中，也支持外部图片的 URL title: 博客 # 标题 url: / # 跳转链接，支持相对路径和绝对路径 - id: wiki theme: &#x27;#3DC550&#x27; icon: solar:notebook-bookmark-bold-duotone title: 文档 url: /wiki/ - id: explore theme: &#x27;#FA6400&#x27; icon: solar:planet-bold-duotone title: 探索 url: /bookmark/ - id: social theme: &#x27;#F44336&#x27; icon: solar:chat-square-like-bold-duotone title: 社交 url: /friends/ - id: more theme: &#x27;#F44336&#x27; icon: solar:chat-square-like-bold-duotone title: 更多 url: /about/ 官方文档 Stellar：侧边栏配置 - XAOXUU 置顶pin: true–&gt;sticky: 数字 wiki相关old 1path: /wiki/vue/ new 1base_dir: /wiki/vue/ 返回项目的按钮移除了 notes主要问题为不显示首页的avatar，title和subtitle 解决如下 blog\\source\\_data\\wiki otes.yml1234567891011# name: 备忘录# title: 备忘录# icon: # 列表页图标# cover: # 封面页大图# coverpage: [cover, title, description] # 封面页显示的内容# coverpage: false # 封面页显示的内容logo: avatar: &#x27;[$&#123;config.avatar&#125;](/)&#x27; title: &#x27;[$&#123;config.title&#125;](/)&#x27; subtitle: &#x27;我秃了头 | 可我却还不是程序员&#x27; blog\\source otes\\Vue.md1234567---date: 2023-12-31 18:58:39# layout: wikiwiki: notes # 这个跟上面的 /wiki/notes.yml 关联起来menu_id: explore # 这个跟配置文件中的 `sidebar.menu.notes` 关联起来，这很重要，如果没有这个，就像普通的wiki项目一样了title: Vue--- 简化版wiki，专栏我觉得十分欣喜，是一个好的设计，我没什么项目可以写在wiki里面的，只是一些学习笔记，梳理起来不是像wiki那种介绍项目那样 使用方法 Stellar：实现博客专栏&#x2F;专题 - XAOXUU 1. 创建专栏在 blog/source/_data/ 文件夹中创建一个 topic 文件夹，在其中放入各个专栏的描述文件，文件名就是项目的 id(我这里是stellar.yaml)： blog\\source\\_data\\topic\\stellar.yml1234name: Stellar # 在面包屑导航上会显示较短的名字title: Stellar - 每个人的独立博客 # 在列表页会显示完整的专栏标题description: 关于搭建独立博客相关的知识和经验分享，以及 Stellar 的高级用法、版本更新相关的注意事项。order_by: -date # 默认是按发布日期倒序排序 2. 发布文章在此专栏文章的 md 文件的 front-matter 部分指定所属的专栏 id （即上一步创建的文件名 id.yml） blog/source/_posts/文章.md123456---title: 这是文章标题topic: id # 这是专栏id，对应 blog/source/_data/topic/id.yml---文章正文 ghuser Stellar：自定义小组件的配置与使用（9个） - XAOXUU 作用是显示 GitHub 用户基础信息卡片，但是在最新版本的样式，把menu移开了，感觉不是很好 搜索框永远在menu的上边，因为搜索框变成了一个单独的组件，不能再sidebar中进行设置了，所以我也不知道怎么才能隐藏search和调整search的位置 notes写法部分改动 old blog\\source\\_data\\wiki otes.yml123456sidebar: - toc - layout: search override: search filter: /notes/ placeholder: 在此处搜索... new blog\\source\\_data\\wiki otes.yml123456search: override: search filter: /notes/ placeholder: 在此处搜索...sidebar: - toc 1234567---date: 2023-12-31 18:58:39# layout: wikiwiki: notes # 这个跟上面的 /wiki/notes.yml 关联起来menu_id: explore # 这个跟配置文件中的 `sidebar.menu.notes` 关联起来，这很重要，如果没有这个，就像普通的wiki项目一样了title: Vue--- 如何去掉顶部导航new 1234---breadcrumb: false# 表示本页面不显示顶部导航，如果你需要显示的话，把这一行删除即可--- achieve 假若在front-matter再加入h1: &#39;&#39;可以直接将友链去掉 搜索(wiki)old blog\\source\\_data\\wiki\\Vue.yml12345sidebar: - search: override: search filter: /wiki/vue/ placeholder: &#x27;在 Vue笔记 中搜索...&#x27; new blog\\source\\_data\\wiki\\Vue.yml123search: filter: /wiki/stellar/ placeholder: 在 Stellar 中搜索... 图片显示大图的坑如果你之前将blog\\themes\\stellar\\_config.yml的对应配置部分的代码完整的复制到blog\\_config.stellar.yml那么就会出现下面的问题，解决办法很简单，就是注释掉对应的js和css部分，让它自动去找themes部分的配置即可，也可以再次复制 error: 1fancybox.umd.js:2 Uncaught TypeError: Cannot read properties of undefined (reading &#x27;alt&#x27;) old blog\\_config.stellar.yml12345plugins: fancybox: enable: true js: https://gcore.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js css: https://gcore.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css new blog\\_config.stellar.yml12345plugins: fancybox: enable: true js: https://cdn.bootcdn.net/ajax/libs/fancyapps-ui/5.0.22/fancybox/fancybox.umd.min.js css: https://cdn.bootcdn.net/ajax/libs/fancyapps-ui/5.0.22/fancybox/fancybox.min.css 样式美化添加悬挂龙生肖blog\\source\\css ewYear.css123456789101112131415161718192021222324252627@media screen and (min-width: 850px)&#123; .NewYear &#123; width: 260px; height: 300px; display: inline-block; background: url(图片地址) no-repeat 50%/100%; /* background: url(/assets/other/longgyaj.gif) no-repeat 50%/100%; */ vertical-align: middle; position: fixed; left: 85.8%; top: 55px; z-index: 999; cursor: pointer; animation: new-year 1.2s ease-in-out 0s infinite alternate; margin-left: -1px; transform-origin: 50% 0; pointer-events: none; &#125; &#125; @keyframes new-year&#123; 0% &#123; transform: rotate(10deg); &#125; 100%&#123; transform: rotate(-10deg); &#125; &#125; 引入 blog\\_config.yml123inject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/newYear.css&quot;&gt; # 龙年贴纸 把这个加到任何能够显示的html段落中，我就加到footer 1&lt;div class=&quot;NewYear&quot;&gt;&lt;/div&gt; 来源： 右上角添加悬挂年兽喜增龙年喜气 - 乙未博客 (yvii.cn) 话说今年应该是条小青龙，不过红红火火更加喜庆。 手动黑夜模式注意stellar不再内置awesome 需要自己引入 123inject: head:\t- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css&quot; integrity=&quot;sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot; /&gt; CSSblog\\source\\css\\darkmode.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250#Dark:root &#123; --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --alpha20: rgba(0,0,0,0.2); --alpha50: rgba(0,0,0,0.5); --alpha60: rgba(0,0,0,0.6); --alpha75: rgba(0,0,0,0.75); --alpha100: #000; --sidebar-bg: #383d42; --text: #fff; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333;&#125;@media screen and (max-width: 667px) &#123; #Dark:root &#123; --site-bg: #000; &#125;&#125;#Dark:root &#123; --blur-bg: rgba(0,0,0,0.5);&#125;#Dark .float-panel &#123; --blur-bg: rgba(0,0,0,0.4);&#125;#Dark .tag-plugin.tag &#123; --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e;&#125;#Dark .tag-plugin[color=&#x27;red&#x27;] &#123; --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e;&#125;#Dark .tag-plugin[color=&#x27;orange&#x27;] &#123; --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e;&#125;#Dark .tag-plugin[color=&#x27;yellow&#x27;] &#123; --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e;&#125;#Dark .tag-plugin[color=&#x27;green&#x27;] &#123; --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e;&#125;#Dark .tag-plugin[color=&#x27;cyan&#x27;] &#123; --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1;&#125;#Dark .tag-plugin[color=&#x27;blue&#x27;] &#123; --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1;&#125;#Dark .tag-plugin[color=&#x27;purple&#x27;] &#123; --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1;&#125;#Dark .tag-plugin[color=&#x27;light&#x27;] &#123; --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#Dark .tag-plugin[color=&#x27;dark&#x27;] &#123; --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff;&#125;#Dark .tag-plugin[color=&#x27;warning&#x27;],#Dark .tag-plugin[color=&#x27;light&#x27;] &#123; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#Dark .tag-plugin &#123; /* --theme: var(--text-p1); */ --theme-border: var(--block-border); --theme-block: var(--block); --theme-codeblock: var(--block);&#125;#Dark .social-wrap a.social:hover &#123; box-shadow: none;&#125;#Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .header p &#123; color: var(--text-p2);&#125;#Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .body &#123; border-radius: 12px; background: var(--alpha50); box-shadow: none;&#125;#Dark a.button.start.gradient &#123; transition: 0.38s ease-out; position: relative; z-index: 0; background: linear-gradient(to right, #4c95fa, #38c9fa, #24f9c4, #24f9c4, #38c9fa, #4c95fa); background-size: 1000%; color: #fff; text-shadow: 0 0 1px rgba(0,0,0,0.12); animation: glow 60s linear infinite;&#125;/* aplayer音乐播放器样式 */#Dark .aplayer &#123; background: #26292c; font-family: Arial,Helvetica,sans-serif; margin: 5px; box-shadow: 0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1); border-radius: 12px; overflow: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: normal; position: relative;&#125;#Dark .aplayer .aplayer-list ol li &#123; position: relative; height: 32px; line-height: 32px; padding: 0 15px; font-size: 12px; border-top: 1px solid #383d42; cursor: pointer; transition: all .2s ease; overflow: hidden; margin: 0;&#125;/* 当前选择歌曲 */#Dark .aplayer .aplayer-list ol li.aplayer-list-light &#123; background: #f4f4f4; color: #373737; font-size: small; font-weight: bold;&#125;/* 经过字体颜色和大小变化 */#Dark .aplayer .aplayer-list ol li:hover &#123; background: #efefef; color: #ff5722; font-size: small; font-weight: bold;&#125;.aplayer .aplayer-list ol li.aplayer-list-light,.aplayer .aplayer-list ol li:hover &#123; font-size: small; font-weight: bold;&#125;.aplayer .aplayer-info .aplayer-music .aplayer-title &#123; font-size: 17px;&#125;/* waline评论样式 */#Dark .wl-count&#123; padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff;&#125;#Dark .cmt-body.waline&#123; --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666;&#125;#Dark .wl-user-name &#123; color: #999;&#125;/* 不是ai制作标识 */#Dark #notbyai &#123; content: url(&quot;/assets/website/Written-By-Human-black.png&quot;); &#125;JSblog\\source\\js\\darkmode.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/** * 监听系统主题 * @type &#123;MediaQueryList&#125; */var OSTheme = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);OSTheme.addListener(e =&gt; &#123; if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;auto&#x27;) &#123; ThemeChange(&#x27;auto&#x27;); &#125;&#125;)/** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */const AutoMode = (htmlElement) =&gt; &#123; var date = new Date(); var hours = date.getHours(); if (hours &lt; 18 &amp;&amp; hours &gt;= 6) &#123; document.querySelector(&quot;html&quot;).id = &quot;Light&quot;; &#125; else &#123; document.querySelector(&quot;html&quot;).id = &quot;Dark&quot;; &#125; // if (htmlElement.id === &quot;Light&quot;) &#123; // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = &quot;Dark&quot;; // &#125; else &#123; htmlElement.id = &quot;Light&quot;; &#125;&#125;let autoTimer;/** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */const ThemeChange = (theme) =&gt; &#123; // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(&quot;html&quot;); let themeBtnIcon; try &#123; themeBtnIcon = document.querySelector(&quot;#start &gt; aside &gt; div &gt; footer &gt; div &gt; a:last-child &gt; i&quot;) &#125; catch &#123; // 元素不存在 &#125; if (theme === &#x27;light&#x27; || (theme === &#x27;auto&#x27; &amp;&amp; !OSTheme.matches)) &#123; htmlElement.id = &quot;Light&quot;; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-sun fa-spin fa-spin-reverse&#x27;; &#125; &#125; else &#123; htmlElement.id = &quot;Dark&quot;; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-moon fa-fade&#x27;; &#125; &#125; if (theme === &#x27;auto&#x27;) &#123; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-circle-half-stroke fa-flip&#x27;; &#125; AutoMode(htmlElement); autoTimer = setInterval(function () &#123; AutoMode(htmlElement); &#125;, 1000 * 60 * 30); // 半小时一次 &#125; window.localStorage.setItem(&#x27;Theme_Mode&#x27;, theme);&#125;/** * 初始化博客主题 */switch (window.localStorage.getItem(&#x27;Theme_Mode&#x27;)) &#123; case &#x27;light&#x27;: ThemeChange(&#x27;light&#x27;); break; case &#x27;dark&#x27;: ThemeChange(&#x27;dark&#x27;); break; default: ThemeChange(&#x27;auto&#x27;);&#125;/** * 切换主题模式 */// 绑定按钮点击事件try &#123; document.querySelector(&quot;#start &gt; aside &gt; div &gt; footer &gt; div &gt; a:last-child&quot;).onclick = () =&gt; &#123; if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;auto&#x27;) &#123; hud.toast(&#x27;🌞白天模式&#x27;); ThemeChange(&#x27;light&#x27;); &#125; else if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;light&#x27;) &#123; hud.toast(&#x27;🌙 夜间模式&#x27;); ThemeChange(&#x27;dark&#x27;); &#125; else &#123; hud.toast(&#x27;🌞/🌙 自动模式&#x27;); ThemeChange(&#x27;auto&#x27;); &#125; &#125;&#125; catch &#123; // 元素不存在&#125;引入blog\\_config.yml12345inject: head:\t- &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/darkmode.css&quot;&gt; # 黑夜样式 script: - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/darkmode.js&quot;&gt;&lt;/script&gt; # 黑夜控制侧边按钮设置blog\\_config.stellar.yml1234567######## Footer ########footer: social: # 注意这里为最后一个按钮 mode: icon: &#x27;&lt;i class=&quot;fa-solid fa-circle-half-stroke fa-flip&quot;&gt;&lt;/i&gt;&#x27; url: javaScript:void(0); Github Actions无法响应问题指在[fork](xaoxuu&#x2F;issues-json-generator: 自动提取本仓库每个 issue 中的第一段 JSON 代码块并保存到仓库中，可用于友链、书签等数据收集。 (github.com))之后的actions无响应 123标签评论者：.githorb#L1。Ubuntu-18.04环境已弃用，请考虑切换到ubuntu-20.04(ubuntu-Latest)或ubuntu-22.04。有关更多详细信息，请访问https://github.com/actions/virtual-environments/issues/6002 修改对应的环境配置，指定Ubuntu版本 .github/workflows/label-commenter.yml123456789101112131415161718name: Label Commenteron: issues: types: - labeled - unlabeled jobs: comment: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 - name: Label Commenter uses: peaceiris/actions-label-commenter@v1 with: github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; config_file: .github/configs/label-commenter-config.yml 效果 特别感谢SafeKiller_Zone大佬提供的帮助 不显示logo和menu(未解决)old 1header: false # 不显示左上角的 logo 和 menu 这个front-matter也无了 如何设置专栏icon(未解决)","tags":["Hexo","Stellar"],"categories":["记录","博客开发"]},{"title":"stellar之waline评论系统的使用","path":"/p/stellar-comment/","content":"总文章在这里 使用Hexo和Stellar搭建个人博客网站https://bxzdyg.cn/p/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CStellar%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ 本篇文章是这篇大文章的抽离，因为本篇文章代码段落较长刚好拿来凑文章节数，且具有随时更新的特性，不好固定在一个文章里，也不能写在wiki里，否则无法被推荐，故出此下策。 评论系统选择在搭建博客的时候必不可少的就是评论了，但是评论系统怎么选就是一个关键的问题了，要能够兼顾美观、便捷、自定义性强，轻量，完全的markdwon支持，支持登录等等功能，最好还要有一个后端（😓）。 walinewaline作为一个极具热度，且功能强大的评论系统就如此应运而生了， 本站主讲waline，不仅waline拥有着极其全面丰富强大的功能，而且本站也是使用waline这个评论系统，在阅览本文前建议前去阅读waline的官方文档。 https://waline.js.org/https://waline.js.org/ 服务器部署Waline快速上手https://waline.js.org/guide/get-started/ 这部分官方文档其实已经写的很明白了，里面还有一些大佬录制的部署视频，可以去看看。 数据库LeanCloud(国际版) 登录 或 [注册 LeanCloud 国际版 并进入 控制台 点击左上角 [创建应用 并起一个你喜欢的名字 (请选择免费的开发版): 进入应用，选择左下角的 设置 &gt; 应用 Key。你可以看到你的 APP ID,APP Key 和 Master Key。请记录它们，以便后续使用。 云函数Vercel 点击上方按钮，跳转至 Vercel 进行 Server 端部署。 如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。 输入一个你喜欢的 Vercel 项目名称并点击 Create 继续: 此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。 一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 Go to Dashboard 可以跳转到应用的控制台。 点击顶部的 Settings - Environment Variables 进入环境变量配置页，并配置三个环境变量 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 。它们的值分别对应上一步在 LeanCloud 中获得的 APP ID, APP KEY, Master Key。 Environment Variable Lean Cloud LEAN_ID AppID LEAN_KEY AppKey LEAN_MASTER_KEY MasterKey LEAN_SERVER 已备案的域名 LEAN_SERVER是国内版本必须填的，需要绑定自己的域名，国际版不需要 简单启用,你可以将下面的放在你博客需要的地方 1234567891011121314151617181920&lt;head&gt; &lt;!-- ... --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@waline/client@v2/dist/waline.css&quot; /&gt; &lt;!-- ... --&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- ... --&gt; &lt;div id=&quot;waline&quot;&gt;&lt;/div&gt; &lt;script type=&quot;module&quot;&gt; import &#123; init &#125; from &#x27;https://unpkg.com/@waline/client@v2/dist/waline.mjs&#x27;; init(&#123; el: &#x27;#waline&#x27;, serverURL: &#x27;https://your-domain.vercel.app&#x27;, &#125;); &lt;/script&gt;&lt;/body&gt; 注册管理员Waline支持评论管理，默认第一个注册的用户为管理员（站长）,可以在DOMAINS的页面中直接进行登录操作支持使用QQ、微博、GitHub、Twitter、Facebook且多个类型账号进行绑定。 Stellar启用做好上面几步，就需要在配置文件中，增加如下配置 1234567891011comments: service: waline waline: js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css # Waline server address url, you should set this to your own link serverURL: https://comment.bxzdyg.cn/ # If false, comment count will only be displayed in post page, not in home page commentCount: true # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`. pageview: false serverURL即为你之前分配个waline云函数解析的域名地址 如果启用了fancybox插件，那么你还需要添加对应的css选择器 blog\\_config.stellar.yml123456plugins: fancybox: enable: true # 可以处理评论区的图片（不支持 iframe 类评论系统）例如： # 使用waline评论可以写: #waline_container .vcontent img selector: .swiper-slide img, .gallery img ,#waline_container .vcontent img 然后启动你本地的博客项目，在你的文章末尾就能看到评论区已经被启用了。 评论通知邮件通知基本变量值 环境变量名称 备注 参考值 SMTP_SERVICE SMTP 邮件发送服务提供商,这里[查看](nodemailer&#x2F;lib&#x2F;well-known&#x2F;services.json at master · nodemailer&#x2F;nodemailer (github.com))所有支持的服务商 QQ SMTP_HOST SMTP 服务器地址(理论上SMTP_SERVICE正确填写，这部分可以不写) smtp.qq.com SMTP_PORT SMTP 服务器端口。（同上） 465 SMTP_SECURE 是否使用 SSL 连接 SMTP（同上） true SMTP_USER SMTP 用户名 &#x35;&#x78;&#120;&#x78;&#120;&#120;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#109; SMTP_PASS SMTP 密码(一般不是账户密码而是需要去开通smtp服务，给的对应的密钥) 密码 SITE_URL 网站地址，用于在消息中显示 https://blog.bxzdyg.cn/ SITE_URL 网站地址，用于在消息中显示 BoBoBlog AUTHOR_EMAIL 博主邮箱，用来接收新评论通知。如果是博主发布的评论则不进行提醒通知. &#x35;&#120;&#120;&#x78;&#x78;&#x78;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109; 此处有个坑，不知道为什么这里的AUTHOR_EMAIL和我所想的有点不太一样，我以为博主发一级评论和回复对应的评论就不会收到信息，仅此而已，可实际测试的表现是，填入自己的邮箱自己的邮箱任何邮件都收不到，这明显是给发邮件的邮箱地址用。 选择变量值 环境变量名称 备注 参考值 SENDER_NAME 自定义发送邮件的发件人 BoBoBlog&lt;5xxxxx@qq.com&gt; SENDER_EMAIL 自定义发送邮件的发件地址 MAIL_SUBJECT 自定义评论回复邮件标题 MAIL_TEMPLATE 自定义评论回复邮件内容 MAIL_SUBJECT_ADMIN 自定义新评论通知邮件标题 MAIL_TEMPLATE_ADMIN 自定义新评论通知邮件内容 注意：任何环境变量的变动，都需要重新部署后才会生效。其次，如果设置了多种提醒方式，仅会有一种生效！ 而且有些设置的环境变量，可能在模板上没有被用到。 邮件模板这里为什么要修改waline的模板呢？因为默认的存在些小小的问题，修改后可以避免这些错误 waline服务器部署对应的厂库的 index.js 文件，如果是通过官方仓库的 index.js 作为 waline 的入口，那么可以通过修改 index.js 文件来修改邮件通知模板 官方默认的邮件模板示例你waline服务器部署对应的厂库的index.js文件1234567891011121314151617181920212223242526272829303132333435363738394041const Application = require(&#x27;@waline/vercel&#x27;);module.exports = Application(&#123; mailSubject: &#x27;&#123;&#123;parent.nick | safe&#125;&#125;，您在「&#123;&#123;site.name | safe&#125;&#125;」上的评论收到了回复&#x27;, mailTemplate: ` &lt;div style=&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt; &lt;h2 style=&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt; 您在博客&lt;a style=&quot;text-decoration:none;color: #12ADDB;&quot; href=&quot;&#123;&#123;site.url&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123;site.name&#125;&#125;&lt;/a&gt;上的评论有了新的回复 &lt;/h2&gt; &lt;div style=&quot;padding:0 12px 0 12px;margin-top:18px&quot;&gt; &lt;p&gt;&#123;&#123;parent.nick&#125;&#125;，您曾发表评论：&lt;/p&gt; &lt;div style=&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt;&#123;&#123;parent.comment | safe&#125;&#125;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;&#123;&#123;self.nick&#125;&#125;&lt;/strong&gt; 回复说：&lt;/p&gt; &lt;div style=&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt;&#123;&#123;self.comment | safe&#125;&#125;&lt;/div&gt; &lt;p&gt;您可以点击&lt;a style=&quot;text-decoration:none; color:#12addb&quot; href=&quot;&#123;&#123;site.postUrl&#125;&#125;&quot; target=&quot;_blank&quot;&gt;前往原文查看完整的回复內容&lt;/a&gt;，欢迎再次光临&lt;a style=&quot;text-decoration:none; color:#12addb&quot; href=&quot;&#123;&#123;site.url&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123;site.name&#125;&#125;&lt;/a&gt;。&lt;/p&gt; &lt;br/&gt; &lt;/div&gt; &lt;div style=&quot;border-top:1px solid #DDD; padding:13px 0 0 8px;&quot;&gt; 该邮件为系统自动发送的邮件，请勿直接回复。 &lt;/div&gt; &lt;br/&gt; &lt;/div&gt;`, mailSubjectAdmin: &#x27;您的博客「&#123;&#123;site.name | safe&#125;&#125;」收到了新评论&#x27;, mailTemplateAdmin: ` &lt;div style=&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt; &lt;h2 style=&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt; 有人在&lt;a style=&quot;text-decoration:none;color: #12ADDB;&quot; href=&quot;&#123;&#123;site.url&#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123;site.name&#125;&#125;&lt;/a&gt;发表了新的评论 &lt;/h2&gt; &lt;div style=&quot;padding:0 12px 0 12px;margin-top:18px&quot;&gt; &lt;p&gt;&lt;strong&gt;&#123;&#123;self.nick&#125;&#125;&lt;/strong&gt; 评论说：&lt;/p&gt; &lt;div style=&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt;&#123;&#123;self.comment | safe&#125;&#125;&lt;/div&gt; &lt;p&gt;您可以点击&lt;a style=&quot;text-decoration:none; color:#12addb&quot; href=&quot;&#123;&#123;site.postUrl&#125;&#125;&quot; target=&quot;_blank&quot;&gt;前往原文查看完整的评论内容。&lt;/a&gt;&lt;/p&gt; &lt;br/&gt; &lt;/div&gt; &lt;div style=&quot;border-top:1px solid #DDD; padding:13px 0 0 8px;&quot;&gt; 该邮件为系统自动发送的邮件，请勿直接回复。 &lt;/div&gt; &lt;br/&gt; &lt;/div&gt;`&#125;); 其他的模板我没有那么多个性化需求，如果以后有，还是自己学成后自己设计吧，我就推几个链接，大家可以去看看 waline邮件通知模板样式一览 | SaraKale’s blog 需要注意，这个博主是采取直接写在服务器的环境变量上，看着更改即可 主要为下面几个变量MAIL_SUBJECT 、 MAIL_TEMPLATE 、 MAIL_SUBJECT_ADMIN 、 MAIL_TEMPLATE_ADMIN 其他通知方式如微信，qq机器人，微信企业号等等，这里先不论，之后有空再提 用户标签普通标签普通标签在 Waline 服务端进行环境变量的配置,添加LEVELS的key即可,对应的value是划分的区间，形式为一串给定的数的逗号拼接，例如 0,10,20,50,100,200 等级 条件 默认等级标签 0 0 &lt;&#x3D; count &lt; 10 潜水 1 10 &lt;&#x3D; count &lt; 20 冒泡 2 20 &lt;&#x3D; count &lt; 50 吐槽 3 50 &lt;&#x3D; count &lt; 100 活跃 4 100 &lt;&#x3D; count &lt; 200 话痨 5 200 &lt;&#x3D; count 传说 此处为普通标签的等级划分方式，转换对应的标签名且看下面 专属标签专属标签通过管理端（后台）为每位登录用户设定专属标签。 官方文档（用户标签）https://waline.js.org/guide/features/label.html 排行榜&#x2F;读者墙挂件读者墙就是把评论用户的头像都放在一起，鼠标停留在上面显示名字，有用到的可以考虑一下 点开查看代码blog\\source\\_data\\widgets.yml12345678910111213141516171819waline_wall: title: 本站发言墙 layout: markdown content: | &lt;div id=&quot;waline-users&quot;&gt;&lt;i class=&quot;fa-solid fa-cog fa-spin&quot;&gt;&lt;/i&gt;连接waline数据中...&lt;/div&gt; &lt;script type=&quot;module&quot;&gt; import &#123; UserList &#125; from &#x27;https://cdn.jsdelivr.net/npm/@waline/client/dist/waline.mjs&#x27;; UserList(&#123; el: &#x27;#waline-users&#x27;, serverURL: &#x27;https://comment.bxzdyg.cn&#x27;, // 注意这里不能写成https://comment.bxzdyg.cn/ count: 10, &#125;); &lt;/script&gt; &lt;style&gt; .wl-user-item[aria-label] &#123; position: relative; z-index: 9999; &#125; &lt;/style&gt; 排行榜看起来就比较明显了,你可以看到左侧的区别，但是有可能因为网络问题，加载不出来 点开查看代码blog\\source\\_data\\widgets.yml123456789101112131415161718192021waline_wall: title: 本站发言榜 layout: markdown content: | &lt;div id=&quot;waline-users&quot;&gt;&lt;i class=&quot;fa-solid fa-cog fa-spin&quot;&gt;&lt;/i&gt;连接waline数据中...&lt;/div&gt; &lt;script type=&quot;module&quot;&gt; import &#123; UserList &#125; from &#x27;https://cdn.jsdelivr.net/npm/@waline/client/dist/waline.mjs&#x27;; UserList(&#123; el: &#x27;#waline-users&#x27;, serverURL: &#x27;https://comment.bxzdyg.cn&#x27;, // 注意这里不能写成https://comment.bxzdyg.cn/ count: 10, mode: &#x27;wall&#x27; &#125;); &lt;/script&gt; &lt;style&gt; #waline-users &gt; ul &gt; li &gt; a&#123;display: flex;overflow: hidden;-webkit-box-orient: vertical;&#125; #waline-users &gt; ul &gt; li &gt; a &gt; div.wl-user-meta&#123;font-size:14px;color: #999999;&#125; #waline-users &gt; ul &gt; li &gt; a &gt; div.wl-user-meta &gt; div&#123;color: var(--swiper-theme-color);&#125; #waline-users &gt; ul &gt; li &gt; a &gt; div.wl-user-meta &gt; div:hover &#123;color: #ff5724;&#125; .wl-user-name &#123;color: #999;font-weight: bold;&#125; &lt;/style&gt; 排行榜的小坑 这里我整上去后，和大佬的比对，不断的思考：“我评论区都有等级标签，为什么排行榜没有呢？” 别再瞎折腾了，以为waline的初始化没有初始化好，自己琢磨以自定义的形式输出，结果又碰到博客懒加载插件的冲突的问题，一看就不是这样，一天一夜过去了，咨询了大佬后，反复求证才知道，原来level0在排行榜上是没有标签的，起码level1才有，坑啊，我在琢磨什么啊。 还需要注意，排行榜不统计登录的账号中站长发表的评论数，邮件也会自动排除站长，在你发表评论不会有消息通知，被回复会。 自定义自定义语言 自定义语言 | Waline 主要就是自己加上一些和修改一些文字描述，下面博主讲主要用到的键贴出来，你们可以去官方文档找一下看看自己需要哪种，再给他加上去，这里面写的极其详细了。 反应相关blog\\_config.stellar.yml12345678910111213141516comments: service: waline waline: locale: placeholder: 有什么想说的？大胆说出来吧(*^_^*) # 输入框内提示文字 reactionTitle: 请给这篇文章做个评价吧 # 反应标题 # 反应表情对应的文字描述 reaction0: 感兴趣 reaction1: 给心心 reaction2: 什么？ reaction3: 心碎了 reaction4: 别过来 reaction5: 哎呀~ reaction6: 不忍直视 reaction7: 我真生气辣！ reaction8: 摇晃 标签相关blog\\_config.stellar.yml12345678910comments: service: waline waline: locale: level0: &#x27;潜水&#x27; level1: &#x27;冒泡&#x27; level2: &#x27;吐槽&#x27; level3: &#x27;活跃&#x27; level4: &#x27;话痨&#x27; level5: &#x27;传说&#x27; 这里为对应等级的标签称号 自定义表情blog\\_config.stellar.yml123456789101112131415161718comments: service: waline waline: # 反应表情 reaction: - /emojis/ablobcatattentionreverse.png # 兴奋 - /emojis/ablobcatheart.png # 开心 - /emojis/ablobcatdoubt.png # 惊讶 - /emojis/ablobcatheartbroken.png # 伤心 - /emojis/ablobcatterrified.png # 害怕 - /emojis/ablobcatshy.png # 害羞 - /emojis/ablobcatnoface.png # 轻蔑 - /emojis/ablobcatanger.gif # 生气 - /emojis/ablobcatrainbow.png # 摇晃 # Custom emoji emoji: - https://gcore.jsdelivr.net/gh/norevi/waline-blobcatemojis@1.0/blobs - https://unpkg.com/@waline/emojis@1.1.0/bilibili","tags":["Hexo","Stellar","Waline"],"categories":["记录","博客开发"]},{"title":"stellar主题使用meetingjs接入aplayer音乐播放器","path":"/p/stellar-aplayer-metingjs/","content":"总文章在这里 使用Hexo和Stellar搭建个人博客网站https://bxzdyg.cn/p/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CStellar%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ 本篇文章是这篇大文章的抽离，因为本篇文章代码段落较长刚好拿来凑文章节数，且具有随时更新的特性，不好固定在一个文章里，也不能写在wiki里，否则无法被推荐。 很遗憾的告诉你，使用了metingjs的页面无法进行toc的选定（标题无法跳转），目前我不知道怎么解决 安装12yarn add hexo-tag-aplayernpm -i hexo-tag-aplayer --save 安装好对应的依赖后启用对应的语法 blog\\_config.yml123# 音乐播放器aplayer: meting: true 这时候你就可以使用 &#123;% meting %&#125;的语法连接你的歌单，或者本地音乐 一般使用有关 &#123;% meting %&#125; 的选项列表如下: 选项 默认值 描述 id 必须值 歌曲 id &#x2F; 播放列表 id &#x2F; 相册 id &#x2F; 搜索关键字 server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 listfolded false 指定音乐播放列表是否折叠 storagename metingjs LocalStorage 中存储播放器设定的键名 autoplay true 自动播放，移动端浏览器暂时不支持此功能 mutex true 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 listmaxheight 340px 播放列表的最大长度 preload auto 音乐文件预载入模式，可选项： none, metadata, auto theme #ad7a86 播放器风格色彩设置(这个不是background-color) 此处示范为连接我的网易云歌单 1&#123;% meting &quot;8871126058&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;lrctype:0&quot; &quot;preload:none&quot; &quot;theme:#1cd0fd&quot; &quot;storagename:metingjs&quot;%&#125; 将它放在你需要放的位置 123456789.aplayer .aplayer-list ol li.aplayer-list-light,.aplayer .aplayer-list ol li:hover &#123; font-size: small; font-weight: bold;&#125;.aplayer .aplayer-info .aplayer-music .aplayer-title &#123; font-size: 17px;&#125; 本站的aplayer音乐播放器追加样式，放在每次都导入的css文件里面，或者有用到aplayer播放器的页面 使用本地待编辑……qwq(其实写了的，一定是不见了！) 全局使用待编辑……qwq(其实写了的，一定是不见了！) 默认隐藏歌词因为我个人比较喜欢听纯音乐，对歌词没有太多需求，而且可能你也不希望这个歌词出现，但是metingjs是很难让歌词这个部分消失的，即使你设置&#39;lrctype:0&#39;,还是会存在一个部分影响你的心情。 下面提供了几种方法 方法一方法二1234567891011121314151617181920// Aplayer默认关闭歌词// 创建一个MutationObserver实例，用于监听DOM的变化var observer = new MutationObserver(function (mutations) &#123; // 查找页面中class为&quot;aplayer-icon-lrc&quot;的元素 var lrcButton = document.querySelector(&quot;.aplayer-icon-lrc&quot;); // 如果找到了lrcButton if (lrcButton) &#123; // 延迟1毫秒执行点击操作 setTimeout(function () &#123; lrcButton.click(); &#125;, 1); // 打印&quot;success&quot;到控制台 console.log(&quot;success&quot;); // 断开MutationObserver实例，停止监听DOM的变化 observer.disconnect(); &#125;&#125;);// 监听整个文档及其子节点的变化observer.observe(document, &#123; childList: true, subtree: true &#125;);12345678910111213141516171819202122232425262728293031323334// Aplayer默认关闭歌词function removelrc() &#123; // 检测是否存在歌词按钮 const lrcIcon = document.querySelector(&quot;.aplayer-icon-lrc&quot;); if (!lrcIcon) &#123; return; &#125; // 触发以后立刻移除监听 observer.disconnect(); // 稍作延时保证触发函数时存在按钮 setTimeout(() =&gt; &#123; // 以触发按钮的方式隐藏歌词，防止在点击显示歌词按钮时需要点击两次才能出现的问题 lrcIcon.click(); &#125;, 1); console.log(&quot;success&quot;);&#125;const observer = new MutationObserver((mutationsList, observer) =&gt; &#123; for (let mutation of mutationsList) &#123; if (mutation.type === &quot;childList&quot;) &#123; removelrc(); &#125; &#125;&#125;);const observerConfig = &#123; childList: true, // 观察子节点的变化 subtree: true, // 观察所有后代节点的变化&#125;;observer.observe(document, observerConfig); // 开始观察document节点的变化 使用了meting语法的页面通过script 标签引入即可,如上去掉歌词后，打开夜间模式，可以和前文进行对比,可能加载存在些先后问题，因为此处是选择最后生成的歌词div 和夜间模式适配https://bxzdyg.cn/p/stellar-dark-mode/ var observer = new MutationObserver(function (mutations) { // 查找页面中class为\"aplayer-icon-lrc\"的元素 var lrcButton = document.querySelector(\".aplayer-icon-lrc:last-child\"); // 如果找到了lrcButton if (lrcButton) { // 延迟1毫秒执行点击操作 setTimeout(function () { lrcButton.click(); }, 1); // 打印\"success\"到控制台 console.log(\"success\"); // 断开MutationObserver实例，停止监听DOM的变化 observer.disconnect(); } }); // 监听整个文档及其子节点的变化 observer.observe(document, { childList: true, subtree: true });"},{"title":"stellar主题深色模式设置","path":"/p/stellar-dark-mode/","content":"总文章在这里 使用Hexo和Stellar搭建个人博客网站https://bxzdyg.cn/p/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CStellar%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ 本篇文章是这篇大文章的抽离，因为本篇文章代码段落较长刚好拿来凑文章节数，且具有随时更新的特性，不好固定在一个文章里，也不能写在wiki里，否则无法被推荐。 前人的肩膀 Stellar可控夜间模式 - 那个码农 (thatcoder.cn) stellar本来就提供了dark模式，不过做不到手动切换，找到一个大佬提取了样式，head中插入js代码，然后由css检验并展示当前是什么模式，中间用到了localStorage存储主题模式 不过还是有些样式没有照顾到位，比如引入一些stellar大佬支持的评论，对应的评论样式比较突兀，原方法的博主，通过css选择器，没有判断下面标签有没有存在，导致在wiki页面会弹一个错误（强迫症），虽然影响不大，还有跟随模式到底是什么呢？ 新建两个文件，没有就大胆创建，因为这是我们自己加的。 12blog\\source\\css\\darkmode.cssblog\\source\\js\\darkmode.js CSS先提取对应的css样式，设置不同的类名，以便于之后自动切换样式 stellar主题的dark模式点击查看代码blog\\source\\css\\darkmode.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#Dark:root &#123; --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333;&#125;@media screen and (max-width: 667px) &#123; #Dark:root &#123; --site-bg: #000; &#125;&#125;#Dark:root &#123; --blur-bg: rgba(0,0,0,0.5);&#125;#Dark .float-panel &#123; --blur-bg: rgba(0,0,0,0.4);&#125;#Dark .tag-plugin.tag &#123; --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e;&#125;#Dark .tag-plugin[color=&#x27;red&#x27;] &#123; --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e;&#125;#Dark .tag-plugin[color=&#x27;orange&#x27;] &#123; --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e;&#125;#Dark .tag-plugin[color=&#x27;yellow&#x27;] &#123; --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e;&#125;#Dark .tag-plugin[color=&#x27;green&#x27;] &#123; --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e;&#125;#Dark .tag-plugin[color=&#x27;cyan&#x27;] &#123; --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1;&#125;#Dark .tag-plugin[color=&#x27;blue&#x27;] &#123; --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1;&#125;#Dark .tag-plugin[color=&#x27;purple&#x27;] &#123; --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1;&#125;#Dark .tag-plugin[color=&#x27;light&#x27;] &#123; --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#Dark .tag-plugin[color=&#x27;dark&#x27;] &#123; --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff;&#125;#Dark .tag-plugin[color=&#x27;warning&#x27;],#Dark .tag-plugin[color=&#x27;light&#x27;] &#123; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff;&#125;#Dark .social-wrap a.social:hover &#123; box-shadow: none;&#125; waline评论样式(选)点击查看代码blog\\source\\css\\darkmode.css12345678910111213141516171819202122232425262728/* waline评论样式 */#Dark .wl-count&#123; padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff;&#125;#Dark .cmt-body.waline&#123; --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666;&#125;#Dark .wl-user-name &#123; color: #999;&#125; artalk评论样式(选)点击查看代码blog\\source\\css\\darkmode.css1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677/* artalk评论样式 */.artalk &#123; --at-color-main: #1cd0fd;&#125;.artalk a, .atk-layer-wrap a &#123; color: #1cd0fd; text-decoration: none;&#125;.artalk&gt;.atk-list&gt;.atk-list-footer .atk-copyright a &#123;color: #1cd0fd;text-decoration: none;&#125;#Dark .artalk,.atk-layer-wrap &#123; --at-color-font: #fff; --at-color-deep: #e7e7e7; --at-color-sub: #e7e7e7; --at-color-grey: #fff; --at-color-meta: #fff; --at-color-border: #2d3235; --at-color-light: #687a86; --at-color-bg: #2d3235; --at-color-bg-transl: rgba(30, 34, 36, .95); --at-color-bg-grey: #46494e; --at-color-bg-grey-transl: rgba(8, 8, 8, .95); --at-color-bg-light: rgba(29, 161, 242, .1); --at-color-main: #1cd0fd; --at-color-red: #ff5652; --at-color-pink: #fa5a57; --at-color-yellow: #ff7c37; --at-color-green: #4caf50; --at-color-gradient: linear-gradient(180deg, transparent, rgba(30, 34, 36, 1));&#125;#Dark .atk-main-editor&gt;.atk-header input::placeholder &#123; color: white;&#125;#Dark textarea.atk-textarea::placeholder &#123; color: #666;&#125;#Dark atk-ua-wrap &#123; color: #666666; background: #272727;&#125;#Dark .atk-main-editor&gt;.atk-bottom .atk-send-btn &#123;background:#1cd0fd;&#125;#Dark .atk-ua-wrap&gt;span.atk-region-badge&#123; background:#333&#125;.atk-comment&gt;.atk-main&gt;.atk-header .atk-item.atk-nick, .atk-comment&gt;.atk-main&gt;.atk-header .atk-item.atk-nick a &#123; font-size: 14px; color: #1cd0fd; text-decoration: none;&#125;.atk-comment&gt;.atk-main&gt;.atk-header .atk-item.atk-reply-at&gt;.atk-nick &#123; color: #1cd0fd;; cursor: pointer; margin-left: 6px;&#125;#Dark .atk-comment&gt;.atk-main&gt;.atk-header .badge, #Dark .atk-comment&gt;.atk-main&gt;.atk-header .atk-ua,#Dark .atk-comment&gt;.atk-main&gt;.atk-header .atk-pinned-badge,#Dark .atk-comment&gt;.atk-main&gt;.atk-header .atk-region-badge &#123; display: inline-block; color: #666; background: #272727; padding: 0 6px; line-height: 17px; border-radius: 3px;&#125; aplayer音乐播放器(选)/p/stellar-aplayer-metingjs/https://bxzdyg.cn/p/stellar-aplayer-metingjs/ 相关的文章在这里。 点击查看代码blog\\source\\css\\darkmode.css12345678910111213141516171819202122232425262728293031323334353637383940414243/* aplayer音乐播放器样式 */#Dark .aplayer &#123; background: #26292c; font-family: Arial,Helvetica,sans-serif; margin: 5px; box-shadow: 0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1); border-radius: 2px; overflow: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: normal; position: relative;&#125;#Dark .aplayer .aplayer-list ol li &#123; position: relative; height: 32px; line-height: 32px; padding: 0 15px; font-size: 12px; border-top: 1px solid #383d42; cursor: pointer; transition: all .2s ease; overflow: hidden; margin: 0;&#125;/* 当前选择歌曲 */#Dark .aplayer .aplayer-list ol li.aplayer-list-light &#123; background: #f4f4f4; color: #373737; font-size: small; font-weight: bold;&#125;/* 经过字体颜色和大小变化 */#Dark .aplayer .aplayer-list ol li:hover &#123; background: #efefef; color: #ff5722; font-size: small; font-weight: bold;&#125; 版权-不是ai制作标识(选)这里只是利用css切换了一下图片，这个图片有黑白两者款式，黑夜用黑的，白天用白的 blog\\source\\css\\darkmode.css1234/* 不是ai制作标识 */#Dark #notbyai &#123; content: url(&quot;/assets/website/Written-By-Human-black.png&quot;); &#125; JSblog\\source\\js\\darkmode.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/** * 监听系统主题 * @type &#123;MediaQueryList&#125; */var OSTheme = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);OSTheme.addListener(e =&gt; &#123; if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;auto&#x27;) &#123; ThemeChange(&#x27;auto&#x27;); &#125;&#125;)/** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */const AutoMode = (htmlElement) =&gt; &#123; var date = new Date(); var hours = date.getHours(); if (hours &lt; 18 &amp;&amp; hours &gt;= 6) &#123; document.querySelector(&quot;html&quot;).id = &quot;Light&quot;; &#125; else &#123; document.querySelector(&quot;html&quot;).id = &quot;Dark&quot;; &#125; // if (htmlElement.id === &quot;Light&quot;) &#123; // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = &quot;Dark&quot;; // &#125; else &#123; htmlElement.id = &quot;Light&quot;; &#125;&#125;let autoTimer;/** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */const ThemeChange = (theme) =&gt; &#123; // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(&quot;html&quot;); let themeBtnIcon; try &#123; themeBtnIcon = document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:last-child &gt; i&quot;) &#125; catch &#123; // 元素不存在 &#125; if (theme === &#x27;light&#x27; || (theme === &#x27;auto&#x27; &amp;&amp; !OSTheme.matches)) &#123; htmlElement.id = &quot;Light&quot;; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-sun fa-spin fa-spin-reverse&#x27;; &#125; &#125; else &#123; htmlElement.id = &quot;Dark&quot;; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-moon fa-fade&#x27;; &#125; &#125; if (theme === &#x27;auto&#x27;) &#123; if (themeBtnIcon) &#123; themeBtnIcon.className = &#x27;fa-solid fa-circle-half-stroke fa-flip&#x27;; &#125; AutoMode(htmlElement); autoTimer = setInterval(function () &#123; AutoMode(htmlElement); &#125;, 1000 * 60 * 30); // 半小时一次 &#125; window.localStorage.setItem(&#x27;Theme_Mode&#x27;, theme);&#125;/** * 初始化博客主题 */switch (window.localStorage.getItem(&#x27;Theme_Mode&#x27;)) &#123; case &#x27;light&#x27;: ThemeChange(&#x27;light&#x27;); break; case &#x27;dark&#x27;: ThemeChange(&#x27;dark&#x27;); break; default: ThemeChange(&#x27;auto&#x27;);&#125;/** * 切换主题模式 */// 绑定按钮点击事件try &#123; document.querySelector(&quot;#start &gt; aside &gt; footer &gt; div &gt; a:last-child&quot;).onclick = () =&gt; &#123; if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;auto&#x27;) &#123; hud.toast(&#x27;🌞白天模式&#x27;); ThemeChange(&#x27;light&#x27;); &#125; else if (window.localStorage.getItem(&#x27;Theme_Mode&#x27;) === &#x27;light&#x27;) &#123; hud.toast(&#x27;🌙 夜间模式&#x27;); ThemeChange(&#x27;dark&#x27;); &#125; else &#123; hud.toast(&#x27;🌞/🌙 自动模式&#x27;); ThemeChange(&#x27;auto&#x27;); &#125; &#125;&#125; catch &#123; // 元素不存在&#125; 按钮blog\\_config.stellar.yml123456######## Footer ########footer: social: mode: icon: &#x27;&lt;i class=&quot;fa-solid fa-circle-half-stroke fa-flip&quot;&gt;&lt;/i&gt;&#x27; url: javaScript:void(0); 注意要结合上面js文件的css选择器，我的是最后一个a标签 引入blog\\_config.yml12345inject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/darkmode.css&quot;&gt; # 黑夜样式 script: - &lt;script type=&quot;text/javascript&quot; src=&quot;/js/darkmode.js&quot;&gt;&lt;/script&gt; # 黑夜控制 最后的最后，好好学前端，顺便给这个模式多加上一个动画，像是element-plus官网的那个，很炫酷。","tags":["Hexo","Stellar"],"categories":["记录","博客开发"]},{"title":"国庆Vercel小崩，小站博主何去何从","path":"/p/vercel-wall/","content":"&nbsp;&nbsp;睡着睡着，我的小站就没了。以为自己没备案被墙了，打探来打探去，看起来好像是vercel出了点问题，我也不太清楚，部署在上面的博客和评论系统是不行了。&nbsp;&nbsp;目前只能再找点别的白嫖手段了。&nbsp;&nbsp;左看看右悄悄,蹭腾讯的云服务器新玩家也就三个月，虽然还是能够体验一段时间的，但是每个人月最便宜三十元左右还是一笔不小的开支&nbsp;&nbsp;不适合我。&nbsp;&nbsp;想来想去，GitHub Pages在我这还是挺快的呀，他不是支持自定义域名吗？把自己的域名DNS解析中增加增加CNAME相应的解析就行，先过此节，以后有钱了再给“孩子”补上。&nbsp;&nbsp;而之前的博客地址就不用www的二级域名了，封住以念次日，将来，我还是会回来的，改成blog了 image-20231002230605236 &nbsp;&nbsp;这里的值就是github pages提供的域名&nbsp;&nbsp;将解析好的二级域名填入自定义域名 image-20231002230627780 &nbsp;&nbsp;然后静候佳音即可，也是挺快的。解析好后刷新一下设置页面，把强制的HTTPS勾上，然后就没有其他的步骤了。&nbsp;&nbsp;评论区怎么办呢，我也不太清楚，运维和安全方面的真难啊。之后找到了解决办法，再在这篇文章补上好了。","tags":["Vercel"],"categories":["记录","博客开发"]},{"title":"使用Hexo和Stellar搭建个人博客网站【超详细贴心保姆级教程💖】","path":"/p/使用Hexo和Stellar搭建个人博客网站/","content":"详细阅读前可以先去阅读常见错误 在此提前说明个人口语化，请谅解 Front-matter也就是文章开头的---划定的区域，我个人叫头代码，其实就是前置数据 mermaid流程图我会略写，mermaid图，虽然导致我一时半会儿想不起全名是什么 Hexo社区是不错的，stellar的设计是非常好的，废话就不多说了，那就开始吧 安装与初始化能找到我就说明，你看了很多文章，还是不太明白一些细节，正好我最近又重新整了一遍 ，不过如果我讲的不是很明白，你可以查阅以下文章，或者官网，然后开始喷吧 Hexo的中文官方文档 Stellar：每个人的独立博客 - XAOXUU 1234Hexo: 6.3.0 ~ 7.0.0hexo-cli: 4.3.0 ~ latestnode: 14.17.3 ～ 20.10.0 # 建议选择 LTS 版本，过高的版本 hexo 还没有进行兼容。npm: 6.14.13 ~ 10.2.3 博主系统和配置，如果出些差别，可考虑是不是这个原因 1234Windows 10 家庭中文版Node.js 18.15.0npm 9.8.1yarn 1.22.19 安装脚手架前情提示：选择你的包管理器命令运行 全局安装 12yarn global add hexo-cli # yarnnpm install -g hexo-cli\t# npm 局部安装 12yarn add hexo\t# yarnnpm intall hexo # npm hexo初始化全局安装可以直接在空文件夹里执行下面这一句话 1hexo init [folder] # 要求全局安装或将局部安装添加到path 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站，并且要求为空文件夹。 局部安装或者全局安装失败可以执行这语句话 1npx hexo init [folder] 在blog\\package.json他自动配置了四种脚本命令 目录结构如下 1$ hexo generate 生成静态文件。 1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 1$ hexo deploy 部署网站。部署之前预先生成静态文件 指令 | Hexo官网详细参考 此处我们多添加一条命令，一是记忆，二是IDE识别，三是方便之后的操作 blog\\package.json1234567&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server&quot;, &quot;new&quot;: &quot;hexo new&quot;&#125;, 启动后的默认页面效果 使用Stellar主题更换主题12yarn add hexo-theme-stellarnpm i hexo-theme-stellar --save _config.yml12# theme: landscape 默认theme: stellar 将*_config.landscape.yml* 文件修改为 _config.stellar.yml,并清空内容 先clean再build这点很重要，在后面的修改样式增加一些功能需要重复执行这两个命令。 可以先启动服务器看看效果 主题更新在 package.json 和中修改 stellar 的版本号，然后执行： 12npm iyarn 你果你有一些个性化的设置，并且复制了stellar到blog&#x2F;themes&#x2F;，那么需要注意，你就需要考虑更新带来的兼容问题了。 更新后将blog ode_modules\\hexo-theme-stellar覆盖为blog/themes/stellar 配置亿下目录结构有关配置问题的首先就是我该写在哪，其次才是我该怎么写，那么贴出两张不同版本的目录结构，你可以比较一下。 1.19.0 1.21.0-1.22.1blog/source的目录结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647├─about│ ├─index.md│ └─index├─CNAME├─assets├─bookmark│ └─index.md├─css├─friends│ └─index.md├─js├─notes| ├─index.md| ├─Node.js常用命令.md| ├─...├─wiki│ └─vue│ ├─Axios│ ├─Vite项目构建工具│ ├─Vue对象提供的属性功能│ ├─Vue对象的生命周期│ ├─Vue常用指令│ ├─Vue快速入门│ ├─Vue路由│ ├─单文件组件的使用│ ├─组合API│ ├─项目构建工具│ ├─Axios.md│ ├─Vite项目构建工具.md│ ├─Vue对象提供的属性功能.md│ ├─Vue对象的生命周期.md│ ├─Vue常用指令.md│ ├─Vue快速入门.md│ ├─Vue路由.md│ ├─单文件组件的使用.md│ ├─组合API.md│ └─项目构建工具.md├─_data│ ├─wiki| | ├─notes.yml| | └─Vue.yml| ├─links.yml| ├─widgets.yml| └─wiki.yml└─_posts ├─... 重点在于wiki和notes 1.23.0blog/source的目录结构123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051├─about│ ├─index.md│ └─index├─CNAME├─assets├─bookmark│ └─index.md├─css├─friends│ └─index.md├─js├─notes| ├─index.md| ├─Node.js常用命令.md| ├─...├─wiki│ └─vue│ ├─Axios│ ├─Vite项目构建工具│ ├─Vue对象提供的属性功能│ ├─Vue对象的生命周期│ ├─Vue常用指令│ ├─Vue快速入门│ ├─Vue路由│ ├─单文件组件的使用│ ├─组合API│ ├─项目构建工具│ ├─Axios.md│ ├─Vite项目构建工具.md│ ├─Vue对象提供的属性功能.md│ ├─Vue对象的生命周期.md│ ├─Vue常用指令.md│ ├─Vue快速入门.md│ ├─Vue路由.md│ ├─单文件组件的使用.md│ ├─组合API.md│ └─项目构建工具.md├─_data│ ├─wiki| | ├─notes.yml| | └─Vue.yml| ├─links| | ├...| | ├─设计灵感和素材.yml| | └─期待友链.yml| ├─authors.yml| ├─widgets.yml| └─wiki.yml└─_posts ├─... 重点在于links和authors 代码推送（必须）线上部署用 1yarn add hexo-deployer-git 你还需要在提送前绑定推送域名此处为跳看 Rss订阅功能（建议）（用于搜索引擎和友链抓起你的动态） 12npm i hexo-generator-feedyarn add hexo-generator-feed 添加 blog/_config.yml12345678feed: type: atom # RSS的类型(atom/rss2) path: atom.xml # 文件路径,默认是atom.xml/rss2.xml limit: 20 # 展示文章的数量,使用0或则false代表展示全部hub# hub:# content: # 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false# content_limit: # 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现# content_limit_delim: &#x27; &#x27; #上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容，防止从中间截断 在你的主题配置中如： blog/_config.stellar.yml1234567footer: social:\trss: icon: &#x27;&lt;i class=&quot;fa-solid fa-rss fa-shake&quot;&gt;&lt;/i&gt;&#x27; url: /atom.xml rss: /atom.xml 我在stellar模板提供的底部侧边栏添上一个答案的天线意图已经很强烈了！qwq 你只要指向对应的url即可。rss部分是必填的 atom.xml乱码如题 有人说是 如果你使用了hexo-assert-image库，那是版本太老，因为作者没有及时更新npm,所以卸载后直接安装github上的版本 但是我也没有用这个啊 但是你别担心，很多人都这样， 看这个issues很多人的原因都是版本太低了，但我目前使用的是3.0.0（latest），但是啊~关键的来了！只要你推送到服务器上，他就是好的，一点乱码的问题也么有，如图 补充，我就跟傻X一样,模板主题的大佬给了他提供的rss位置我还自己手动整理一个，而且他写的很明白，就一个容器 blog/source/_data/widgets.yml1234recent: layout: recent rss: atom.xml # npm i hexo-generator-feed limit: 5 # Count of posts 现在 真的在遥相呼应，把我气的，必须在任何地方都出现底部的这些icons 让我的这份不找目的的用功多点成果 图片显示和New post命令(建议)图片显示图片显示主要可以使用三种语法格式 12![图片标注](图片地址)![image-20230601215212688](image-20230601215212688.png) 12&#123;%image 图片地址 图片标注 %&#125;&#123;%image image-20231002230627780.png image-20231002230627780 %&#125; 12&#123;% asset_img 图片地址 图片标注 %&#125;&#123;% asset_img image-20230917223904196.png 20230917223904196 %&#125; 目前本博客没用最后一个语法了，当初是看官方文档的 资源文件夹 | Hexo 它还需要下载一个包 12yarn add hexo-asset-imagenpm -i hexo-asset-image --save 因为那是我不清楚图片到底如何才能正确的显示出来，瞎琢磨的。 补充： 图片地址:build后public文件夹中图片的位置，你可以把public&#x2F;assets中的public看作是你的站点，实际上也就是替换成你的站点，然后依次推路径，相对路径绝对路径都可以 图片标注:即图片下面的标注，图片路径错误的情况，标注依然正常显示 补充的补充： 第一种写法的图片标注好像1.21.0没有编译作用了 1.19.0： 1.21.0： 不知道是不是少了hexo-asset-image这个包，懒得想了，只能动手改成第二种了。 1.22.1： 使用正则表达式进行快速替换 123!\\[.*?\\]\\(.*?/([^/]+)\\)&#123;% image Vue快速入门/$1 %&#125; 一般开发工具都有，全部替换即可 New post很多人在执行下面的命令的时候，没有自动创建对应post(文章)的文件夹 1hexo new post 这是因为你需要进行一些简单的设置 blog\\_config.yml12345render_drafts: falsepost_asset_folder: true # false# marked: # 1.19.0 我是有加这个的，1.21.0我没有加，因为我没有看见什么变化和作用 img_assest这个语法标签我也不用了# prependRoot: true# postAsset: true 编辑器New post在配置好博客网站的一些设置后，不需要实时的打开项目，单独使用编辑器也可以。 记得新建的md文件要在blog\\source_posts内，或者最后发布前和对应的图片文件夹放到这里。 这里我使用的markdown编辑器是Typora 在设置中对保存文件夹名进行更改 1./$&#123;filename&#125; 好吧，其实我这里提的，也不是什么好方法，你需要最后手动删除./$&#123;filename&#125;这一部分，因为启用了post_asset_folder: true 最后无论build还是deploy生成html文件中，图片和网页是一个文件里的，相对的路径就错了 最后你可以试试PicGo，也就是上传至图床，保存的是url。 Mermaid流程图支持（选）美人鱼图支持 12npm install --save hexo-filter-mermaid-diagrams;yarn add hexo-filter-mermaid-diagrams; 这个东西的兼容在我这里一直是个谜，但不妨碍我想要使用这个工具 blog\\_config.stellar.yml12345678910######## JS Plugins ########plugins: ## required plugins ## # mermaid chart美人鱼流程图配置 mermaid: enable: true # js: https://unpkg.com/mermaid@9.0.0/dist/mermaid.min.js js: https://cdn.jsdelivr.net/npm/mermaid@v9/dist/mermaid.min.js # Available themes: default | dark | forest | neutral theme: dark # 推荐使用 dark 主题 在夜间模式下显示效果更好 在文件头代码启用 1mermaid: true # 美人鱼图不需要就注释 效果代码块flowchart LR Model-->ModelView ModelViewView ModelView-->Model1234flowchart LR Model--&gt;ModelView ModelView&lt;--&gt;View ModelView--&gt;Model 具体mermaid语法就要自己去学习了 文章分享与推荐（选）blog\\_config.yml1url: https://bxzdyg.cn/ # 网站地址#对于这分享连接网站 可能会增加文章与评论区的距离感（多滑一点距离） 12npm i hexo-related-popular-posts --saveyarn add hexo-related-popular-posts 复制下面的代码到blog\\_config.stellar.yml blog\\_config.stellar.yml12345678910111213141516171819article: # 如果没有指定封面，是否根据 tags 作为关键词搜索封面图片？ auto_cover: false # search from https://source.unsplash.com/ # 如果没有指定横幅，是否根据 tags 作为关键词搜索横幅图片？ auto_banner: false # search from https://source.unsplash.com/ # 如果没有指定 excerpt 和 description，将自动取多长的内容作为文章摘要？ auto_excerpt: 200 # 分类颜色 # category_color: # &#x27;探索号&#x27;: &#x27;#f44336&#x27; # 不会用qwq # 文章许可协议 license: &#x27;本文采用 [署名-非商业性使用-相同方式共享 4.0 国际](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议，转载请注明出处。&#x27; # 分享 share: [wechat, weibo, email, link] # 相关文章，需要安装插件 (for layout: post) # npm i hexo-related-popular-posts related_posts: enable: true title: 您可能感兴趣的文章 注意：有的人的分享网站可能和当前的网址不一样 是谁要害我啊？ 其实吧，这个网站是根据这个有关的，更换网址记得修改 blog\\_config.yml12# url: https://yguang233.github.io/ # 网站地址url: https://bxzdyg.cn/ # 网站地址 # 对应这分享连接网站 文章路由（选）能够解决中文标题转义的现象，因为你直接给她转码了。并且创建文章自动添加abbrlink 12npm -i hexo-abbrlink --saveyarn add hexo-abbrlink 在 blog/_config.yml 中找到对应 permalink 标签，进行修改即可： 12345678910url: https://yguang233.github.io/ # http://YGuang233.github.io#permalink: :year/:month/:day/:title/permalink: p/:abbrlink/abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hexpermalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks 使用了这个每使用命令新建一篇文章会在头代码上插入abbrlink:及对应的转码后的代码, 这使得他会自动去匹配每个md文件的头代码中的abbrlink 不同算法、进制生成的链接格式如下： 算法 进制 生成链接示例 crc16 hex https://yourname.github.io/p/66c8.html crc16 dec https://yourname.github.io/p/65535.html crc32 hex https://yourname.github.io/p/8ddf18fb.html crc32 dec https://yourname.github.io/p/1690090958.html 如果你不想使用这个，就想让美丽的汉字显示在URL上，当然也没有问题,如果你还想自定义和指定路由可以采用下面的方式： 在 blog/_config.yml 中找到对应 permalink 标签，进行修改即可： 1permalink: :year/:month/:day/:title/ 使用默认的或者更改一下 1permalink: p/:title/ 123456789101112131415---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: [] # 标签categories: [] # 分类 可以嵌套多个层级description:cover:banner:poster: # 海报（可选，全图封面卡片） topic: # 标题上方的小字 # 可选 # 选了这个就是在上方 headline: # 大标题 # 必选 caption: # 标题下方的小字 # 可选 color: # 标题颜色 # 可选mermaid: true # 美人鱼图不需要就注释--- 效果 线上部署提前安装git，配置好ssh密钥。 Github配置SSH密钥连接（附相关问题解决） - 知乎 (zhihu.com) GitHub Pages使用GitHub Pages托管静态页面站点。 优点： 不需要域名，有域名可以绑定自己的域名 不需要自己的服务器 一键推送方便 适合运维小白没错就是我 缺点： 访问慢，且看地理位置，看脸 GitHub Pages 快速入门 - GitHub 文档 创建一个仓库，仓库名 在_config.yml中 blog\\_config.yml123456789101112# Deployment## Docs: https://hexo.io/docs/one-command-deployment# 推送设置deploy: # 类型 type: git # 部署分支名称，按照自己喜欢的起名就可以。这里写完还需要在 GitHub 上进行分支创建并配置 branch: master # 仓库，这里使用的 SSH 方式 repo: git@github.com:YGuang233/YGuang233.github.io.git # 如果你看了 hexo 的文档，这里很清楚。部署的时候会使用这个消息作为提交的信息 message: Automatic deploy by Github Action：&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125; 我这里采用的只是默认的主分支，你可以自行更改 然后更新提交（输入下面的命令就会自动更新提交到git上，前提配置好ssh,要不然显示权限不够，即使你使用网页登录过） 12hexo generatehexo deploy 这是很久以前写的,不清楚如果没用build推送会怎么样，不过这里也不是说每次都要build一下，写好文章build看看效果辣，然后推送而已。直接推送会怎么样，我不清楚啊，不过推送都会生成文件，影响应该不大 未安装hexo-deployer-git包会导致下面的错误 1ERROR Deployer not found: git 其实就这两个点一下就可以了 运行成功则变成了一个绿钩 setting/code and automation/pages则会自动执行静态页面文件的路径和显示已经成功生成的站点。这一现象可能稍晚，可以先一步去查看站点。 如果你一小时内重复提交查看申请，发现不能生成了，那是因为它一个小时内只能生成10次，而一个用户的站点存储上限为1G 我在网上看到有些人使用修改.git/config这个文件夹本地仓库配置信息，来解决在github pages编译和上传的问题，这次我并没有用到，但我还是把它贴出来(这部分也不需要自己写会自动生成，你就看看自己缺了什么吧) 12345678910111213141516#[user]#\temail=email@qq.com#\tname=YGuang233\t#这部分是我手动添加上去的，我不清楚这个是写我git的用户名还是github的用户名，但是我使用websotrm提交的时候还增加了作者签名[core]\trepositoryformatversion = 0\tfilemode = false\tbare = false\tlogallrefupdates = true\tsymlinks = false\tignorecase = true[remote &quot;origin&quot;]\turl = https://github.com/YGuang233/YGuang233.github.io.git\tfetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;]\tremote = origin\tmerge = refs/heads/master Vercel（已被墙）尝试在Vercel中部署你的博客 推送绑定域名在blog/source/中添加CNAME文件，无类型文件（没有文件后缀） 写入你自己的博客地址 blog\\source\\CNAME1blog.bxzdyg.cn 其他待编辑……qwq(其实写了的，一定是不见了！) 一些问题toc样式的问题默认设置在 blog/source/_data/widgets.yml1234567toc: layout: toc list_number: false # 是否显示序号 min_depth: 2 # 建议不要低于 2 即从 H2 标签开始解析（H1标签用于文章大标题） max_depth: 5 # 5 代表最多解析到 H5 标签 fallback: recent # Use a backup widget when toc does not exist. 禁用h1如在wiki使用h1标题也就是# 标题等级必需连续如上一个标题是h1下一个就是h3、h4 不连续会以下一个高级标题，形成断层。 toc最多显示到h5 备注：1.19.0只能到h4 Mermaid样式问题 话说同样是dark主题，样式这么差了这么多 不明白，怎么下面的样式又对了 Mermaid代码冲突问题（已解决）主题语法不能和Mermaid代码块进行嵌套 以前（v1.19.0）在这个主题下很多都不能够嵌套，基本上都是我现在浏览器上渲染一遍，复制html元素粘贴到markdown里面 mermaid代码块临近主题语法会无法正常编译，还是代码块 没想到现在居然可以了，牛哇。 不过这里的嵌套却不能显示原有的代码了，都能被识别，进行编译 但是用起来警告有点多啊…… post的相关问题文章如何置顶？在front-matter加入pin: true就可以了。然后就会在对应的文章多一个赞的小徽章 wiki的相关问题很遗憾的告诉各位高手们，stellar1.20.0将wiki重做了，不过如果你依然是老用户，我还是将对应的wiki项目的写法贴出来 1.19.0版本使用起来是相当费力的，不知怎么的，当时我读不懂文档，搞了很久才折腾出来了。 目录结构如下 12345678910111213---mermaid: truedate: 2023-09-19 16:25:20layout: wiki # 使用wiki布局模板wiki: Vue # 这是项目名title: Vue快速入门order: 0sidebar: - layout: search override: search filter: &#x27;/wiki/vue/&#x27; - toc--- 重点是order要在对应的序列范围内 blog/source/_data/projects.yml123456789101112131415161718192021222324252627Vue: name: Vue title: Vue - 渐进式的前端框架 subtitle: &#x27;很开心的学了 | 结果又多了一个学过而不会的技术&#x27; # 项目中和主页相似的两个副标题 tags: 前端 # 分类 cover: true # 是否图片 # cover: [logo, description] # 如果 logo 中已经包含了项目标题，可以这样设置不显示项目标题 logo: src: /assets/wiki/vue/vue-js.svg # 项目封面 small: 112px large: 240px description: 我的Vue学习笔记-不断改进和完善中，欢迎留言批斗，但别说的太过分，我并没有那么坚强。 # repo: xaoxuu/hexo-theme-stellar # comment_title: &#x27;评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。&#x27; # giscus: # 对应仓库 # data-repo: xaoxuu/hexo-theme-stellar # data-mapping: number # data-term: 226 sections: &#x27;快速开始&#x27;: [ 0, 99 ] &#x27;基本使用&#x27;: [ 100, 199 ] &#x27;深入组件&#x27;: [ 200, 299 ] &#x27;应用规模化&#x27;: [ 300, 399 ] &#x27;跨域问题&#x27;: [ 400, 599 ] &#x27;进阶主题&#x27;: [ 600, 699 ]# sidebar: [search,toc] #侧边栏# index: false #在项目列表中隐藏 1.20.0+1234567891011121314151617181920212223242526272829```sh├─wiki│ └─vue│ ├─Axios│ ├─Vite项目构建工具│ ├─Vue对象提供的属性功能│ ├─Vue对象的生命周期│ ├─Vue常用指令│ ├─Vue快速入门│ ├─Vue路由│ ├─单文件组件的使用│ ├─组合API│ ├─项目构建工具│ ├─Axios.md│ ├─Vite项目构建工具md│ ├─Vue对象提供的属性功能.md│ ├─Vue对象的生命周期.md│ ├─Vue常用指令.md│ ├─Vue快速入门.md│ ├─Vue路由.md│ ├─单文件组件的使用.md│ ├─组合API.md│ └─项目构建工具.md├─_data| ├─wiki.yml│ └─wiki│ └─Vue.yml│ blog\\source\\_data\\wiki\\Vue.yml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647name: Vuetitle: Vue.js - 渐进式的前端框架subtitle: &#x27;很开心的学了 | 结果又多了一个学过而不会的技术&#x27; # 项目中和主页相似的两个副标题tags: 前端cover: /assets/wiki/vue/vue-js.svg\t# 封面页大图icon: /assets/wiki/vue/vue-js.svg\t# 列表页图标# coverpage: [logo, description]coverpage: true # 默认是 truedescription: 我的vue学习笔记-不断改进和完善中，欢迎留言批斗，但别说的太过分，我并没有那么坚强。# repo: xaoxuu/hexo-theme-stellarsidebar: - search: override: search filter: /wiki/vue/ placeholder: &#x27;在 Vue笔记 中搜索...&#x27; - toc # - timeline_stellar_releases - related# comment_title: &#x27;评论区仅供交流，有问题请提 [issue](https://github.com/xaoxuu/hexo-theme-stellar/issues) 反馈。&#x27;# comments:# service: giscus# giscus:# data-repo: xaoxuu/hexo-theme-stellar# data-mapping: number# data-term: 226path: /wiki/vue/toc: &#x27;快速开始&#x27;: - &#x27;Vue快速入门&#x27; &#x27;基本使用&#x27;: - &#x27;Vue常用指令&#x27; - &#x27;Vue对象提供的属性功能&#x27; - &#x27;Vue对象的生命周期&#x27; - &#x27;Vue组件化开发基础和浅入&#x27; - &#x27;项目构建工具&#x27; &#x27;深入组件&#x27;: - &#x27;单文件组件的使用&#x27; &#x27;应用规模化&#x27;: - &#x27;Vue路由&#x27; &#x27;跨域问题&#x27;: - Axios - Proxy - WebSocket &#x27;进阶主题&#x27;: - &#x27;组合API&#x27; - &#x27;Vite项目构建工具&#x27; blog\\source\\_data\\wiki.yml12 # 上架项目- Vue 头代码如下面写到 blog\\source\\wiki\\vue\\Vue快速入门.md12345---layout: wiki # 使用wiki布局模板wiki: Vue # 这是项目名title: Vue快速入门--- 总结&nsbp;&nsbp;对于这个改动，对比以往，相当于多了一个草稿wiki，可以选择上不上架blog\\source\\_data\\wiki.yml中添加即可 在写某一分页的时候不用去打开上一页的order是什么，只需要在blog\\source\\_data\\wiki\\Vue.yml这类的项目去添加下一个分页的title 这些都是有好处的，但是作为一个老用户，我哭啊，也要改些东西，不想动啊~ 缺点也是有一些的就是文章标题不允许重复了 title要和markdown文件名一致 其他乱序 还有莫名的省略号。 解答：船新版本不能像1.19.0那样，进行目录嵌套，全部写在一个文件里，否则会在构建的时候报如下的错误 多次重写构建是能够正常构建，但是效果就像上面一样乱序。 消失的toc title要和文件名一致，否则会出现省略号 而内容为空，只写了头代码toc就会消失 notes相关问题如何隐藏cover和title还有name这个大概就是notes上拉有wiki的开始使用提示字样 blog\\source\\_data\\wiki otes.yml123456# name: 备忘录# title: 备忘录# icon: # 列表页图标# cover: # 封面页大图# coverpage: [cover, title, description] # 封面页显示的内容coverpage: false # 封面页显示的内容 这部分修改成这样 你可能还是不清楚子文件的front-matter怎么写 blog\\source otes\\vite初始化vue.md12345678---date: 2023-12-31 18:58:39layout: wikiwiki: notes # 这个跟上面的 /wiki/notes.yml 关联起来menu_id: explore # 这个跟配置文件中的 `sidebar.menu.notes` 关联起来，这很重要，如果没有这个，就像普通的wiki项目一样了title: vite初始化vue---待编辑……qwq&#123;% psw 其实写了的，一定是不见了！%&#125; 代码块怎么显示文件地址Stellar一些没有说明或者一时看不明白的，但是看起来就很叼的效果实现 这样编写在一般的md是不会被这样解析的，而是作为一整个字符串当作代码的类型打脸打的啪啪响 两个小时后：typora 也能够区分识别，将空格前面的作为类型，当然了有时候你写的一些语言，会无法识别，突出高亮如vue 1234&#123;% folding child:codeblock open:flase color:yellow 警告此处为个人本题答案仅供参考，非唯一答案 %&#125;``` 这是代码语言这是代码内容&#123;% endfolding %&#125; 代码块折叠 1&#123;% quot 你好世界 el:h2 %&#125; 使用这种指定标题，每个属性要隔开一些 123&#123;% quot 热门话题 %&#125; []&#123;% quot 热门话题 icon:default %&#125; “”&#123;% quot 热门话题 icon:hashtag %&#125; # wiki项目的icon如何向老版本一样整大一点不知道 okr嵌套gallery如何控制哪些是大图哪些是小图不知道 一些小花样动态友链文章参考： https://weekdaycare.cn/posts/stellar-friends/ 克隆仓库后，开放Issues功能，按需求划定标签，并且修改厂库对应的判断语句，就可以在文章中 1&#123;% friends repo:YGuang233/friends %&#125; 就能加载出对应的友链信息 朋友文章（朋友圈）2023&#x2F;101&#123;% timeline type:fcircle api:https://github.com/YGuang233/friends-rss-generator/tree/output/data.json %&#125; 有些人很好奇，明明这样写，打开一看是我厂库里的output分支的data.json 但实际上你只要多点一步，我们需要的是这个叫做data.json的字节流 1https://raw.githubusercontent.com/YGuang233/friends-rss-generator/output/data.json 1&#123;% timeline type:fcircle api:https://raw.githubusercontent.com/YGuang233/friends-rss-generator/output/data.json %&#125; 但是这个国内好像访问不了，Stellar作者又给了一个api接口 12&#123;% timeline type:fcircle api:https://api.vlts.cc/output_data/v1/YGuang233/friends-rss-generator %&#125;&#123;% endtimeline %&#125; 将其改成你对应的厂库就可以了 或者你可以显示在侧边栏 blog\\source\\_data\\widgets.yml123456timeline_friend_blog: layout: timeline title: 朋友的文章 api: https://api.vlts.cc/output_data/v1/YGuang233/friends-rss-generator type: fcircle limit: 30 # 限制显示30条 在头代码sidebar加入这个自定义的组件 1sidebar: [timeline_friend_blog] 使用「memos」待编辑……qwq(其实写了的，一定是不见了！) 接入API欢迎图片接口地址1https://api.szfx.top/info-card/?word=%E6%AC%A2%E8%BF%8E%E6%9D%A5%E8%AE%BF%20%E5%8D%8A%E9%86%92%E7%9D%80%E7%9A%84%E9%98%B3%E5%85%89%20%E7%9A%84%E5%8D%9A%E5%AE%A2 你可以试着打开这个网址将word&#x3D;欢迎词，修改成你喜欢的 blog/source/_data/widgets.yml12345welcome: layout: markdown title: 哈喽~ 旅人： content: | &lt;img src=&quot;https://api.szfx.top/info-card/?word=%E6%AC%A2%E8%BF%8E%E6%9D%A5%E8%AE%BF%20%E5%8D%8A%E9%86%92%E7%9D%80%E7%9A%84%E9%98%B3%E5%85%89%20%E7%9A%84%E5%8D%9A%E5%AE%A2&quot;&gt; 效果展示，看起来挺有新意的，就是图片内的字太小 将上面的img部分改成下面的，可以有在文章那样的缩放图效果 blog/source/_data/widgets.yml1&lt;img src=&quot;https://api.szfx.top/info-card/?word=%E6%AC%A2%E8%BF%8E%E6%9D%A5%E8%AE%BF%20%E5%8D%8A%E9%86%92%E7%9D%80%E7%9A%84%E9%98%B3%E5%85%89%20%E7%9A%84%E5%8D%9A%E5%AE%A2&quot; fancybox=&quot;true&quot;&gt; 二次元图片是非题 | ACG-API (shifeiti.com) 我们使用是非题大佬提供的api可以获取对应或随机的二次元图片 食用方式也是很简单，和上面接入欢迎图片是一样的将src改成下面的api接口url地址即可。 假定 API 部署到 https://acgapi.shifeiti.com 访问 https://acgapi.shifeiti.com/api ，跳转至图片地址 访问 https://acgapi.shifeiti.com/api/?id=数字 ，跳转至指定图片 示例 https://acgapi.shifeiti.com/api/?id=1717 示例 https://acgapi.shifeiti.com/api/?id=1717&amp;json 效果展示 是挺赞的。 访问 https://acgapi.shifeiti.com/api/?json 输出json，例如： 1&#123;&quot;id&quot;:3,url&quot;:&quot;https://z3.ax1x.com/2021/08/19/fqDucQ.png&quot;&#125; 相似的大家可以去网上找 如下面这个 https://blog.jixiaob.cn/?post=93https://blog.jixiaob.cn/?post=93 这个博主推荐的推荐的api还有涩图版本🙈 诗词和骚话今日诗词接入随机诗词提升网站逼格 今日诗词 - 一言API - 诗词实时智能推荐 - 今日诗词开放接口 - 今日诗词 API - 个人文章分享 (jinrishici.com) 接着我们只要在welcome引入就可以了 blog\\source\\_data\\widgets.yml12345678welcome: layout: markdown title: 哈喽~ 远道而来的朋友呀~ content: | 欢迎来到我这么一个小破站哟~ 希望你能够在这里找到自己想要了解的东西 &lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt; &lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 效果展示 xenv&#x2F;gushici: 一言·古诗词 API (Hitokoto API)，随机返回一条古诗词名句。采用 Vert.x + Redis 全异步开发，毫秒级稳定响应。 (github.com) 其开源项目 或者接入另外一个一言开源api 一言 Hitokoto - 一言 blog\\source\\_data\\widgets.yml123456789101112131415161718welcome: layout: markdown title: 哈喽~ 远道而来的朋友呀 ： content: | &lt;p id=&quot;hitokoto&quot;&gt; &lt;a href=&quot;#&quot; id=&quot;hitokoto_text&quot;&gt;:D 获取中...&lt;/a&gt; &lt;/p&gt; &lt;script&gt; fetch(&#x27;https://v1.hitokoto.cn&#x27;) .then(response =&gt; response.json()) .then(data =&gt; &#123; const hitokoto = document.querySelector(&#x27;#hitokoto_text&#x27;) hitokoto.href = `https://hitokoto.cn/?uuid=$&#123;data.uuid&#125;` hitokoto.innerText = data.hitokoto &#125;) .catch(console.error) &lt;/script&gt; 这个感觉更像是一个有趣的灵魂 我自己？但是你也可以接入大脑，放入一些自己想说的话，更加个性化和展现个人魅力！ blog\\source\\_data\\widgets.yml123456789101112131415welcome: layout: markdown title: 哈喽~ 远道而来的朋友呀 ： content: | &lt;p id=&quot;bxzdyg&quot;&gt; &lt;span id=&quot;bxzdyg_text&quot;&gt;:D 获取中...&lt;/span&gt; &lt;/p&gt; &lt;script&gt; const myTextArray = [&#x27;龙年大吉！阖家欢乐！&#x27;, &#x27;目标实现共产主义&#x27;, &#x27;天天幸福快乐！健健康康！远离疾病与伤痛。&#x27;, &#x27;人民万岁！&#x27;, &#x27;我想玩黑神话悟空！&#x27;,&#x27;丝之歌！呜呜呜~&#x27;,&#x27;天行健！君子以自强不息&#x27;]; // 将字符替换为你要说的话 const getRandomText = (array) =&gt; &#123; return array[Math.floor(Math.random() * array.length)]; &#125;; const bxzdyg = document.querySelector(&#x27;#bxzdyg_text&#x27;); bxzdyg.innerText = getRandomText(myTextArray); &lt;/script&gt; 这部分也可以改成图片，用img标签，图片就放在blog\\source\\assets里就行了，然后你也明白该怎么做了吧？ 接入Steam（危）待编辑……qwq(其实写了的，一定是不见了！) 接入音乐播放器本站：stellar主题使用meetingjs接入aplayer音乐播放器https://bxzdyg.cn/p/stellar-aplayer-metingjs/ PicGo使用PicGo无非就是连接自己的图床，截图直接上传到网上，图床的服务器上与博客分开。 一般事是合一个markdown的编辑器使用的，文章推送再用命令提示符或者终端之类的切换到blog目录下，执行一段推送命令即可。这个就是使用这个的思路： 提高编写效率 减轻服务器分担，进行分流，提高阅读感受。 待编辑……qwq(其实写了的，一定是不见了！) 加水印待编辑……qwq(其实写了的，一定是不见了！) 评论系统/p/stellar-comment/https://bxzdyg.cn/p/stellar-comment/ 这篇主要讲解waline的评论系统的部署和使用，当然你还可以选择其他的评论系统，如 twikoo,artalk等都是不错的评论系统，自己觉得合适和好用才是最重要的。 站点统计参考文章 Hexo添加字数统计 - Ezhixuan Stellar主题在页脚添加访客统计及运行时间 - 酷小呵 (kuhehe.top) 这两位博主讲的都是可行的方法，不过第一种太麻烦了，我之前也尝试过，不过不利于以后更新，他直接上手模板文件，我还是建议在给定的位置插入,下方是本站的插入方式 footer:sitemap： blog\\_config.stellar.yml12345678910111213141516171819202122232425262728footer:\tcontent: | &lt;!--不蒜子计数器--&gt; &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;!--添加一个访问量--&gt; &lt;span&gt; 本&quot;&lt;span style=&quot;color: hsl(192 98% 55%); font-weight: bold;&quot;&gt;页面&lt;/ a&gt;&lt;/span&gt;&quot;访问 &lt;span id=&quot;busuanzi_value_page_pv&quot; style=&quot;color: hsl(192 98% 55%); font-weight: bold;&quot;&gt;&lt;/span&gt; 次 | 👀总访问 &lt;span id=&quot;busuanzi_value_site_pv&quot; style=&quot;color: hsl(192 98% 55%); font-weight: bold;&quot;&gt;&lt;/span&gt; 次 | 总访客 &lt;span id=&quot;busuanzi_value_site_uv&quot; style=&quot;color: hsl(192 98% 55%); font-weight: bold;&quot;&gt;&lt;/span&gt; 人 &lt;/span&gt; &lt;/br&gt; &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt; &lt;script type=&quot;text/javascript&quot;&gt; function show_runtime() &#123; window.setTimeout(&quot;show_runtime()&quot;, 1000); X = new Date(&quot;2023/09/17 17:00:00&quot;); Y = new Date(); T = (Y.getTime() - X.getTime()); M = 24 * 60 * 60 * 1000; a = T / M; A = Math.floor(a); b = (a - A) * 24; B = Math.floor(b); c = (b - B) * 60; C = Math.floor((b - B) * 60); D = Math.floor((c - C) * 60); runtime_span.innerHTML = &quot;⏱️本站已运行 &quot; + A + &quot;天&quot; + B + &quot;小时&quot; + C + &quot;分&quot; + D + &quot;秒&quot; &#125; show_runtime(); &lt;/script&gt; 自定义样式使用霞鹜文楷字体blog\\_config.stellar.yml1&quot;LXGW WenKai Screen&quot; 将themes中的stellar的style复制到根目录下的_config.stellar.yml 字体大小也可以在这里一起设置，在下面代码块一起贴出 找到style:font-family:body:,添加到最前面就可以了，放在前面的意思就是优先用前面的 blog\\_config.stellar.yml12345678910style: font-size: root: 16px\t# 阅读字体大小 body: .9375rem # 15px # 相对大小 code: 85% # 14px codeblock: 0.8125rem # 13px font-family: logo: &#x27;system-ui, &quot;Microsoft Yahei&quot;, &quot;Segoe UI&quot;, -apple-system, Roboto, Ubuntu, &quot;Helvetica Neue&quot;, Arial, &quot;WenQuanYi Micro Hei&quot;, sans-serif&#x27; body: &#x27;system-ui, &quot;Microsoft Yahei&quot;, &quot;Segoe UI&quot;, -apple-system, Roboto, Ubuntu, &quot;Helvetica Neue&quot;, Arial, &quot;WenQuanYi Micro Hei&quot;, sans-serif&#x27; 首页轮播图(1.19.0)听stellar作者说首页这块地方要整点别的，后面的可以不用考虑了，如果你还是想要用的话，那就以这个版本为基础吧。 如果缺少或者说是没有目标文件，那就需要手动添加 添加自定义css在 blog&#x2F;themes&#x2F;stellar&#x2F;source&#x2F;css&#x2F;_custom&#x2F; 目录中添加 swiperstyle.styl 文件 blog/themes/stellar/source/css/_custom/swiperstyle.styldiv#swiper_container background var(--card); z-index auto.blog-slider position relative border-radius 12px 12px 12px 12px margin auto padding: 10px transition all .3s.blog-slider__item display flex align-items center &amp;.swiper-slide-active .blog-slider__img img opacity 1 transition-delay .3s .blog-slider__content &amp; &gt; * opacity 1 transform none &amp; &gt; *:nth-child(1) transition-delay 0.3s &amp; &gt; *:nth-child(2) transition-delay 0.4s &amp; &gt; *:nth-child(3) transition-delay 0.5s &amp; &gt; *:nth-child(4) transition-delay 0.6s &amp; &gt; *:nth-child(5) transition-delay 0.7s &amp; &gt; *:nth-child(6) transition-delay 0.8s &amp; &gt; *:nth-child(7) transition-delay 0.9s &amp; &gt; *:nth-child(8) transition-delay 1s &amp; &gt; *:nth-child(9) transition-delay 1.1s &amp; &gt; *:nth-child(10) transition-delay 1.2s &amp; &gt; *:nth-child(11) transition-delay 1.3s &amp; &gt; *:nth-child(12) transition-delay 1.4s &amp; &gt; *:nth-child(13) transition-delay 1.5s &amp; &gt; *:nth-child(14) transition-delay 1.6s &amp; &gt; *:nth-child(15) transition-delay 1.7s.blog-slider__img width 300px flex-shrink 0 height 200px padding 10px border-radius 20px transform translateX(0px) overflow hidden &amp;:after content &#x27;&#x27; position absolute top 0 left 0 width 100% height 100% border-radius 15px opacity 0.8 img width 100% height 100% object-fit cover display block opacity 0 border-radius 5px transition all .3s.blog-slider__content padding-right 50px padding-left 25px &amp; &gt; * opacity 0 transform translateY(25px) transition all .4s.blog-slider__code text-align left color var(--text-p3) margin-bottom 10px display block font-weight 500.blog-slider__title text-align left font-size $fs-h3 font-weight 500 color var(--text-p1) margin-bottom 15px -webkit-line-clamp 1 display -webkit-box overflow hidden -webkit-box-orient vertical.blog-slider__text text-align left font-size $fs-h5 color var(--text-p3) -webkit-line-clamp 3 display -webkit-box overflow hidden -webkit-box-orient vertical margin-bottom 15px line-height 1.5em width 100% word-break break-all word-wrap break-word.blog-slider__button display inline-flex background-color var(--block) padding 14px 14px border-radius 8px color var(--text-p1) text-decoration none font-weight 500 justify-content center text-align center letter-spacing 1px display none &amp;:hover background-color var(--block-hover).blog-slider .swiper-container-horizontal &gt; .swiper-pagination-bullets, .blog-slider .swiper-pagination-custom, .blog-slider .swiper-pagination-fraction bottom 10px left 0 width 100%.blog-slider__pagination position absolute z-index 1 right 20px width 11px !important text-align center left auto !important top 50% bottom auto !important transform translateY(-50%) &amp;.swiper-pagination-bullets .swiper-pagination-bullet margin 8px 0 !important .swiper-pagination-bullet width 11px height 11px display block border-radius 10px background #858585 opacity 0.2 transition all .3s .swiper-pagination-bullet-active opacity 1 background $color-theme height 30px@media screen and (max-width: 600px) .blog-slider__pagination transform translateX(-50%) left 50% !important top 320px width 100% !important display flex justify-content center align-items center .blog-slider__pagination &amp;.swiper-pagination-bullets .swiper-pagination-bullet margin 0 5px !important .blog-slider__pagination .swiper-pagination-bullet-active height 11px width 30px .blog-slider min-height 350px height auto margin-bottom 10px .blog-slider__content margin-top 20px text-align center padding 0 30px .blog-slider__item flex-direction column .blog-slider__img .blog-slider__content padding-left 10px padding-right 10px .blog-slider__pagination.swiper-pagination-clickable.swiper-pagination-bullets top 230px 添加自定义文件之后需要在 themes&#x2F;stellar&#x2F;source&#x2F;css&#x2F;main.styl 中引用 themes/stellar/source/css/main.styl12// 自定义样式@import &#x27;_custom/*&#x27; 增改 文件添加如下代码： blog/themes/stellar/layout/_partial/scripts/index.ejs12345// -------- start 自定义首页文章轮播 if (&#x27;&lt;%- theme.customSwiperTopArticle.enable %&gt;&#x27; == &#x27;true&#x27;) &#123; stellar.plugins.customSwiperTopArticle = Object.assign(&lt;%- JSON.stringify(theme.customSwiperTopArticle) %&gt;); &#125; // -------- end 自定义首页文章轮播 blog/themes/stellar/layout/index.ejs12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273function layout_post_pin_article(type,post,content)&#123; var el=&#x27;&#x27;; if(post.post===undefined)&#123; post.post=&#x27;article&#x27;; &#125; //文章简述 var articleDescription=&#x27;&#x27;; if(post.excerpt)&#123; articleDescription=strip_html(post.excerpt) &#125;else if(post.description)&#123; articleDescription=post.description &#125;else if(post.content&amp;&amp;theme.article.auto_excerpt&gt;0)&#123; articleDescription=truncate(strip_html(post.content),&#123;length:theme.article.auto_excerpt&#125;) &#125; el +=&#x27;&lt;div class=&quot;blog-slider__item swiper-slide&quot;&gt;&#x27;; el +=&#x27;&lt;a class=&quot;blog-slider__img&quot; href=&quot;&#x27; + url_for(post.link || post.path) + &#x27;&quot;&gt;&#x27;; el +=&#x27;&lt;img width=&quot;48&quot; height=&quot;48&quot; no-lazy src=&quot;&#x27; + post.swiper_thumbnail + &#x27;&quot; alt=&quot;&quot;/&gt;&#x27;; el +=&#x27;&lt;/a&gt;&#x27;; el +=&#x27;&lt;div class=&quot;blog-slider__content&quot;&gt;&#x27;; el +=&#x27;&lt;span class=&quot;blog-slider__code&quot;&gt;&#x27;+ date(post.date,config.date_format) +&#x27;&lt;/span&gt;&#x27;; el +=&#x27;&lt;a class=&quot;blog-slider__title&quot; href=&quot;&#x27; + url_for(post.link || post.path) + &#x27;&quot; title=&quot;&#x27;+ (post.title || post.seo_title) +&#x27;&quot;&gt;&#x27;+(post.title || post.seo_title) +&#x27;&lt;/a&gt;&#x27;; el +=&#x27;&lt;div class=&quot;blog-slider__text&quot;&gt;&#x27;+articleDescription +&#x27;&lt;/div&gt;&#x27;; el +=&#x27;&lt;a class=&quot;blog-slider__button&quot; href=&quot;&#x27; + url_for(post.link || post.path) + &#x27;&quot;&gt;详情&lt;/a&gt;&#x27;; el +=&#x27;&lt;/div&gt;&#x27;; el +=&#x27;&lt;/div&gt;&#x27;; return el;&#125;function layout_posts(partial) &#123; var el = &#x27;&#x27;; el += &#x27;&lt;div class=&quot;post-list post&quot;&gt;&#x27;; if (is_home()) &#123; // pinned posts const pinned = site.posts.filter(function(post)&#123; return post.pin !== undefined; &#125;).sort((config.index_generator &amp;&amp; config.index_generator.order_by) || &#x27;-date&#x27;); if (page.current === 1) &#123; el += &#x27;&lt;div id=&quot;_custom-post-categories&quot;&gt;&lt;/div&gt;&#x27;; if(theme.customSwiperTopArticle.enable)&#123; el+=&#x27;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;&#x27;; el+=&#x27;&lt;div class=&quot;blog-slider__wrp swiper-wrapper&quot;&gt;&#x27;; pinned.forEach((post,i)=&gt;&#123; el+=layout_post_pin_article(&#x27;post&#x27;,post,partial(post)); &#125;); el+=&#x27;&lt;/div&gt;&#x27;; el+=&#x27;&lt;div class=&quot;blog-slider__pagination swiper-pagination-clickable swiper-pagination-bullets&quot;&gt;&lt;/div&gt;&#x27;; el+=&#x27;&lt;/div&gt;&#x27;; &#125;else&#123; pinned.forEach((post,i)=&gt;&#123; el += layout_post_card(&#x27;post&#x27;,post,partial(post)); &#125;); &#125; &#125; // unpinned posts page.posts.each(function(post)&#123; if (theme.customSwiperTopArticle.enable) &#123; el += layout_post_card(&#x27;post&#x27;, post, partial(post)); &#125;else&#123; if(post.pin == undefined)&#123; el += layout_post_card(&#x27;post&#x27;,post,partial(post)); &#125; &#125; &#125;) &#125; else &#123; page.posts.each(function(post)&#123; el += layout_post_card(&#x27;post&#x27;, post, partial(post)); &#125;) &#125; el += &#x27;&lt;/div&gt;&#x27;; return el;&#125; 起始位置在function layout_post_card的下面 覆盖了function layout_posts 末尾在function layout_wikis的上方 blog/themes/stellar/source/js/main.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// swiper// ------------------- start 首页置顶文章轮播 新增if (stellar.plugins.swiper) &#123; const swiper_container = document.getElementById(&#x27;swiper_container&#x27;); if (swiper_container !== undefined) &#123; stellar.loadCSS(stellar.plugins.customSwiperTopArticle.css); stellar.loadScript(stellar.plugins.customSwiperTopArticle.js, &#123;defer:true&#125;).then(function () &#123; var swiper = new Swiper(&#x27;.blog-slider&#x27;, &#123; passiveListeners: true, spaceBetween: 30, effect: &#x27;fade&#x27;, loop: true, autoplay: &#123; disableOnInteraction: true, delay: 3000 &#125;, mousewheel: false, // autoHeight: true, pagination: &#123; el: &#x27;.blog-slider__pagination&#x27;, clickable: true, &#125; &#125;); swiper_container.onmouseenter = function() &#123; swiper.autoplay.stop(); &#125;; swiper_container.onmouseleave = function() &#123; swiper.autoplay.start(); &#125; &#125;); &#125;// ------------------- end 首页置顶文章轮播 新增 // swiper const swiper_api = document.getElementById(&#x27;swiper-api&#x27;); if (swiper_api != undefined) &#123; stellar.loadCSS(stellar.plugins.swiper.css); stellar.loadScript(stellar.plugins.swiper.js, &#123;defer:true&#125;).then(function () &#123; var swiper = new Swiper(&#x27;.swiper-container&#x27;, &#123; slidesPerView: &#x27;auto&#x27;, spaceBetween: 8, centeredSlides: true, loop: true, pagination: &#123; el: &#x27;.swiper-pagination&#x27;, clickable: true, &#125;, navigation: &#123; nextEl: &#x27;.swiper-button-next&#x27;, prevEl: &#x27;.swiper-button-prev&#x27;, &#125;, &#125;); &#125;) &#125;&#125; 引入swiper轮播图插件blog/_config.stellar.yml123456# 自定义swiper文章置顶customSwiperTopArticle: enable: true css: https://cdn.jsdelivr.net/gh/XuxuGood/simple-blog-cdn@main/css/swiper/swiper.min.css js: https://cdn.jsdelivr.net/gh/XuxuGood/simple-blog-cdn@main/js/swiper/swiper.min.js init_js: https://cdn.jsdelivr.net/gh/XuxuGood/simple-blog-cdn@main/js/swiper/swiper_init.js 正式使用 12pin: true # 是否置顶swiper_thumbnail: 图片地址 效果展示 由于字少，没有将左边顶过去 bug和缺陷将鼠标放在文字那一块有一个图片放大放大镜图标在除了主页外就会报错，待修(不过不影响使用)，最大的问题应该是加载的问题，图片比js早就会出现分离的状况 footer:content文本居中嗯，怎么嗦呢，他这个都是有点偏左，我某名奇妙就是想让这块部分居中，神奇吧？！那就开干吧 方法一 使用css对样式调整一下，然后在head导入css。需要对css选择器和样式有一定了解。 blog/source/css/override.css123.page-footer .text p &#123; text-align: center;&#125; blog/_config.yml123inject: head: - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/override.css&quot;&gt; 方法二 使用&lt;center&gt;标签 blog\\_config.stellar.yml12345footer: content: | &lt;center&gt; &lt;p&gt;本破站由 &lt;a href=&quot;/&quot;&gt;@BXZDYG&lt;/a&gt; 使用 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/xaoxuu/hexo-theme-stellar&quot;&gt;Stellar&lt;/a&gt; 主题创建。&lt;br&gt;本博客部分素材来源于网络，如有侵权请联系&lt;a href=&quot;mailto:1476341845@qq.com&quot;&gt;1476341845@qq.com&lt;/a&gt;删除&lt;br&gt;本博客所有文章除特别声明外，均采用 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt; 许可协议，转载请注明出处。&lt;/p&gt; &lt;/center&gt; 使用这种方式嵌套*[@BXZDYG](/)*这类markdown语法无法进行正常转义，需要先运行一次，将对应的html元素复制下来，放到这里。 更换代码高亮显示诱因：默认的无法识别vue 待编辑……qwq(其实写了的，一定是不见了！) 图片点击放大官方文档很详细的说明了 Stellar：表达类标签组件（15+个） - XAOXUU 但是居然你跟着我一步一步的配置，那我就不能不提，我觉得这个很重要 全局配置blog\\_config.stellar.yml123tag_plugins: image: fancybox: true # true, false # 全局配置图片点击放大 局部配置1&#123;% image ./index/image-20230809162752613.png fancybox:true %&#125; 黑夜模式本站:stellar主题深色模式设置https://bxzdyg.cn/p/stellar-dark-mode/ 代码过长，写在这篇文章里了。 常见错误123456hexo : 无法将“hexo”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。所在位置 行:1 字符: 1+ hexo --help+ ~~~~ + CategoryInfo : ObjectNotFound: (hexo:String) [], CommandNotFoundException + FullyQualifiedErrorId : CommandNotFoundException 没有进行全局安装，解决办法,将node_modules文件中的.bin文件设置环境变量 1E:\\....\\blog ode_modules\\.bin 如果还是不行，那就使用npm run 之类的命令吧，每次运行项目你也可以看见的 在package.json中 1234567&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server&quot;, &quot;new&quot;: &quot;hexo new&quot;&#125;, 123456npm run server # 运行npm run clean #清除publicnpm run build #build public文件npm run new 文章 # 创建文章npm run new page # 创建页面npm run new draft # 创建草稿 # 不会被build 更新后引起的错误头代码中的参考资料12345references: - title: Django+cropper实现用户头像裁剪, 预览和上传 - 大江狗的文章 - 知乎 url: https://zhuanlan.zhihu.com/p/41181618 - title: 在Django中如何限制上传文件的类型与大小_Sc.Crist的博客-CSDN博客 url: https://blog.csdn.net/weixin_51523373/article/details/117562387 现象：无法build正常文章，其他文章都能够生成 新版本：Stellar：编写文章以及独立页面 - XAOXUU 123references: - &#x27;[Django+cropper实现用户头像裁剪, 预览和上传 - 大江狗的文章 - 知乎](https://zhuanlan.zhihu.com/p/41181618)&#x27; - &#x27;[在Django中如何限制上传文件的类型与大小_Sc.Crist的博客-CSDN博客](https://blog.csdn.net/weixin_51523373/article/details/117562387)&#x27; 我大概明白这部分更新的意义是什么，就是可以直接复制到头代码里面，省去自己划分的时间，之前还需要划分一个auth 消失的tag 一刻也没有为tag哀悼，立刻赶来战场的是…hashtag ! 图片无非正常显示 不知怎么评价，多clean、 build就好了 本来正常的静态友链和网站卡片都无法显示改了，详见和官方文档 具体变更实在原有的主键划分上分为多个yaml子文件","tags":["Hexo","Stellar"],"categories":["记录","博客开发"]},{"title":"Hello World","path":"/p/hello-world/","content":"从这里开始…… 岳阳楼记范仲淹庆历四年春，滕子京谪守巴陵郡。越明年，政通人和，百废具兴，乃重修岳阳楼，增其旧制，刻唐贤今人诗赋于其上，属予作文以记之。予观夫巴陵胜状，在洞庭一湖。衔远山，吞长江，浩浩汤汤，横无际涯，朝晖夕阴，气象万千，此则岳阳楼之大观也，前人之述备矣。然则北通巫峡，南极潇湘，迁客骚人，多会于此，览物之情，得无异乎？若夫淫雨霏霏，连月不开，阴风怒号，浊浪排空，日星隐曜，山岳潜形，商旅不行，樯倾楫摧，薄暮冥冥，虎啸猿啼。登斯楼也，则有去国怀乡，忧谗畏讥，满目萧然，感极而悲者矣。至若春和景明，波澜不惊，上下天光，一碧万顷，沙鸥翔集，锦鳞游泳，岸芷汀兰，郁郁青青。而或长烟一空，皓月千里，浮光跃金，静影沉璧，渔歌互答，此乐何极！登斯楼也，则有心旷神怡，宠辱偕忘，把酒临风，其喜洋洋者矣。嗟夫！予尝求古仁人之心，或异二者之为，何哉？不以物喜，不以己悲，居庙堂之高则忧其民，处江湖之远则忧其君。是进亦忧，退亦忧。然则何时而乐耶？其必曰“先天下之忧而忧，后天下之乐而乐”乎！噫！微斯人，吾谁与归？时六年九月十五日。文言文节选 以《岳阳楼记》，以镇此楼。 你好世界 &nbsp;&nbsp;很高兴在这里和你相遇，向你诉说着一些我的个人经历，还有我的个人性格。&nbsp;&nbsp;我是一个理想主义者，对平等、正义、民主有很强烈的向往，也希望能够做一些造福于社会的事情。可我在生活中，在还没有完全开始，就已经意识到我个人的能力是如此低微。我只是一个空想主义者，或者白日梦想家。我不是那么勇敢，也不是那么聪明，也没有那么坚强。失败在我这是家常便饭，一心想做成最好的自己，于是我鼓起勇气，握紧双拳，尽力推动自己向前走，可总是忧虑很多事情而不敢向前迈步，对自己的人生方向一直很迷茫。&nbsp;&nbsp;小时候对画画很感兴趣，也练了一段时间，参加了不少比赛，可是后来贪玩荒废了，大学期间想重拾画板，学习板绘想当一个画家，自诩自己是有一点天赋的，可不断练习了一段时间发现自己的水平依然还是我小学的水准。最后，还是继续学习编程，虽然这条路依然是那么艰难。 撤回 &nbsp;&nbsp;我不是来互联网卖惨的，虽然之前这段是一番自我愧疚和感动的片段，但是真的挺碍眼的，因我再怎么愧疚也改变不了现状，也没有太多能力。我对自己人生价值和活着的意义肯定是有定义的，可惜的就是我还不是实现自我价值的“我”。现在是新年新气象，我一定要扫去我的颓和衰，别太自卑了！——此段二〇二四年一月一日补评。 建站初衷 &nbsp;&nbsp;虽然最开始是为了给自己招聘加点分，但是已经建站了，那性质已然不是那么单一了，本着无私分享知识和分享个人经验的初心，和明确与国家相统一的立场，向着未来，前进！ 感谢 &nbsp;&nbsp;我觉得我最大的优势就是能够发自真心的仰慕大佬，真真正正的钦佩大佬，我也一直站在大佬的肩上，借助大佬眺望远方。尤其是我就很仰慕小猪,一个学神，我曾经的初中同桌。 开源大佬 xaoxuu 博客网站开发参考 xaoxuu江湖浪子CAYZLHEzhixuan星日语Chenli钟意博客酷小呵 目标 &nbsp;&nbsp;现在的博客目标就是完善我的博文，将我的笔记整理放在博文上。而且个性化依然还没有达到我的目标。其他目标就是传播中华优秀的传统文化，做一个文化传播者。","tags":["Hexo","无痛呻吟"],"categories":["记录"]},{"title":"MySQL必备语句和授权🧠&四十道练习题📜","path":"/p/MySQL必备语句和授权-四十道练习题/","content":"必备SQL语句SQL程序语言有四种类型，对数据库的基本操作都属于这四类，它们分别为；数据定义语言(DDL)、数据查询语言（DQL）、数据操纵语言（DML）、数据控制语言（DCL） 类型分类DDL主要语法有 CREATE、ALTER、DROP和TRUNCATE 1234567891011121314CREATE TABLE 表名称(列名称1 数据类型,列名称2 数据类型,列名称3 数据类型,....)ALTER TABLE table_nameALTER COLUMN column_name datatypeDROP TABLE 表名称DROP DATABASE 数据库名称TRUNCATE TABLE 表名称 DQL主要语法是 SELECT 1SELECT 列名称 FROM 表名称 DML主要语法有 INSERT、UPDATE、DELETE 123UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)DELETE FROM 表名称 WHERE 列名称 = 值 DCL主要语法有 GRANT,REVOKE,COMMIT,ROLLBACK 12345678910111213GRANT 权限1, … , 权限n ON 数据库.对象 TO 用户名;REVOKE 权限1, … , 权限n ON 数据库.对象 FORM 用户名;BEGIN TRANSACTION //事务开始SQL1SQL2COMMIT //事务提交BEGIN TRANSACTION //事务开始SQL1SQL2 ROLLBACK //事务回滚 而基于上面的语法可以有很多操作,练习基础表,可以建表敲敲代码试试看 123456789CREATE TABLE depart(\tid int not null primary key auto_increment,\ttitle varchar(16) not NULL)DEFAULT CHARSET=utf8;CREATE table info(\tid int not null primary key auto_increment,\tname varchar(20) not NULL,\t`email` varchar(20) NULL,\tage INT not NULL,\t`depart_id` int not NULL)DEFAULT CHARSET=utf8; 123456789INSERT INTO `depart` VALUES (1, &#x27;开发&#x27;);INSERT INTO `depart` VALUES (2, &#x27;运营&#x27;);INSERT INTO `depart` VALUES (3, &#x27;销售&#x27;);INSERT INTO `info` VALUES (1, &#x27;abc&#x27;, &#x27;123@qq.com&#x27;, 20, 1);INSERT INTO `info` VALUES (2, &#x27;bobo&#x27;, &#x27;530@qq.com&#x27;, 20, 1);INSERT INTO `info` VALUES (3, &#x27;ccc&#x27;, &#x27;3321@163.com&#x27;, 10, 1);INSERT INTO `info` VALUES (4, &#x27;abc1&#x27;, &#x27;asda@qq.com&#x27;, 51, 2);INSERT INTO `info` VALUES (5, &#x27;1b&#x27;, &#x27;asd@qq.com&#x27;, 30, 3);INSERT INTO `info` VALUES (6, &#x27;cc&#x27;, &#x27;3321@163.coms&#x27;, 28, 1); 条件12345678910111213141516171819202122select * from info where id &gt;1;select * from info where id =1;select * from info where id &gt;=1;select * from info where id !=1;select * from info where id between 2 and 4; #2、4取得到SELECT * from info where id&gt;2 and id &lt;4;\t#只能取得到3 select * from info where name =&#x27;abc&#x27; and age=20;select * from info where (name=&#x27;abc&#x27; or email=&quot;123@qq.com&quot;) and age =20;select * from info where ( email=&quot;530@qq.com&quot; or name=&#x27;abc&#x27;) and age =20;#返回两个select * from info where id in(1,4,6);select * from info where id not in (1,4,6);select * from info where id in (select id from depart); -- 只返回id=1的-- select * from info where depart_id in (select depart.id from depart where depart.id = 3);select * from info where depart_id in (select id from depart where id = 3); -- 我真服了自己在这里纠结这么久 一直写的是id in 而不是depart_id inselect * from info where exists (select * from depart where id =3); --exists -- 用于判断，判断子查询有没有结果，有的话为TRUE 返回所有 没有则为Falseselect * from info where not exists (select * from depart where id=3); -- 结果为空集,就是没有结果select * from (select * from info where id &gt;3) as T where T.age &gt;10;#T表示子查询语句，将临时查询的结果作为一张表 通配符一般用于模糊查找 1234567891011121314-- % 表示匹配任意字符select * from info where name like &quot;%b%&quot;;select * from info where name like &quot;%b&quot;;select * from info where email LIKE &quot;%@qq.com&quot;;select * from info where name like &quot;a%c&quot;;select * from info where email like &quot;3321%&quot;-- 一个_表示一个字符占位符select * from info where email like &quot;___@qq.com&quot;;select * from info where email like &quot;123_qq.co_&quot;;select * from info where email like &quot;_23_qq.co_&quot;;select * from info where email like &quot;%@__.com&quot;; 注意：数量少，数据量大的搜索 映射1234567891011121314151617select * from info;select id, name from info;select id, name as NM from info;select id, bane as MN,123\tfrom info;select max(id) from depart ;select min(id) from depart ;SELECT max(id) as mid ,min(id) as nid FROM depart;select id,\tname,\t666 as num,\t(select max(id) from depart) as mid,\t(select min(id) from depart) as nid, agefrom info; 12345678# 注意效率很低select id,\tname,\t(select title from depart where depart.id=info.id )as x1,\t(select title from depart where depart.id=info.depart_id) as x2\tFROM info;, 123456789101112131415161718192021select id,\tname,\tcase depart_id when 1 then &quot;第1部门&quot; end v1,\tcase depart_id when 1 then &quot;第1部门&quot; else &quot;其他&quot; end v2,\tcase depart_id when 1 then &quot;第1部门&quot; when 2 then &quot;第2部门&quot; else &quot;其他&quot; end v3,\tcase when age&lt;18 then &quot;未成年&quot; end v4, case when age&lt;18 then &quot;少年&quot; else &quot;老少年&quot; end v5, case when age&lt;18 then &quot;少年&quot; when age&lt;30 then &quot;青年&quot; else &quot;大叔&quot; end v6from info;/* UPDATE info SET age_level = CASE WHEN age BETWEEN 0 AND 10 THEN 1 WHEN age BETWEEN 11 AND 20 THEN 2 WHEN age BETWEEN 21 AND 30 THEN 3 WHEN age BETWEEN 31 AND 40 THEN 4 ELSE 5 END ; */ 排序12345678910select * from info order by age desc; -- 倒数select * from info order by age asc; -- 顺序select * from info order by id desc;select * from info order by id asc;select * from info order by age asc ,id desc; -- 优先按照age从小到大,如果age相同则按照id从大到小。select * from info where id &gt;2 order by age asc ,id desc;select * from info where id &gt;3 or name like &quot;%qq.com&quot; order by age asc ,id desc; 取部分12345select * from info limit 5; -- 获取前5条数据select * from info order by id desc limit 3; -- 先排序，再获取前3条数据select * from info where id &gt; 10 order by id desc limit 3;\t-- 先排序，在获取前3条数据select * from info limit 3 offset 2 -- 从位置2开始，向后获取前3条数据（初始索引为0） 分组12select 字段名 from 表名 group by 字段名;select depart_id ,count(id) from info group by depart_id; -- 分组依据的字段要放入查询结果中 1select age,max(id),min(id),sum(id),count(id),avg(id) from info group by age; 123select age,name from info group by age; -- 不建议 因为同一个年龄下有多个姓名数据，所以会报错select * from info where id in (select max(id) from info group by age);-- 先括号内获取每个年龄段最大的id号，然后查询出来 123select age ,count(id) from info group by age having count(id) &gt; 2; -- 聚合条件SELECT age,count(id) FROM info WHERE id&gt;1 GROUP BY age HAVING count(id)&gt;0 ORDER BY age ASC;-- 统计范围id&gt;2且人数大于2的年龄，且结果以年龄升序 12345678-- 到目前为止SQL顺序\twhere --\tgroup by -- 聚合条件\thaving -- order by --\tlimit -- -- 用了group by 想要再进行二次筛选应该使用having\t-- where 可以单独使用 having只能分组后使用 12345678select age,count(id) from info where id &gt;2 group by age having count(id)&gt;1 order by age desc limit 1;-要查询的表info-条件 id&gt;2-根据age分组-过滤数量小于等于1-根据age降序排序-获取第一条SELECT age,count(id) FROM info WHERE id&gt;1 GROUP BY age HAVING count(id)&gt;0 ORDER BY age ASC limit 1; 连表多个表可以连接起来查询 外连接1主表 left outer join 从表 on 主表.x =从表.id 12select * from info left outer join depart on info.depart_id=depart.id; -- 向外表进行左连接，表示这个表为主表.连接条件为depart_idselect info.id,info.name,info.email,depart.title from info left outer join depart on info.depart_id=depart.id; 1从表 right outer join 主表 on主表.字段=从表.字段 1select * from depart right outer join info on depart.id=info.depart_id; 主表在左从表在右 为了更加直接的查看效果，我们分别在depart表和info中额外插入一条数据。 12insert into depart(title) values(&quot;安全&quot;);insert into info(name,email,age,depart_id) values(&quot;蛮吉&quot;,&quot;sjs@kuiba.com&quot;,2012); 左外连接 右外连接 简写 1select * from depart left join info on ... 内连接有对应关系才显示，没有就忽略掉 12select * from info inner join depart on info.depart_id=depart.id;-- 注意这里没有左右了 123456789到目前位置的SQL执行顺序selectfromjoin onwhere -- (select from)group byhaving -- (和group by绑定)order bylimit 联合12345678910select id,title from departunionselect id,name from info;-- 列数需相同,就能连接。-- 列数指的是查询结果为几列的列select id,title from departunionselect email,name from info; 12345select id from departunionselect id from info;-- 自动去重,如果列名相同 12345select id from departunion allselect id from info;-- 保留所有 表关系 单表 一对多 多对多 外键约束 123456789CREATE table info(\tid int not null primary key auto_increment,\tname varchar(20) not NULL,\t`email` varchar(20) NULL,\tage INT not NULL,\t`depart_id` int not NULL, constraint fk_info_depart foreign key (depart_id) references depart(id) )DEFAULT CHARSET=utf8; 如果表已经建 好了 1alter table info add constraint fk_info_depart foreign key info(depart_id) references depart(id); 删除外键 1alter table info drop foreign key fk_info_depart; 外键条件在我们使用外键的时候，应该遵循如下条件： 外键要存在，首先必须保证表的引擎是 InnoDB（默认的存储引擎），如果不是 InnoDB 存储引擎，那么外键可以创建成功，但没有约束作用；外键字段的字段类型（列类型），必须与父表的主键类型完全一致；每张表中的外键名称不能重复；增加外键的字段，如果数据已经存在，那么要保证数据与父表中的主键对应。如果外键约束模式选择SET NULL ，那么字段必须允许为NULL，否则出现Cannot add foreign key constraint。 在以后项目开发时，设计表结构及其关系的是一个非常重要的技能。一般项目开始开发的步骤： 需求调研 设计数据库表结构（根据需求） 项目开发（写代码） 大量的工作应该放在前2个步骤，前期的设计完成之后，后续的功能代码开发就比较简单了。 授权之前我们无论是基于Python代码还是自带客户端去连接MySQL时，均使用的是root账户，拥有对MySQL数据库操作的所有权限。 如果有多个程序的数据库都放在同一个MySQL中，如果程序都用root账户就存在风险了。这种情况怎么办呢？ 在MySQL中支持创建账户，并给账户分配权限，例如：只拥有数据库A操作的权限、只拥有数据库B中某些表的权限、只拥有数据库B中某些表的读权限等。 用户管理在MySQL的默认数据库mysql中的user表中存储着所有的账户信息(含账户、权限等)。 1234567891011121314151617181920212223mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.00 sec)mysql&gt; use mysqlDatabase changedmysql&gt; SELECT user, authentication_string FROM user;+------------------+------------------------------------------------------------------------+| user | authentication_string |+------------------+------------------------------------------------------------------------+| mysql.infoschema | $s$012$THISISACOMBINAcccccccccDPASSWORDcccccNEVasEaaaaUSED || mysql.session | $s$012$THISISACOMBINAcccccccccDPASSWORDcccccNEVasEaaaaUSED || mysql.sys | $s$012$THISISACOMBINAcccccccccDPASSWORDcccccNEVasEaaaaUSED || root | $s$012$THISISACOMBINAcccccccccDPASSWORDcccccNEVasEaaaaUSED |+------------------+------------------------------------------------------------------------+4 rows in set (0.00 sec) 12desc mysql.`user`-- 查看权限 创建和删除用户1create user &#x27;用户名&#x27;@&#x27;连接者的IP地址&#x27; identified by &#x27;密码&#x27;; 1234567891011create user bobo@127.0.0.1 identified by &#x27;root&#x27;;drop user bobo@127.0.0.1;create user bobo1@&#x27;127.0.0.%&#x27; identified by &#x27;root&#x27;;drop user bobo1@&#x27;127.0.0.%&#x27;;create user bobo2@&#x27;%&#x27; identified by &#x27;root&#x27;;drop user bobo@&#x27;%&#x27;;create user &#x27;bobo3&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27;;drop user &#x27;bobo3&#x27;@&#x27;%&#x27;; 修改用户1rename user &#x27;用户名&#x27;@&#x27;连接者ip地址&#x27; identified by &#x27;密码&#x27;; 12rename user bobo@127.0.0.1 to bobo@localhost;rename user &#x27;bobo&#x27;@&#x27;127.0.0.1&#x27; to &#x27;bobo&#x27;@&#x27;localhost&#x27;; 修改密码(mysql&#x3D;&#x3D;5.7)1set password for &#x27;用户名&#x27;@&#x27;ip地址&#x27;=Password(&#x27;新密码&#x27;); 1set password for &#x27;bobo&#x27;@&#x27;127.0.0.1&#x27;=Password(&#x27;123&#x27;) 授权管理创建好用户后就可以进行授权了 授权 1grant 权限 on 数据库.表 to &#x27;用户&#x27;@&#x27;ip地址&#x27; 12345678910111213grant all privileges on *.* TO &#x27;bobo&#x27;@&#x27;localhost&#x27;; -- 用户bobo且在本地时拥有所有权限grant all privileges on django_test.* TO &#x27;bobo&#x27;@&#x27;localhost&#x27;;\t-- 用户bobo且在本地时拥有django_test库所有权限grant all privileges on django_test.info to &#x27;bobo&#x27;@&#x27;localhost&#x27;;-- 用户bobo且在本地时拥有django_test库的info表所有权限grant select on django_test.info To &#x27;bobo&#x27;@&#x27;localhost&#x27;; -- 用户bobo且在本地时拥有django_test库select权限grant select,insert on django_test.* to &#x27;bobo&#x27;@&#x27;localhost&#x27;; -- 用户bobo且在本地时拥有django_test库select,insert权限-- 注意flush privileges; 将数据读取到内存，从而立即生效 对于权限 123456789101112131415161718192021222324252627282930all privileges 除grant外的所有权限select 仅查权限select,insert 查和插入权限...usage 无访问权限alter 使用alter tablealter routine 使用alter procedure和drop procedurecreate 使用create tablecreate routine 使用create procedurecreate temporary tables 使用create temporary tablescreate user 使用create user、drop user、rename user和revoke all privilegescreate view 使用create viewdelete 使用deletedrop 使用drop tableexecute 使用ca11和存储过程file 使用select into outfile和load data infilegrant option 使用grant和revokeindex 使用indexinsert 使用insertlock tables 使用lock tab1eprocess 使用show ful1 processlistselect 使用selectshow databases 使用show databasesshow view 使用show viewupdate 使用updatereload 使用f1ushshutdown 使用mysqladmin shutdown(关闭MySQL)super 使用change master、kill、logs、purge、master和set global。还允许mysqladmin调试登陆replication client 服务器位置的访问replication slave 由复制从属使用 对数据库和表 1234数据库名 数据库中的所有数据库.表名 指定数据库中的某张表\t数据库.存储过程名 指定数据库中的存储过程 *。* 查看授权 1show grants for &#x27;用户&#x27;@&#x27;IP地址&#x27; 1show grants for &#x27;bobo&#x27;@&#x27;localhost&#x27;; 取消权限 1revoke 权限 on数据库.表 from &#x27;用户&#x27;@&#x27;IP地址&#x27;; 1revoke all privileges on django_test.info.* from &#x27;bobo&#x27;@&#x27;localhost&#x27;; 一般情况下，在很多的正规公司，数据库都是由DBA来统一进行管理，DBA为每个项目的数据库创建用户，并赋予相关的权限。 数据库的导入和导出根据上图创建 数据库&amp;表结构 并录入数据（可以自行创造数据） 1234create database test default charset utf8 collate utf8_general_ci;drop database test;drop databases IF EXISTS test;#如果存在就删除 利用导入数据库命令: 导入 1mysql -u root -p test &lt; 1mysql -uroot &lt; /home/project/init-MySql.sql 导出 123456# 数据+结构mysqldump -u root -p test &gt; backup.sqlmysqldump -u root -p database_name &gt;/home/project/init-MySql.sql# 结构mysqldump -u root -p -d test &gt; backup.sql 练习题 123456789101112131415161718192021222324252627282930313233343536373839404142434445461.根据上图创建数据库&amp;表结构并录入数据（可以自行创造数据）2.创建用户test_root并赋予此数据库的所有权限。3.查询姓“李&quot;的老师的个数。4.查询姓“张&quot;的学生名单。5.查询男生、女生的人数。6.查询同名同姓学生名单，并统计同名人数。7.查询“三年二班”的所有学生。8.查询每个班级的班级名称、班级人数。9.查询成绩小于60分的同学的学号、姓名、成绩、课程名称。10.查询选修了&quot;生物课&quot;的所有学生ID、学生姓名、成绩。11.查询选修了&quot;生物课”且分数低于60的的所有学生ID、学生姓名、成绩。12.查询所有同学的学号、姓名、选课数、总成绩。13.查询各科被选修的学生数。14.查询各科成绩的总分、最高分、最低分，显示：课程ID、课程名称、总分、最高分、最低分。15.查询各科成绩的平均分，显示：课程ID、课程名称、平均分。16.查询各科成绩的平均分，显示：课程ID、课程名称、平均分（按平均分从大到小排序）。17.查询各科成绩的平均分和及格率，显示：课程ID、课程名称、平均分、及格率。18.查询平均成绩大于60的所有学生的学号、平均成绩。19.查询平均成绩大于85的所有学生的学号、平均成绩、姓名。20.查询“三年二班”每个学生的学号、姓名、总成绩、平均成绩。21.查询各个班级的班级名称、总成绩、平均成绩、及格率（按平均成绩从大到小排序）22.查询学过“朱元璋”老师课的同学的学号、姓名。23.查询没学过“朱元璋”老师课的同学的学号、姓名。24.查询选修“朱棣”老师所授课程的学生中，成绩最高的学生姓名及其成绩（不考虑并列）。25.查询选修“朱棣”老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列）26.查询只选修了一门课程的全部学生的学号、姓名。27.查询至少选修两门课程的学生学号、学生姓名、选修课程数量。28.查询两门及以上不及格的同学的学号、学生姓名、选修课程数量。29.查询选修了所有课程的学生的学号、姓名。30.查询未选修所有课程的学生的学号、姓名。31.查询所有学生都选修了的课程的课程号、课程名。32.查询选修“生物°和“物理”课程的所有学生学号、姓名。33.查询至少有一们课与学号为“1的学生所选的裸程相同的其他学生学号和姓名34.查询与学号为“2”的同学选修的课程完全相同的具地学生学号和姓名。35.查询生物”课程比”物理”课程成绩高的所有学生的学号：36.查询每门课程成绩最好的前3名（不专虑成绩并列情况）。37.查询每门课程成绩最好的前3名（考虑成绩并列情况）。38.创建一个表sc,然后将score表中所有数据插入到sc表中。39.向score表中插入一些记录，这些记录要求符合以下条件:\t- 学生ID为：没上过课程D为“2”课程的学生的学号： - 课程ID为：2\t- 成绩为：8040.向score表中插人些记录，这些记录要求符合以下条件：\t- 学生ID为：学过课程ID为“5”课程的学生的学号。\t- 课程ID为：2。(我知道根据我的数据这个同学已经学历这个课程)\t- 成绩为：课程ID为3的最高分。 注意下面为答案个人写的可能有些问题 1-101.根据上图创建数据库&表结构并录入数据（可以自行创造数据） 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667-- 创建数据库create DATABASE `test`;use `test`;-- 班级表create TABLE class( cid int not null auto_increment PRIMARY key, caption VARCHAR(12) not null);insert into class values(1,&quot;三年二班&quot;),(2,&quot;一年三班&quot;),(3,&quot;三年一班&quot;);-- 教师表CREATE TABLE teacher(tid int not null auto_increment PRIMARY KEY,tname VARCHAR(10) not null);insert into teacher VALUES(1,&#x27;朱元璋&#x27;),(2,&#x27;朱棣&#x27;),(3,&#x27;于谦&#x27;),(4,&#x27;郭子兴&#x27;),(5,&#x27;姚广孝&#x27;),(6,&#x27;王守仁&#x27;),(7,&#x27;海瑞&#x27;);-- 学生表CREATE TABLE student(sid int not null auto_increment PRIMARY key,sname VARCHAR(10) not null,gender char(1) not null ,class_id int not null);INSERT INTO `student` VALUES (1, &#x27;常遇春&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (2, &#x27;蓝玉&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (3, &#x27;朱标&#x27;, &#x27;男&#x27;, 2);INSERT INTO `student` VALUES (4, &#x27;秦良玉&#x27;, &#x27;女&#x27;, 2);INSERT INTO `student` VALUES (5, &#x27;张居正&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (6, &#x27;宋濂&#x27;, &#x27;男&#x27;, 2);INSERT INTO `student` VALUES (7, &#x27;朱厚照&#x27;, &#x27;男&#x27;, 2);INSERT INTO `student` VALUES (8, &#x27;朱由检&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (9, &#x27;刘基&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (10, &#x27;唐寅&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (11, &#x27;朱允炆&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (12, &#x27;徐阶&#x27;, &#x27;男&#x27;, 2);INSERT INTO `student` VALUES (13, &#x27;朱祐樘&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (14, &#x27;李如柏&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (15, &#x27;李成梁&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (16, &#x27;李如松&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (17, &#x27;徐霞客&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (18, &#x27;胡宗宪&#x27;, &#x27;男&#x27;, 1);INSERT INTO `student` VALUES (19, &#x27;戚继光&#x27;, &#x27;男&#x27;, 3);INSERT INTO `student` VALUES (20, &#x27;戚继光&#x27;, &#x27;男&#x27;, 2);-- 课程表CREATE TABLE course (cid int not null auto_increment PRIMARY key ,cname VARCHAR(10),teacher_id int not null);insert into course values(1,&quot;生物&quot;,1),(2,&quot;体育&quot;,1),(3,&quot;物理&quot;,2),(4, &#x27;IT&#x27;, 3),(5, &#x27;刑法&#x27;, 5),(6, &#x27;语文&#x27;, 7);-- 成绩表CREATE TABLE score (sid int not null PRIMARY key auto_increment ,student_id int not null ,course_id int not null,number int not null);INSERT INTO `score` VALUES (1, 1, 1, 60);INSERT INTO `score` VALUES (2, 1, 2, 59);INSERT INTO `score` VALUES (3, 2, 2, 100);INSERT INTO `score` VALUES (4, 3, 3, 54);INSERT INTO `score` VALUES (5, 4, 4, 59);INSERT INTO `score` VALUES (6, 5, 6, 86);INSERT INTO `score` VALUES (7, 11, 1, 59);INSERT INTO `score` VALUES (8, 8, 1, 100);INSERT INTO `score` VALUES (9, 16, 1, 45);INSERT INTO `score` VALUES (10, 12, 1, 66);INSERT INTO `score` VALUES (11, 6, 1, 66);INSERT INTO `score` VALUES (12, 6, 2, 67);INSERT INTO `score` VALUES (13, 6, 3, 68);INSERT INTO `score` VALUES (14, 6, 4, 69);INSERT INTO `score` VALUES (15, 6, 5, 70);INSERT INTO `score` VALUES (16, 6, 6, 71);INSERT INTO `score` VALUES (17, 2, 1, 66);INSERT INTO `score` VALUES (18, 3, 1, 66);INSERT INTO `score` VALUES (19, 4, 1, 66);INSERT INTO `score` VALUES (20, 19, 1, 99);INSERT INTO `score` VALUES (21, 20, 1, 99);INSERT INTO `score` VALUES (22, 5, 1, 66); 2.创建用户test_root并赋予此数据库的所有权限。 警告此处为个人本题答案仅供参考，非唯一答案123create user &#x27;test_user&#x27;@&#x27;127.0.0.1&#x27; identified by &#x27;root&#x27;;grant all privileges on test.* TO &#x27;test_user&#x27;@&#x27;127.0.0.1&#x27;;flush privileges; 注意要是链接写的是127.0.0.1 实际上也是本地，但是还是得写127.0.0.1而不能写localhost 否则1045 3.查询姓“李\"的老师的个数。 警告此处为个人本题答案仅供参考，非唯一答案1select count(tid) from teacher where tname like &#x27;李%&#x27;; 4.查询姓“张\"的学生名单。 警告此处为个人本题答案仅供参考，非唯一答案1SELECT * from student WHERE sname like &quot;张%&quot;; 5.查询男生、女生的人数。 警告此处为个人本题答案仅供参考，非唯一答案12345678910SELECT gender,count(1) from student GROUP BY gender ;-- count在这里只是一个聚合函数里面写1还是0都行-- 横向统计SELECT gender,COUNT(sid) as `人数` FROM student GROUP BY gender;-- 竖向统计SELECT\t* FROM\t( SELECT COUNT( sid ) AS `女` FROM student WHERE gender = &#x27;女&#x27; ) nv,\t( SELECT COUNT( sid ) AS `男` FROM student WHERE gender = &#x27;男&#x27; ) AS nan; 6.查询同名同姓学生名单，并统计同名人数。icon:hashtag 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132333435-- 返回同名同姓的姓名和人数SELECT\tsname,\tcount( 1 ) FROM\tstudent GROUP BY\tsname;-- 所有名字数量的统计\tSELECT\tsname,\tcount( 1 ) FROM\tstudent GROUP BY\tsname HAVING\tCOUNT( 1 )&gt; 1;SELECT\tsname,\tCOUNT( sid ) AS `人数` FROM\tstudent GROUP BY\tsname HAVING\tCOUNT( sid )&gt; 1;\t-- 返回同名同姓的姓名和信息SELECT\tstudent.* FROM\tstudent WHERE\tsname IN ( SELECT sname FROM student GROUP BY sname HAVING COUNT( sid )&gt; 1 ); 综合整的花活123456789-- 综合 整的花活SELECT student.*, zi.`同名同姓人数`FROM studentINNER JOIN ( SELECT sname, COUNT(sid) AS `同名同姓人数` FROM student GROUP BY sname HAVING COUNT(sid) &gt; 1) AS zi ON student.sname = zi.sname; 7.查询“三年二班”的所有学生。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516-- (1)SELECT\t* FROM\tstudent WHERE\tclass_id = ( SELECT cid FROM class WHERE caption = &quot;三年二班&quot; );-- (2)SELECT\t* FROM\tstudent\tLEFT JOIN class ON student.class_id = class.cid WHERE\tclass.caption = &#x27;三年二班&#x27;-- 显示class_id还是cid都行，重要是拿取到关键数据 8.查询每个班级的班级名称、班级人数。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223-- 显示班级id不显示班级名SELECT class_id,COUNT(1) FROM student GROUP BY class_id;-- 显示班级名-- (1)SELECT\tclass.caption,\tCOUNT( 1 ) AS `人数` FROM\tstudent\tLEFT JOIN class ON student.class_id = class.cid GROUP BY\tclass.caption;-- (2)SELECT\tclass.caption,\tcount( sid ) AS `人数` FROM\tstudent,\t`class` WHERE\tclass.cid = student.class_id GROUP BY\tstudent.class_id; 9.查询成绩小于60分的同学的学号、姓名、成绩、课程名称。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223-- (1)SELECT\tstudent.sid,\tstudent.sname,\tscore.number,\tcourse.* FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid\tLEFT JOIN course ON score.course_id = course.cid WHERE\tnumber &lt; 60;-- (2)SELECT\tstudent.sname,\tzi.cname,\tzi.number,\tzi.student_id FROM\tstudent,\t( SELECT course.cname, score.* FROM score INNER JOIN course ON score.course_id = course.cid WHERE number &lt; 60 ) AS zi WHERE\tstudent.sid = zi.student_id; 10.查询选修了\"生物课\"的所有学生ID、学生姓名、成绩。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425-- (1)SELECT\tstudent.sname,\tstudent.sid,\tscore.number,\tcourse.cname FROM\tcourse,\tstudent,\tscore WHERE\tstudent.sid = score.sid AND course.cid = score.course_id AND course.cname = &#x27;生物&#x27;;-- (2)SELECT\tstudent.sid,\tstudent.sname,\tscore.number FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN student ON score.student_id = student.sid WHERE\tcourse.cname = &#x27;生物&#x27;; 11-2011.查询选修了\"生物课”且分数低于60的的所有学生ID、学生姓名、成绩。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728-- (1)SELECT\tstudent.sname,\tstudent.sid,\tscore.number,\tcourse.cname FROM\tcourse,\tstudent,\tscore WHERE\tstudent.sid = score.sid AND course.cid = score.course_id AND course.cname = &#x27;生物&#x27; AND score.number &lt; 60;-- (2)SELECT\tstudent.sname,\tstudent.sid,\tscore.number,\tcourse.cname FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN student ON score.student_id = student.sid WHERE\tcourse.cname = &#x27;生物&#x27; AND score.number &lt; 60 12.查询所有同学的学号、姓名、选课数、总成绩。 12345678910111213141516171819202122232425-- (1)SELECT\tstudent.sid,\tstudent.sname,\tSUM( score.number ) AS total,\tcount(student.class_id) as &#x27;选课数&#x27;FROM\tstudent,\tscore WHERE\tscore.student_id = student.sid GROUP BY\tstudent.sid,\tstudent.sname;-- (2)SELECT\tstudent_id,\tstudent.sname,\tSUM( number ) AS &#x27;总分&#x27;,\tCOUNT( 1 ) AS &#x27;选课数量&#x27; FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid GROUP BY\tstudent_id 13.查询各科被选修的学生数。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728-- 核心SELECT\tcourse_id,\tCOUNT( 1 ) FROM\tscore GROUP BY\tcourse_id;-- (1)\tSELECT\tcourse.cname,\tcount( score.sid ) AS `人数` FROM\tscore,\tcourse WHERE\tscore.course_id = course.cid GROUP BY\tscore.course_id;-- (2)SELECT\tcname,\tcount( 1 ) AS `人数` FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid GROUP BY\tcourse_id 14.查询各科成绩的总分、最高分、最低分，显示：课程ID、课程名称、总分、最高分、最低分。 警告此处为个人本题答案仅供参考，非唯一答案123456789101112131415161718192021222324252627282930313233-- (1)SELECT\tcourse_id AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tSUM( number ) AS &#x27;总分&#x27;,\tMAX( number ) AS &#x27;最高分&#x27;,\tMIN( number ) AS &#x27;最低分&#x27;,\tAVG( number ) AS &#x27;平均分&#x27; FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid GROUP BY\tcourse_id ORDER BY\tAVG( number ) DESC;-- (2)SELECT\tcourse.cid AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tsum( score.number ) AS &#x27;总分&#x27;,\tmax( score.number ) AS &#x27;最高分&#x27;,\tmin( score.number ) AS &#x27;最低分&#x27;,\tavg( score.number ) AS &#x27;平均分&#x27;,\tcount( score.sid ) AS `人数` FROM\tscore,\tcourse WHERE\tscore.course_id = course.cid GROUP BY\tscore.course_id ORDER BY\tavg( score.number ) DESC; 15.查询各科成绩的平均分，显示：课程ID、课程名称、平均分。 警告此处为个人本题答案仅供参考，非唯一答案123456789101112131415161718192021222324252627282930313233-- (1)SELECT\tcourse_id AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tSUM( number ) AS &#x27;总分&#x27;,\tMAX( number ) AS &#x27;最高分&#x27;,\tMIN( number ) AS &#x27;最低分&#x27;,\tAVG( number ) AS &#x27;平均分&#x27; FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid GROUP BY\tcourse_id ORDER BY\tAVG( number ) DESC;-- (2)SELECT\tcourse.cid AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tsum( score.number ) AS &#x27;总分&#x27;,\tmax( score.number ) AS &#x27;最高分&#x27;,\tmin( score.number ) AS &#x27;最低分&#x27;,\tavg( score.number ) AS &#x27;平均分&#x27;,\tcount( score.sid ) AS `人数` FROM\tscore,\tcourse WHERE\tscore.course_id = course.cid GROUP BY\tscore.course_id ORDER BY\tavg( score.number ) DESC; 16.查询各科成绩的平均分，显示：课程ID、课程名称、平均分（按平均分从大到小排序）。 警告此处为个人本题答案仅供参考，非唯一答案123456789101112131415161718192021222324252627282930313233-- (1)SELECT\tcourse_id AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tSUM( number ) AS &#x27;总分&#x27;,\tMAX( number ) AS &#x27;最高分&#x27;,\tMIN( number ) AS &#x27;最低分&#x27;,\tAVG( number ) AS &#x27;平均分&#x27; FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid GROUP BY\tcourse_id ORDER BY\tAVG( number ) DESC;-- (2)SELECT\tcourse.cid AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tsum( score.number ) AS &#x27;总分&#x27;,\tmax( score.number ) AS &#x27;最高分&#x27;,\tmin( score.number ) AS &#x27;最低分&#x27;,\tavg( score.number ) AS &#x27;平均分&#x27;,\tcount( score.sid ) AS `人数` FROM\tscore,\tcourse WHERE\tscore.course_id = course.cid GROUP BY\tscore.course_id ORDER BY\tavg( score.number ) DESC; 注14-16题写的都是满足所有的需求，即句子一样。看题目删去 17.查询各科成绩的平均分和及格率，显示：课程ID、课程名称、平均分、及格率。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728-- (1)SELECT\tcourse.cid AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tsum( score.number ) AS &#x27;总分&#x27;,\tmax( score.number ) AS &#x27;最高分&#x27;,\tmin( score.number ) AS &#x27;最低分&#x27;,\tavg( score.number ) AS &#x27;平均分&#x27;,\tcount( score.sid ) AS `人数`,\tcount( CASE WHEN score.number &gt;= 60 THEN 1 END ) / count( score.sid )* 100 AS &#x27;及格率(%)&#x27; FROM\tscore,\tcourse WHERE\tscore.course_id = course.cid GROUP BY\tscore.course_id;-- (2)SELECT\tcourse_id AS &#x27;课程ID&#x27;,\tcourse.cname AS &#x27;课程名称&#x27;,\tAVG( number ) AS &#x27;平均分&#x27;,\tSUM( CASE WHEN score.number &gt;= 60 THEN 1 ELSE 0 END ) / COUNT( 1 ) * 100 AS &#x27;及格率(%)&#x27; FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid GROUP BY\tcourse_id; 18.查询平均成绩大于60的所有学生的学号、平均成绩。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425-- (1)SELECT\tstudent.sid AS &#x27;学生ID&#x27;,\tavg( score.number ) AS &#x27;平均成绩&#x27; FROM\tstudent,\tscore,\tcourse WHERE\tstudent.sid = score.student_id AND course.cid = score.course_id GROUP BY\tscore.student_id HAVING\tavg( score.number )&gt; 60;-- (2)SELECT\tstudent_id AS &#x27;学生ID&#x27;,\tAVG( number ) &#x27;平均成绩&#x27; FROM\tscore GROUP BY\tstudent_id HAVING\tAVG( number )&gt; 60 19.查询平均成绩大于85的所有学生的学号、平均成绩、姓名。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132333435363738-- (核心)SELECT\tstudent_id,\tAVG( number ) FROM\tscore GROUP BY\tstudent_id HAVING\tAVG( number ) &gt; 85;-- (1)SELECT\tstudent.sid,\tstudent.sname,\tavg( score.number ) AS &#x27;平均成绩&#x27; FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid GROUP BY\tstudent_id HAVING\tAVG( number ) &gt; 85;-- (2)SELECT\tstudent.sid,\tstudent.sname,\tavg( score.number ) AS &#x27;平均成绩&#x27; FROM\tstudent,\tscore,\tcourse WHERE\tstudent.sid = score.student_id AND course.cid = score.course_id GROUP BY\tscore.student_id HAVING\tavg( score.number )&gt; 85; 20.查询“三年二班”每个学生的学号、姓名、总成绩、平均成绩。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728-- (1)SELECT\tstudent.sid,\tstudent.sname,\tsum( score.number ) AS &#x27;总成绩&#x27;,\tavg( score.number ) AS &#x27;平均&#x27; FROM\tclass\tJOIN student ON class.cid = student.class_id\tJOIN score ON student.sid = score.student_id WHERE\tclass.caption = &#x27;三年二班&#x27; GROUP BY\tscore.student_id;-- (2)SELECT\tstudent_id,\tsname,\tsum( number ) AS &#x27;总成绩&#x27;,\tavg( number ) AS &#x27;平均&#x27; FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid\tLEFT JOIN class ON class.cid = student.class_id WHERE\tclass.caption = &#x27;三年二班&#x27; GROUP BY\tscore.student_id; 21-3021.查询各个班级的班级名称、总成绩、平均成绩、及格率（按平均成绩从大到小排序） 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132-- (1)SELECT\tclass.caption AS &#x27;班级名称&#x27;,\tsum( score.number ) AS &#x27;总成绩&#x27;,\tavg( score.number ) AS &#x27;平均成绩&#x27;,\tcount( CASE WHEN score.number &gt;= 60 THEN 1 END )/ count( score.sid )* 100 AS &#x27;及格率(%)&#x27; FROM\tstudent,\tscore,\tclass WHERE\tstudent.sid = score.student_id AND student.class_id = class.cid GROUP BY\tclass.caption ORDER BY\tavg( score.number ) DESC;\t-- (2)SELECT\tclass.caption AS &#x27;班级名称&#x27;,\tsum( number ) AS &#x27;总成绩&#x27;,\tavg( number ) AS &#x27;平均成绩&#x27;,\tSUM( CASE WHEN score.number &gt;= 60 THEN 1 ELSE 0 END )/ count( 1 )* 100 AS &#x27;及格率(%)&#x27; FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid\tLEFT JOIN class ON class.cid = student.class_id GROUP BY\tclass.caption ORDER BY\tavg( number ) DESC; 22.查询学过“朱元璋”老师课的同学的学号、姓名。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425-- (1)SELECT\tstudent.sid,\tstudent.sname FROM\tteacher,\tstudent,\tscore,\tcourse WHERE\tscore.course_id = course.cid AND teacher.tid = course.teacher_id AND student.sid = score.student_id AND teacher.tname = &#x27;朱元璋&#x27;;-- (2)SELECT\tstudent.sid,\tstudent.sname FROM\tscore LEFT JOIN student on score.student_id=student.sid\tLEFT JOIN course on score.course_id=course.cid\tLEFT JOIN teacher on course.teacher_id=teacher.tidWHERE\tteacher.tname = &#x27;朱元璋&#x27;; 23.查询没学过“朱元璋”老师课的同学的学号、姓名。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031-- 有选课的select student.sid,student.sname from teacher,student,score,course where score.course_id=course.cid and teacher.tid = course.teacher_id and student.sid=score.student_id and teacher.tname !=&#x27;朱元璋&#x27; GROUP BY student.sid-- 包含无选课的UNION select student.sid ,student.sname from student where student.sid not in (SELECT score.student_id from score) ORDER BY sid-- 好看一点(就是拼凑在一起)SELECT\tstudent.sid,\tstudent.sname FROM\tteacher,\tstudent,\tscore,\tcourse WHERE\tscore.course_id = course.cid AND teacher.tid = course.teacher_id AND student.sid = score.student_id AND teacher.tname != &#x27;朱元璋&#x27; GROUP BY\tstudent.sid UNIONSELECT\tstudent.sid,\tstudent.sname FROM\tstudent WHERE\tstudent.sid NOT IN ( SELECT score.student_id FROM score ) ORDER BY\tsid; 24.查询选修“朱棣”老师所授课程的学生中，成绩最高的学生姓名及其成绩（不考虑并列）。 警告此处为个人本题答案仅供参考，非唯一答案123456789101112131415161718192021222324252627282930313233343536373839404142434445464748-- (1)SELECT\tstudent.sid,\tstudent.sname,\tscore.number FROM\tteacher\tJOIN course ON teacher.tid = course.teacher_id\tJOIN score ON score.course_id = course.cid\tJOIN student ON student.sid = score.student_id WHERE\tteacher.tname = &#x27;朱棣&#x27; ORDER BY\tnumber DESC LIMIT 1;-- (2)SELECT\tstudent.sid,\tstudent.sname,\tscore.number FROM\tteacher,\tstudent,\tscore,\tcourse WHERE\tscore.course_id = course.cid AND teacher.tid = course.teacher_id AND student.sid = score.student_id AND teacher.tname = &#x27;朱棣&#x27; ORDER BY\tscore.number DESC LIMIT 1;-- (3)SELECT\tstudent.sid,\tstudent.sname,\tscore.number FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN teacher ON course.teacher_id = teacher.tid WHERE\tteacher.tname = &#x27;朱棣&#x27; ORDER BY\tscore.number DESC LIMIT 1; 25.查询选修“朱棣”老师所授课程的学生中，成绩最高的学生姓名及其成绩（考虑并列） 警告此处为个人本题答案仅供参考，非唯一答案123456789101112131415161718192021222324252627282930313233343536-- (1)SELECT student.sid, student.sname, score.number FROM teacher, student, score, course WHERE score.course_id = course.cid AND teacher.tid = course.teacher_id AND student.sid = score.student_id AND teacher.tname = &#x27;朱棣&#x27; AND score.number = ( SELECT MAX(score.number) -- 满足等于最高分就考虑了并列的情况 FROM teacher, student, score, course WHERE score.course_id = course.cid AND teacher.tid = course.teacher_id AND student.sid = score.student_id AND teacher.tname = &#x27;朱棣&#x27; ); -- (2) SELECT\tstudent.sid,student.sname ,score.numberFROM\tscore\tLEFT JOIN student ON score.student_id = student.sid\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN teacher ON course.teacher_id = teacher.tid WHERE\tteacher.tname = &#x27;朱棣&#x27; AND score.number =(\tSELECT max( number ) FROM score LEFT JOIN course ON score.course_id = course.cid LEFT JOIN teacher ON course.teacher_id = teacher.tid WHERE\tteacher.tname = &#x27;朱棣&#x27; ) 26.查询只选修了一门课程的全部学生的学号、姓名 警告此处为个人本题答案仅供参考，非唯一答案1234567891011SELECT\tstudent.sname,\tstudent.sid,\tcount( score.sid ) AS &#x27;选修课程数量&#x27; FROM\tstudent\tJOIN score ON student.sid = score.student_id GROUP BY\tscore.student_id HAVING\tcount( score.sid )= 1; 27.查询至少选修两门课程的学生学号、学生姓名、选修课程数量。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011SELECT\tstudent.sname,\tstudent.sid,\tcount( score.sid ) AS &#x27;选修课程数量&#x27; FROM\tstudent\tJOIN score ON student.sid = score.student_id GROUP BY\tscore.student_id HAVING\tcount( score.sid )&gt; 1; 28.查询两门及以上不及格的同学的学号、学生姓名、选修课程数量。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011SELECT\tstudent.sid,\tstudent.sname,\tcount( score.sid ) AS &#x27;选修课程数量&#x27; FROM\tstudent\tJOIN score ON student.sid = score.student_id GROUP BY\tscore.student_id HAVING\tcount( score.number &lt;= 60 ) &gt;1 29.查询选修了所有课程的学生的学号、姓名。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516SELECT\tstudent.sname,\tstudent.sid,\tcount( score.sid ) AS &#x27;选课数量&#x27; FROM\tstudent\tJOIN score ON student.sid = score.student_id GROUP BY\tscore.student_id HAVING\tcount( score.sid ) =(\tSELECT count( course.cid ) FROM\tcourse ); 30.查询未选修所有课程的学生的学号、姓名。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132333435363738394041-- (1)-- 选修了课程 连上没有选修课程的学生SELECT\tstudent.sname,\tstudent.sid FROM\tstudent\tJOIN score ON student.sid = score.student_id GROUP BY\tscore.student_id HAVING\tcount( score.sid ) !=(\tSELECT count( course.cid ) FROM course ) UNIONSELECT\tstudent.sname,\tstudent.sid FROM\tstudent WHERE\tstudent.sid IN ( SELECT score.student_id FROM score );\t-- UNION 会去重\t-- (2)SELECT\tstudent.sid,\tstudent.sname FROM\tscore\tLEFT JOIN student ON score.student_id = student.sid GROUP BY\tstudent_id HAVING\tCOUNT( 1 ) !=(\tSELECT COUNT( 1 ) FROM\tcourse) 31-4031.查询所有学生都选修了的课程的课程号、课程名。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132333435-- 可能有些没有选的，排除SELECT\tcourse.cid,\tcourse.cname FROM\tcourse\tJOIN score ON course.cid = score.course_id GROUP BY\tscore.course_id HAVING\tcount( score.sid ) = ( SELECT COUNT( 1 ) FROM ( SELECT student_id FROM score GROUP BY student_id ) AS subquery );-- having的另一边对应着选了选修课的人数-- 范围为全部，不排除没选课的-- (1)SELECT\tcourse.cid,\tcourse.cname FROM\tcourse\tJOIN score ON course.cid = score.course_id GROUP BY\tscore.course_id HAVING\tcount( score.sid ) = ( SELECT count( sid ) FROM student );-- (2)SELECT\tcourse.cid,\tcourse.cname FROM\tscore\tleft JOIN course ON course.cid = score.course_id GROUP BY\tcourse_idHAVING\tcount(1) = ( SELECT count( 1 ) FROM student ); 32.查询选修“生物°和“物理”课程的所有学生学号、姓名。 警告此处为个人本题答案仅供参考，非唯一答案123456789101112SELECT\tstudent.sid,\tstudent.sname,\tcourse.cname FROM\tcourse\tJOIN score ON course.cid = score.course_id\tJOIN student ON score.student_id = student.sid WHERE\tcourse.cname IN ( &#x27;生物&#x27;, &#x27;物理&#x27; ) ORDER BY\tcourse.cname 33.查询至少有一们课与学号为“1的学生所选的裸程相同的其他学生学号和姓名 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031-- (1)SELECT\tstudent.sid,\tstudent.sname,\tcount( score.course_id ) &#x27;与学号为1的同学相同的选课数量&#x27; FROM\tstudent\tJOIN score ON student.sid = score.student_id WHERE\tscore.course_id IN ( SELECT course_id FROM score WHERE student_id = 1 ) GROUP BY\tscore.student_id HAVING\tscore.student_id != 1;\t-- (2)\tSELECT\tstudent.sid,\tstudent.sname,\tcount( score.course_id ) &#x27;与学号为1的同学相同的选课数量&#x27; FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN student ON score.student_id = student.sid WHERE\tscore.course_id IN ( SELECT course_id FROM score WHERE student_id = 1 ) AND score.student_id != 1 GROUP BY\tstudent_id HAVING\tcount( 1 )&gt;= 1; 34.查询与学号为“2”的同学选修的课程完全相同的具地学生学号和姓名。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031323334353637-- (1)SELECT\tscore.student_id,\tstudent.sname FROM\tscore\tJOIN student ON score.student_id = student.sid WHERE\tcourse_id IN ( SELECT course_id FROM score WHERE student_id = 2 ) GROUP BY\tstudent_id HAVING\tCOUNT( DISTINCT course_id ) = ( SELECT COUNT( DISTINCT course_id ) FROM score WHERE student_id = 2 ) AND student_id != 2;\t-- (2)\tSELECT\tstudent.sid,\tstudent.sname FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid\tLEFT JOIN student ON score.student_id = student.sid WHERE\tscore.course_id IN ( SELECT course_id FROM score WHERE student_id = 2 ) AND score.student_id != 2 GROUP BY\tstudent_id HAVING\tCOUNT( 1 )=(\tSELECT COUNT( 1 ) FROM score WHERE\tstudent_id = 2 ); 35.查询生物”课程比”物理”课程成绩高的所有学生的学号。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031323334353637383940414243-- 没有选择目标课程不做考虑SELECT\ts1.student_id FROM\tscore s1 WHERE\t(\tSELECT s2.number FROM score s2 WHERE s1.student_id = s2.student_id AND s1.course_id = 3 AND s2.course_id = 1 AND s2.number &gt; s1.number );-- 只满足一个选课条件，但是给另一个假定值0或-1-- (1)SELECT\tstudent_id,\tmax( CASE cname WHEN &#x27;生物&#x27; THEN number ELSE 0 END ) AS sw,\tmax( CASE cname WHEN &#x27;物理&#x27; THEN number ELSE 0 END ) AS wl FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid WHERE\tcname IN ( &#x27;生物&#x27;, &#x27;物理&#x27; ) GROUP BY\tstudent_id HAVING\tsw &gt; wl;-- (2)\tSELECT\t*,\tCASE cname WHEN &#x27;生物&#x27; THEN number ELSE -1 END sw,\tCASE cname WHEN &#x27;物理&#x27; THEN number ELSE -1 END wl FROM\tscore\tLEFT JOIN course ON score.course_id = course.cid WHERE\tcname IN ( &#x27;生物&#x27;, &#x27;物理&#x27; ) ; 36.*查询每门课程成绩最好的前3名（不专虑成绩并列情况）。 警告此处为个人本题答案仅供参考，非唯一答案1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192-- (1) 前三信息(并列也取前三个)WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY course_id ORDER BY number DESC) rn FROM score)SELECT course_id, student_id, numberFROM cteWHERE rn &lt;= 3ORDER BY course_id, rn;-- (2)前三成绩SELECT\tcid,\tcname,\t(\tSELECT student.sname FROM score LEFT JOIN student ON student.sid = score.student_id WHERE course_id = course.cid ORDER BY number DESC LIMIT 1 OFFSET 0 ) AS &#x27;第一名&#x27;,(\tSELECT student.sname FROM score LEFT JOIN student ON student.sid = score.student_id WHERE course_id = course.cid ORDER BY number DESC LIMIT 1 OFFSET 1 ) AS &#x27;第二名&#x27;,(\tSELECT student.sname FROM score LEFT JOIN student ON student.sid = score.student_id WHERE course_id = course.cid ORDER BY number DESC LIMIT 1 OFFSET 2 ) AS &#x27;第三名&#x27; FROM\tcourse;-- (3)前三分数SELECT\tcid,\tcname,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 0 ) AS &#x27;最高分&#x27;,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 1 ) AS &#x27;第二高分&#x27;,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 2 ) AS &#x27;第三高分&#x27; FROM\tcourse; 37.*查询每门课程成绩最好的前3名（考虑成绩并列情况）。 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485SELECT s1.course_id, s1.student_id, s1.numberFROM score s1WHERE ( SELECT COUNT( s2.number) FROM score s2 WHERE s2.course_id = s1.course_id AND s2.number &gt; s1.number) &lt; 3ORDER BY s1.course_id, s1.number DESC;-- 只显示没课前三，不显示学生信息\tSELECT\tcid,\tcname,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 0 ) AS &#x27;最高分&#x27;,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 1 ) AS &#x27;第二高分&#x27;,(\tSELECT number FROM score WHERE course_id = course.cid GROUP BY number ORDER BY number DESC LIMIT 1 OFFSET 2 ) AS &#x27;第三高分&#x27; FROM\tcourse;\t-- 综合SELECT\tscore.*,\t( SELECT MAX( number ) FROM score WHERE course_id = score.course_id ) AS &#x27;最高分&#x27;,\t(\tSELECT MAX( number ) FROM score WHERE course_id = score.course_id AND number &lt; ( SELECT MAX( number ) FROM score WHERE course_id = score.course_id ) ) AS &#x27;第二高分&#x27;,\t(\tSELECT MAX( number ) FROM score WHERE course_id = score.course_id AND number &lt; ( SELECT MAX( number ) FROM score WHERE course_id = score.course_id ) AND number &lt; ( SELECT MAX( number ) FROM score WHERE course_id = score.course_id AND number &lt; ( SELECT MAX( number ) FROM score WHERE course_id = score.course_id ) ) ) AS &#x27;第三高分&#x27; FROM\tscore; 38.创建一个表sc,然后将score表中所有数据插入到sc表中。 警告此处为个人本题答案仅供参考，非唯一答案(step1)12345678CREATE TABLE sc( sid int not null PRIMARY key auto_increment , student_id int not null , course_id int not null, number int not null, CONSTRAINT `fk_sc_course` FOREIGN KEY (`course_id`) REFERENCES `course` (`cid`), CONSTRAINT `fk_sc_student` FOREIGN KEY (`student_id`) REFERENCES `student` (`sid`)) DEFAULT CHARSET=utf8; 警告此处为个人本题答案仅供参考，非唯一答案(step2)123insert into sc select * from score;insert into sc(sid,student_id,course_id,number) SELECT sid,student_id,course_id,number FROM score; 39.向score表中插入一些记录，这些记录要求符合以下条件: - 学生ID为：没上过课程D为“2”课程的学生的学号： - 课程ID为：2 - 成绩为：80 警告此处为个人本题答案仅供参考，非唯一答案(step1)1SELECT student.sid,2,80 FROM student JOIN score on student.sid=score.student_id GROUP BY score.student_id HAVING MAX(CASE WHEN score.course_id = 2 THEN score.number END) IS NULL 这里使用了MAX函数和CASE表达式来判断学生是否选了课程2。如果学生选了课程2，那么MAX函数会返回该课程的最高分数；如果学生没有选课程2，那么MAX函数会返回NULL。通过判断MAX函数的返回值是否为NULL，就可以筛选出没有选课程2的学生了。 警告此处为个人本题答案仅供参考，非唯一答案(step2)1insert into sc (student_id,course_id,number) SELECT student.sid,2,80 FROM student JOIN score on student.sid=score.student_id GROUP BY score.student_id HAVING MAX(CASE WHEN score.course_id = 2 THEN score.number END) IS NULL 40.向score表中插人些记录，这些记录要求符合以下条件：icon:hashtag - 学生ID为：学过课程ID为“5”课程的学生的学号。 - 课程ID为：2。(我知道根据我的数据这个同学已经学历这个课程) - 成绩为：课程ID为3的最高分。 警告此处为个人本题答案仅供参考，非唯一答案1234INSERT INTO score (student_id, course_id, number)SELECT student_id, 2, (SELECT MAX(number) FROM score)FROM scoreWHERE course_id = 5; 总结练习题做了挺久的，至于多久呢？我也不好意思说，以免你说我太菜了（扶额 好吧，最近可能要开启爆更模式咯。喜欢我的文章麻烦点个有用或者赞同或者收藏之类的呗(^_^)。有什么问题和疑问可以在评论区留盐 同样在知乎发布: MySQL必备语句和授权🧠&amp;四十道练习题📜(含答案🕶) - 知乎 (zhihu.com)","tags":["MySQL"],"categories":["MySQL"]},{"title":"Django呐！🤣 图片🖼（含GIF)上传和剪切✂","path":"/p/django-cropper/","content":"Python 实现图片剪切Python对图片处理的库是非常丰富的，所以有很多库能实现这一目标的方法如Pillow,OpenCV,moviepy等等，而这里给的gif处理方法主要使用的是Pillow,moviepy库的 安装Pillow,moviepy 终端上12pip install Pillowpip install moviepy 对于图片的剪切主要是通过坐标进行判断，需要提供一个矩形坐标，即四个坐标点进行定位，然后对原图进行剪切处理。 那么其他废话不多说，直接上代码。(学别人讲的话，直接上代码确实很爽) 除GIF的图片文件处理123456789U_x = 144.73429951690818 # x轴坐标U_y = 76.13526570048306 # y轴坐标U_width = 640.0000000000001 # 剪切大小U_height = 640.0000000000001u_rotate = 90 # 旋转角度img = Image.open(&#x27;input.img&#x27;) crop_im = img.crop((U_x, U_y, U_x + U_width, U_y + U_height)).resize((400, 400),Image.LANCZOS).rotate(u_rotate) # 注意这里的Image.LANCZOS，如果你的Pillow是10.0直接CV那么啥事情，但是其他的版本可能是Image.ANTIALIAS如9.5 备注：LANCZOS实际上和ANTIALIAS指向的是同一种图像插值模式算法 GIF图片文件处理#用Pillow处理 12345678910111213141516171819202122232425262728293031# -*- coding: utf-8 -*-# @Time : 2023/8/3 11:25# @Author : BXZDYG# @Software: PyCharm# @File : Pillow_crop_gif.pyimport timefrom PIL import Image, ImageSequenceif __name__ == &#x27;__main__&#x27;: first_time = time.time() # 时间戳检验剪切速度 start=time.perf_counter() # 计算机时间检验剪切速度 U_x = 144.73429951690818 # x轴坐标 U_y = 76.13526570048306 # y轴坐标 U_width = 640.0000000000001 # 剪切大小 U_height = 640.0000000000001 u_rotate = 90 # 旋转角度 frames = [] with Image.open(&#x27;input.gif&#x27;) as im: idx = 0 for frame in ImageSequence.Iterator(im): frame = frame.crop((U_x, U_y, U_x + U_width, U_y + U_height)).resize((400, 400)).rotate(u_rotate) frame.info[&#x27;duration&#x27;] = im.info[&#x27;duration&#x27;] frames.append(frame) idx += 1 frames[0].save(&#x27;out.gif&#x27;, save_all=True, append_images=frames[1:], loop=0, duration=im.info[&#x27;duration&#x27;], quality=80) print(&#x27;时间戳说——总共用时:&#x27;,time.time()-first_time,&#x27;秒&#x27;) # 总共用时: 4-5 秒 print(&#x27;计算机说——总共用时:&#x27;,time.perf_counter()-start,&#x27;秒&#x27;) # 总共用时: 4-5 秒 #用moviepy进行图片剪切 备注：如果你要求对分辨率的在处理的话，那么需要Pillow的版本为9.5，10.0和其底层的resize中设置的图像插值模式冲突，是Image.ANTIALIAS，手动打上去还改不了，而且速度极慢，是用Pillow和结合Pillow库的两倍。而且在movie官方文档也不建议在大型框架和web上使用moviepy.editor子模块 moviepy-cn 文档http://doc.moviepy.com.cn/index.html#document-2_MoviePy入门/index 1234567891011121314151617181920212223242526272829303132# @Time : 2023/8/3 11:26# @Author : BXZDYG# @Software: PyCharmfrom moviepy.editor import *import timeif __name__ == &#x27;__main__&#x27;: first_time = time.time() # 时间戳检验剪切速度 start = time.perf_counter() # CPU时间检验剪切速度 x = 144.73429951690818 y = 76.13526570048306 width = 640.0000000000001 height = 640.0000000000001 t_rotate = 90 gif = VideoFileClip(&#x27;head_cap.gif&#x27;) # 获取帧数 nframes = gif.reader.nframes # 设置每帧duration durations = [0.1] * nframes images = [gif.get_frame(t) for t in range(nframes)] clip = ImageSequenceClip(images, durations=durations) rotated = clip.crop(x1=x, y1=y, x2=x + width, y2=y + height).resize((400, 400)).rotate(t_rotate) # resized = rotated.resize((400, 400)) # 调整分辨率 # resized.write_gif(&#x27;23.gif&#x27;, fps=20) rotated.write_gif(&#x27;23.gif&#x27;, fps=20) print(&#x27;时间戳说——总共用时:&#x27;, time.time() - first_time, &#x27;秒&#x27;) # 总共用时: 10+ 秒 print(&#x27;CPU说——总共用时:&#x27;, time.perf_counter() - start, &#x27;秒&#x27;) # 总共用时: 10+ 秒 #用Pillow对每一帧图片进行剪切，moviepy生成gif文件 123456789101112131415161718192021222324252627282930313233# -*- coding: utf-8 -*-# @Time : 2023/8/3 11:26# @Author : BXZDYG# @Software: PyCharm# @File : Movie_Pillow_crop_gif.pyimport timeimport numpy as npfrom PIL import Imagefrom moviepy.editor import VideoFileClipdef pillow_movie_crop(img): &#x27;&#x27;&#x27; :param img: :return: 存在缺点帧数丢失，图片变大 &#x27;&#x27;&#x27; im = Image.fromarray(img) cropped = im.crop((x, y, x+width, y+height)).resize((400,400)).rotate(t_rotate) return np.array(cropped)if __name__ == &#x27;__main__&#x27;: first_time=time.time() x = 144.73429951690818 y = 76.13526570048306 width = 640.0000000000001 height = 640.0000000000001 t_rotate = 90 clip = VideoFileClip(&quot;head_cap.gif&quot;, has_mask=False) # 在加载GIF时指定保留所有帧 cropped_clip = clip.fl_image(pillow_movie_crop) cropped_clip.write_gif(&quot;21.gif&quot;, fuzz=10, opt=&#x27;nq&#x27;) # 在写出GIF时指定优化参数,减少质量损 print(&#x27;总共用时:&#x27;,time.time()-first_time,&#x27;秒&#x27;) # 4.687000274658203 秒 基本上4-5s左右 所以其实使用Pillow库是一个优选 Django 文件上传启用 mediasettings.py123# 在末尾加入MEDIA_ROOT = os.path.join(BASE_DIR, &#x27;media&#x27;)MEDIA_URL = &#x27;/media/&#x27; utils.py 自主封装的自定义文件字段,对上传文件进行限制12345678910111213141516171819202122232425262728293031class RestrictedFileField(FileField): &quot;&quot;&quot; max_upload_size: 2.5MB - 2621440 5MB - 5242880 10MB - 10485760 20MB - 20971520 50MB - 5242880 100MB 104857600 250MB - 214958080 500MB - 429916160 &quot;&quot;&quot; def __init__(self, *args, **kwargs): self.content_types = kwargs.pop(&quot;content_types&quot;, []) self.max_upload_size = kwargs.pop(&quot;max_upload_size&quot;, []) super().__init__(*args, **kwargs) def clean(self, *args, **kwargs): data = super().clean(*args, **kwargs) # clean()方法来自于FileField的父类Field, 用于验证 file = data.file try: content_type = file.content_type # 自定义验证 if content_type in self.content_types: if file.size &gt; self.max_upload_size: raise forms.ValidationError(&#x27;文件大小要求为&#123;&#125;. 当前文件大小为 &#123;&#125;&#x27;.format(filesizeformat(self.max_upload_size), filesizeformat(file.size))) else: raise forms.ValidationError(&#x27;当前文件格式不被运行,仅支持&#123;&#125;.&#x27;.format(self.content_types)) except AttributeError: pass return data models.py12345678from utils import RestrictedFileFieldclass UserInfo(models.Model)\tavatar = RestrictedFileField(verbose_name=u&#x27;头像&#x27;, max_length=50, default=&#x27;avatar/用户.png&#x27;, upload_to=&#x27;avatar/&#x27;, content_types=[&#x27;image/jpeg&#x27;, &#x27;image/png&#x27;, &#x27;image/gif&#x27;, &#x27;image/bmp&#x27;, &#x27;image/tiff&#x27;],max_upload_size=5242880)\tid = models.BigAutoField(verbose_name=&#x27;UID&#x27;, primary_key=True)…… urls.py123456789from django.urls import path, include, re_pathfrom django.views.static import servefrom django.conf import settingsfrom . import viewsurlpatterns = [ # 上传文件位置 re_path(r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;, serve, &#123;&#x27;document_root&#x27;: settings.MEDIA_ROOT&#125;, name=&#x27;media&#x27;), …… views.py12345678910111213141516171819202122from django import formsfrom app.error import errorResponseclass UserInfoForm(forms.ModelForm): # avatar = forms.FileField(label=&#x27;头像&#x27;) class Meta: model = UserInfo fields = &#x27;__all__&#x27;def edit_info(request): uid = request.session[&#x27;uid&#x27;] # 用户登录存储在session中的信息 userinfo = UserInfo.objects.filter(id=uid).get() if request.method == &#x27;GET&#x27;: form = UserInfoForm(instance=userinfo) return render(request, &#x27;space_edit_info.html&#x27;, &#123; &#x27;userinfo&#x27;: userinfo, &#x27;form&#x27;: form, &#x27;title&#x27;: &#x27;个人中心-编辑个人信息&#x27; &#125;) form = UserInfoForm(instance=userinfo, data=request.POST) if form.is_valid(): form.save() return redirect(&#x27;/space/edit_info/&#x27;) return errorResponse(request, errMsg=form[&#x27;avatar&#x27;].errors[0] ) 此处的errorResponse是自己封装的处理错误页函数,这样可以在前端显示自定义头像组件的错误 1234567def errorResponse(request, errMsg): &#x27;&#x27;&#x27; :param request: :param errMsg:返回错误信息到前端页面 :return: &#x27;&#x27;&#x27; return render(request, &#x27;error.html&#x27;, &#123;&#x27;errMsg&#x27;: errMsg&#125;) Django 图片上传剪切综合案例实现前端获取所需的坐标数据使用基于JQuery的cropper和Bootstrap,可以更方便的实现获取用户对图片剪切的操作(缩放，旋转等)后的数据和坐标。 jQuery cropper是一款使用简单且功能强大的图片剪裁jquery插件。该插件支持图片放大，缩小，旋转，裁剪和预览等功能。 素材来源17素材，不用登录另存为网页就行。 html5头像图片上传截图保存修改代码(17sucai.com)https://www.17sucai.com/pins/27291.html 注意演示里的最右上角x最好点一下，因为我们要的里面的&lt;iframe&gt;标签的html文档，然后保存下来的就是我们需要的素材，然后自己处理一下。文件主要如下 sitelogo.js是利用cropper获取坐标等数据,然后携带数据向处理的url放送请求 目标的url又写在了签单的html文件里 from的action,修改这个即可。 这里我使用的是Django的url反向解析,更便利一些，有着不少好处。 而在sitelogo.js中，主要要去关注两部分 这部分是序列化坐标和旋转角度数据，这里的x,y是左上的坐标，根据height和width可以计算出选中的矩形整个坐标。 发送ajax请求 前端的文件主要知道这些就可以了，自己不喜欢这些样式，想再多添加些功能可以自己改。 而前端重中之重就是记得Django有一个csrf安全验证机制，如果没有在中间件关闭它，就需要在前端添提交表单添加一个&#123;% csrf_token%&#125;或者在对应函数前面标记注释。再或者直接根据上面这张ajax提交代码的图片，在你自己写的js代码中添加在headers中. @csrf_exempt 123from django.views.decorators.csrf import csrf_exempt#在对应函数前面标记注释@csrf_exempt 后端根据坐标对图片进行剪切#models.py 继承上面 urls.py继承上面且扩充12path(&#x27;upload_avatar/&#x27;, views.upload_avatar, name=&#x27;upload_avatar&#x27;),path(&#x27;ajax_avatar_upload/&#x27;, views.ajax_avatar_upload, name=&#x27;ajax_avatar_upload&#x27;), views.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109import reimport osimport jsonimport uuidfrom django.shortcuts import render, redirect, get_object_or_404from django.urls import reversefrom django.views.decorators.csrf import csrf_exemptfrom django import formsfrom PIL import Image, ImageSequencefrom .models import UserInfo# 这里使用的是Form而不是ModelForm,你可以直接引用上面写的UserInfo,用其自定义的头像字段，当然这里只是为了讲解和展示，你自己可以试试我说的class AvatarUploadForm(forms.Form): avatar_file = forms.ImageField() def upload_avatar(request):\tuid = request.session[&#x27;uid&#x27;] userinfo = UserInfo.objects.filter(id=uid).get() return render(request, &#x27;Document.html&#x27;, &#123; &#x27;userinfo&#x27;: userinfo &#125;)def ajax_avatar_upload(request):\tuid = request.session[&#x27;uid&#x27;] userinfo = get_object_or_404(UserInfo, userName=username) if request.method == &quot;POST&quot;: form = AvatarUploadForm(request.POST, request.FILES) if form.is_valid(): img = request.FILES[&#x27;avatar_file&#x27;] # 获取上传图片 data = request.POST[&#x27;avatar_data&#x27;] # 获取ajax返回图片坐标 # print(img.size) # 图片大小 if img.size &gt; 5242880: # 相当于if img.size / 1024 / 1024 &gt; 5: return JsonResponse(&#123;&quot;message&quot;: &quot;上传图片大小应小于5MB, 请重新上传。&quot;, &#125;) current_avatar = userinfo.avatar cropped_avatar = crop_image(current_avatar, img, data, userinfo.id) userinfo.avatar = cropped_avatar # 将图片路径修改到当前会员数据库 userinfo.save() # 向前台返回一个json，result值是图片路径 data = &#123;&quot;result&quot;: userinfo.avatar.url, &#125; return JsonResponse(data) else: return JsonResponse(&#123;&quot;message&quot;: &quot;请重新上传。只能上传图片&quot;&#125;) return HttpResponseRedirect(reverse(&#x27;upload_avatar&#x27;))def crop_image(current_avatar, file, data, uid): &#x27;&#x27;&#x27; :param current_avatar: 当前头像 :param file: 上传文件 :param data: 坐标 :param uid: 用户id :return: 保存的图片路径名 &#x27;&#x27;&#x27; # 随机生成新的图片名，自定义路径。 ext = file.name.split(&#x27;.&#x27;)[-1] file_name = &#x27;&#123;&#125;.&#123;&#125;&#x27;.format(uuid.uuid4().hex[:10], ext) cropped_avatar = os.path.join(str(uid), &quot;avatar&quot;, file_name) # 相对根目录路径 file_path = os.path.join(&quot;media&quot;, str(uid), &quot;avatar&quot;, file_name) # 获取Ajax发送的裁剪参数data，先用json解析。 coords = json.loads(data) t_x = int(coords[&#x27;x&#x27;]) t_y = int(coords[&#x27;y&#x27;]) t_width = t_x + int(coords[&#x27;width&#x27;]) t_height = t_y + int(coords[&#x27;height&#x27;]) t_rotate = coords[&#x27;rotate&#x27;]\tif abs(t_rotate)&lt;=90: #这里旋转小于等于90度居然是相反方向 t_rotate=-t_rotate # 通过文件名判断是否为gif if file_name.endswith(&#x27;.gif&#x27;): &#x27;&#x27;&#x27;成功了就是保存的文件会变大，还有保存速度太慢了4~5s,前台应该做个动画&#x27;&#x27;&#x27; frames = [] with Image.open(file) as im: idx = 0 for frame in ImageSequence.Iterator(im): frame = frame.crop((t_x, t_y, t_width, t_height)).resize((400, 400)).rotate(t_rotate) frame.info[&#x27;duration&#x27;] = im.info[&#x27;duration&#x27;] frames.append(frame) idx += 1 frames[0].save(file_path, save_all=True, append_images=frames[1:], loop=0, duration=im.info[&#x27;duration&#x27;], quality=80) else: # 裁剪图片,压缩尺寸为400*400。 img = Image.open(file) # 由于我的Pillow版本是 10.0 Image.ANTIALIAS 被弃用 crop_im = img.crop((t_x, t_y, t_width, t_height)).resize((400, 400), Image.LANCZOS).rotate(t_rotate) directory = os.path.dirname(file_path) if not os.path.exists(directory): os.makedirs(directory) crop_im.save(file_path) # 如果头像不是默认头像，删除老头像图片, 节省空间 # 这部分可以删去，或者限制用户可以查看最近10张头像历史 if not current_avatar == os.path.join(&quot;media&quot;, &quot;avatar&quot;, &quot;用户.png&quot;): current_avatar_path = os.path.join(&quot;media&quot;, str(uid), &quot;avatar&quot;,os.path.basename(current_avatar.url)) os.remove(current_avatar_path) return cropped_avatar 效果展示 #静图剪切 静图剪切动画 #动图剪切（这一步其实挺慢的，中间等待的部分剪去了） gif动图剪切 总结：当初自己整这个可是整了挺久的，很难找到直接拿来用的，很多都是前端VUE处理的，没有直接是Html或是Html+JQuery,而且那些头像处理没有对GiF处理的步骤，就观在那些大型网站来看，现在好像确实没有多少支持用gif动图为头像的。 而且这个前端处理的js文件坐标点好像有点偏移…… 虽然历经不少，也找到了解决办法，但是还是那么难找，整了挺久的。找到了还是要自己理解和运用，就这样吧，希望我的文章能给你提供帮助。 希望能够我一个赞同&#x2F;赞&#x2F;收藏辣(‾◡◝) 大家有什么问题可以在评论区大胆留盐（不用加密（bushi 与CSDN同步发布，我应该在博客园也发一份~","tags":["Django","Python","Pillow"],"categories":["后端"]},{"title":"超详细MySql的安装✨，包含各种安装问题及解决方法🎯","path":"/p/mysql-setup/","content":"前言：本文主要讲的是MySQL本地部署即安装与配置 zip 和 msi 这两种版本大致就是更详细的安装和更粗暴的安装罢了，没有什么太大区别，除了mysql的版本外，能正常使用就行 zip包版第1步下载安装官网下载地址: MySQL Community Downloadshttps://dev.mysql.com/downloads/mysql/ 点击下载后有人可能很懵逼，啥？居然还要登录。其实下面有一个直接开始下载的按钮。点一下直接下载就行 第2步：解压到任意文件夹并创建配置文件建议解压至软件安装目录 并在安装目录下创建my.ini的文件，作为MySQL的配置文件 配置内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940[mysql]default-character-set=utf8[mysqld]port=3306#basedir=C:/Program Files/mysql-5.7.26-winx64#datadir=C:/Program Files/mysql-5.7.26-winx64/data/basedir=C:\\Program Files\\MySQL\\mysql-8.0.33-winx64datadir=C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\data\\character-set-server=utf8default-storage-engine=MyIsammax_connections=100collation-server=utf8_unicode_ciinit_connect=&#x27;SET NAMES utf8&#x27;innodb_buffer_pool_size=64Minnodb_flush_log_at_trx_commit=1innodb_lock_wait_timeout=120innodb_log_buffer_size=4Minnodb_log_file_size=256Minteractive_timeout=120join_buffer_size=2Mkey_buffer_size=32Mlog_error_verbosity=1max_allowed_packet=16Mmax_heap_table_size=64Mmyisam_max_sort_file_size=64Gmyisam_sort_buffer_size=32Mread_buffer_size=512kbread_rnd_buffer_size=4Mserver_id=1skip-external-locking=onsort_buffer_size=256kbtable_open_cache=256thread_cache_size=16tmp_table_size=64Mwait_timeout=120[client]port=3306default-character-set=utf8 关于配置文件，如果不进行配置的话，MySQL则自动使用默认值 注意键入配置操作命令须在管理员权限下 配置优先级 1C:\\Users\\Administrator&gt;&quot;C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\bin\\mysqld.exe&quot; --help --verbose 输入后会有很多信息，这里主要看前面几条，直接ctrl+c停止命令 初始化目录，自动生成data目录，用于存放数据库数据和日志文件之类的 同时创建建必备一些的数据，例如默认账户root（无密码），用于登录MySQL并通过指令操作MySQL 1C:\\Users\\Administrator&gt;&quot;C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\bin\\mysqld.exe&quot; --initialize-insecure 在windowns安装过程中如果有报错(msvcr120.dll不存在)，请下载并安装下面的两个补丁：（主要是mysql环境没有搭建好，后面msi可对照） vcredist(主要): Download Visual C++ Redistributable Packages for Visual Studio 2013 from Official Microsoft Download Center 进去就会自动下载 dirctx: https://www.microsoft.com/zh-CN/download/details.aspx?id=35 基础安装到这里就结束了 设置密码(也可以用作登录后修改成新的密码) 在mysql中查看是不是明文密码: 123456789101112131415161718192021222324252627282930use mysqlSELECT user, authentication_string FROM user;mysql&gt; use mysqlDatabase changedmysql&gt; SELECT user, authentication_string FROM user;+------------------+------------------------------------------------------------------------+| user | authentication_string |+------------------+------------------------------------------------------------------------+| mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || mysql.session | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || mysql.sys | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || root | $A$005$@Pbut&#123;B (nV&gt;L4;T%0A.80wi0m8X9xvwz5Gsu3oo1qNr3FN4Zb6PtR/pHHD6 |+------------------+------------------------------------------------------------------------+4 rows in set (0.00 sec)mysql&gt; UPDATE user SET authentication_string=&quot;123&quot; WHERE user=&quot;root&quot;;#这种方式写的密码是有问题的，导致不能够登录Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; SELECT user, authentication_string FROM user;+------------------+------------------------------------------------------------------------+| user | authentication_string |+------------------+------------------------------------------------------------------------+| mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || mysql.session | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || mysql.sys | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED || root | 123 |+------------------+------------------------------------------------------------------------+4 rows in set (0.00 sec) 一步到位：查看密码库。不是设置密码。 1select authentication_string from mysql.user where User=&#x27;root&#x27;; 方法一(通用)： 1234567891011121314151617181920212223alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;password&#x27;;mysql -u root -p #登录后mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;root&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; exitByeC:\\Windows\\system32&gt;mysql -u root -P 3307 -pEnter password: **** #rootWelcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 17Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; 方法二（5.7~5.7.9 其他版本没试过但是mysql8已经将SET PASSWORD语句废弃）：使用mysql提供的密码修改命令 12345678910111213141516171819202122232425262728SET PASSWORD FOR &#x27;user&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;); 用户 ip SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;newpassword&#x27;);C:\\Users\\14763&gt;mysql -uroot -pEnter password: ****#登录后mysql&gt; SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;root123&#x27;);Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; exit;ByeC:\\Users\\14763&gt;mysql -uroot -pEnter password: ****** #root123Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 16Server version: 5.7.36-log MySQL Community Server (GPL)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; 第3步 启动MySQL启动MySQL有两种模式： 临时启动 cmd C:\\Windows\\system32&gt;”C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\bin\\mysqld.exe” 此时还会弹出一个防火墙权限通知，允许即可。（没有也正常） 注意：此时程序会挂起，内部就是可以接收客户端发来的MySQL指令，关闭窗口或Ct+c就可以停止运行。 这种启动方式每次开机或想要开启都需要手动执行一遍命令比较麻烦。 制作windows服务,基于windows服务管理。 cmd C:\\Windows\\system32&gt;”C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\bin\\mysqld.exe” –install mysql80 1234#卸载服务 除了sc delete mysql80#还有一种方法C:\\Windows\\system32&gt;&quot;C:\\Program Files\\MySQL\\mysql-8.0.33-winx64\\bin\\mysqld.exe&quot; --remove mysql80 第4步 设置环境变量使用配置环境相当于定于了全局变量，不用我们先转到mysql的安装目录或者敲入文件目录（详细情况见msi版本讲解），直接敲入 mysql -u root -p就可以登录了。 鬼画神涂的配置环境 msi程序 https://dev.mysql.com/downloads/windows/installer/ 不用登录账号直接跳过。参考zip包版。 下载下来运行msi程序，可能提醒你有新的版本现在可以更新，选择no 选择设置类型双击运行mysql-installer-community-5.7.31.0.msi，这里选择是自定义安装，所以直接选择“Custom”，点击“Next” “Developer Default”是开发者模式：包含mysql server,mysql connectors,mysql workbench,文档和示例 “Server only”仅作为服务器安装： 仅仅安装mysql server “Client only”仅作为客户端安装: 仅仅安装mysql client “Full”是完整安装： 安装所有模块 “Custom”是自定义安装： 自定义选择需要的模块 设置文件安装位置 可以不用勾选，直接next 服务名称 日志位置 此时已经完成安装了 安装mysql后,注意区分如下几个目录的作用 数据库管理系统软件安装目录(DBMS安装目录) “database manage server” 数据存放的目录 “Data目录”(这里存放的是我们创建的库，创建的表的信息) 数据库连接目录(其他编程语言连接数据库jar包信息)”connector&#x2F;J”(这个是 java连接mysql需要的安装包) 客户端工具的目录 “workhench”(这个是mysq1自带的mysq1客户端管理工具) 需要注意的是：1、2这两个目录，是在安装的时候，必须有的。后面的3、4这两个目录，当我们选择安装”connector&#x2F;J”和”workhench”的时候，才会生成。 基础配置配置环境变量接上面，为什么需要配置环境呢？（可跳过） 因为不配置环境变量的话在cmd里必须切换到C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin下运行 在cmd中运行指的是 在cmd窗口下键入如下。（打开cmd窗口直接拖进去就行） 1234567891011121314151617181920C:\\&gt;&quot;C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysql.exe&quot;#结果ERROR 1045 (28000): Access denied for user &#x27;ODBC&#x27;@&#x27;localhost&#x27; (using password: NO)C:\\&gt;&quot;C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysqld.exe&quot;#结果mysqld: Can&#x27;t change dir to &#x27;C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\data\\&#x27; (Errcode: 2 - No such file or directory)2023-05-06T06:19:24.084707Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2023-05-06T06:19:24.084790Z 0 [Note] --secure-file-priv is set to NULL. Operations related to importing and exporting data are disabled2023-05-06T06:19:24.085328Z 0 [Note] C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysqld.exe (mysqld 5.7.36) starting as process 7424 ...2023-05-06T06:19:24.089909Z 0 [Warning] Can&#x27;t create test file C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\data\\DESKTOP-ECFIPC8.lower-test2023-05-06T06:19:24.090171Z 0 [Warning] Can&#x27;t create test file C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\data\\DESKTOP-ECFIPC8.lower-test2023-05-06T06:19:24.091955Z 0 [ERROR] failed to set datadir to C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\data\\2023-05-06T06:19:24.092541Z 0 [ERROR] Aborting2023-05-06T06:19:24.093154Z 0 [Note] Binlog end2023-05-06T06:19:24.094298Z 0 [Note] C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin\\mysqld.exe: Shutdown complete 手动输入 12345678910111213141516171819202122232425262728C:\\Program Files (x86)\\MySQL\\MySQL Server 5.7\\bin&gt;mysql -u root -pEnter password: ****Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 13Server version: 5.7.36-log MySQL Community Server (GPL)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; exitBye————————————————————————————————C:\\&gt;mysql -u root -p&#x27;mysql&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。C:\\&gt;mysql server&#x27;mysql&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。C:\\&gt;mysql&#x27;mysql&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。。 配置环境变量 将安装目录的bin目录路径复制到其中 一并确定后 配置配置文件由于我没有将数据目录和安装目录放在同一目录下，所以主要配置文件my.ini在数据文件下。 C:\\ProgramData\\MySQL\\MySQL Server 5.7。 主要有两个东西需要注意：一个重要目录data,一个重要配置文件my.ini 关于my.ini的配置，详细介绍 https://blog.csdn.net/hanwuqia0370/article/details/85680775 关于data文件 这个data目录中，存放着一些错误日志文件和三个目录（如下图）。 这三个目录是不是有一种很熟悉的感觉，没错，就是我们第一次登陆mysql 后输入”show databases”后，显示的系统默认的数据库。 因此，你可以知道，我们每创建一个数据库，就会在这个data目录下，生成 一个目录。同时，进入每一个数据库目录下，又有很多各种各样的文件，其中我们 需要注意的是：”.Frm后缀”和”.MYD后缀”的文件。”.Frm后缀”文件中存放的是表 的结构信息；”.MD后缀”文件中存放的是数据信息。 知乎@黑里怕 123456789101112mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.00 sec)mysql&gt; 启动服务器123启动：net start MySQL停止：net stop MySQL卸载：sc delete MySQL 区分本地多个MySQL如何区别一个电脑上多个mysql版本，并进行丝滑登录操作呢？ 其一 将端口区分 主要配置文件下的客户端端口也记得更改，虽然在cmd上登录mysql用的端口是mysqld下面写的端口（即不改也不影响） 其二 服务名称设置为不同的名称 ​ 在注册表目录也是有所对应的 使用命令启动服务器 123456C:\\Windows\\system32&gt;net start mysql80mysql80 服务正在启动 .mysql80 服务已经启动成功。C:\\Windows\\system32&gt;net start mysql57mysql57 服务正在启动 .mysql57 服务已经启动成功。 但是不指定mysql端口，直接登录默认是环境中靠上面的那一个变量 因为我mysql80并没有设置密码所以尝试（即mysql57设置了密码），但不输入密码直接进入也失败(表面直接输入mysql选择的是mysql57) 1mysql -u 用户 -h IP地址(因为是本机部署的mysql默认可以不写) -P 端口 -p 密码 通过上述命令，可知只要多加入一个-P 端口就能够区分开来 忘记密码MySQL8.0以上 MYSQL8.0以上版本忘记ROOT密码_alter user ‘root‘@’localhost’ identified by ‘root’_linmengmeng_1314的博客-CSDN博客 以超级管理员打开cmd，关闭mysql服务 1net stop mysql 跳过权限验证登录mysql 1mysqld --shared-memory --skip-grant-tables 在新的窗口中登录mysql 1mysql -u root -p 切换到mysql，将密码置空 1use mysql; update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;; flush privileges;#刷新权限 5.设置加密规则并更新新密码，授权(直接复制这些SQL语句你的密码会更新为123456 1234ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;; grant all privileges on *.* to &quot;root&quot;@&#x27;localhost&#x27;; flush privileges;#刷新权限 关闭第一个窗口，启动mysql服务用新密码登录 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556C:\\Windows\\system32&gt;mysql -uroot -P 3307 -pEnter password: #回车进入即可Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 7Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; use mysql;Database changedmysql&gt; update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;;Query OK, 1 row affected (0.02 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; flush privileges;Query OK, 0 rows affected (0.05 sec)mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER;Query OK, 0 rows affected (0.00 sec)mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; grant all privileges on *.* to &quot;root&quot;@&#x27;localhost&#x27;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; exit； #此处可能会卡住 #mysql&gt; eixt; #^C -- Sorry, cannot connect to the server to kill query, giving up ... #不理会，关闭窗口就行，重新开一个cmdByeC:\\Windows\\system32&gt;mysql -uroot -P 3307 -pEnter password: ****** #123456Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 9Server version: 8.0.33 MySQL Community Server - GPLCopyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.mysql&gt; MySQL5.7 暂停服务(以管理员运行cmd) 1net stop mysql57 修改my.ini配置文件，在[mysqld]下面加上这样的一句话 1skip-grant-tables 重启服务(以管理员运行cmd) 1net start mysql57 登录mysql 1mysql -uroot -p 置空密码 123use mysql;update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;;flush privileges;#刷新权限 修改密码 建议将配置文件该回去并且重启服务，使用set password语句，详细参考上文 SQL语句的三种注释12345#单行注释/*多行注释*/-- 单行注释（注意前面必须有空格） MySQL中的标识符（如表名、列名、变量名等）和字符串常量是区分大小写的，但是关键字和函数名不区分大小写。例如，SELECT和select是等效的，但是myTable和mytable是不同的标识符。 在默认情况下，MySQL的表名和列名是大小写不敏感的，但是可以通过设置lower_case_table_names参数来改变这个行为。如果lower_case_table_names设置为0，则表名和列名是大小写敏感的；如果设置为1，则表名和列名是大小写不敏感的，但是区分大小写；如果设置为2，则表名和列名是大小写不敏感的，并且不区分大小写。 总之，MySQL中的大小写敏感性取决于标识符、字符串常量和lower_case_table_names参数的设置。 数据库管理内置客户端操作当连接上MySQL之后,执行如下指令(一般称为SQL语句)，就可以对MySQL的数据进行操作。 查看当前所有的数据库：show databases; 创建数据库：create database 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 删除数据库:drop databases 数据库名; 进入数据(进入文件):use 数据库; 示例: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120# 1.登录MySQLmysql -u root -pEnter password: **** #输入密码# 2.查看当前数据库mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+# 3.创建数据库: create database 数据库名 default charser 编码 collate 排序规则;mysql&gt; create database shujukuQuery OK, 1 row affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || shujuku || sys |+--------------------+5 rows in set (0.00 sec)或者输入mysql&gt; create database shujuku1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database shujuku1 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;Query OK, 1 row affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || shujuku || shujuku1 || sys |+--------------------+6 rows in set (0.00 sec)# 4.删除数据库mysql&gt; drop database shujuku1;Query OK, 0 rows affected (0.00 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || shujuku || sys |+--------------------+5 rows in set (0.00 sec)# 5.查看当前数据库mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || shujuku || sys |+--------------------+5 rows in set (0.00 sec)# 6.进入数据库mysql&gt; use mysql;Database changed# 7.进入mysql数据库(文件夹),查看此数据库下的所有表。mysql&gt; show tables;+---------------------------+| Tables_in_mysql |+---------------------------+| columns_priv || db || engine_cost || event || func || general_log || gtid_executed || help_category || help_keyword || help_relation || help_topic || innodb_index_stats || innodb_table_stats || ndb_binlog_index || plugin || proc || procs_priv || proxies_priv || server_cost || servers || slave_master_info || slave_relay_log_info || slave_worker_info || slow_log || tables_priv || time_zone || time_zone_leap_second || time_zone_name || time_zone_transition || time_zone_transition_type || user |+---------------------------+31 rows in set (0.00 sec)# 8.退出mysql&gt; exitBye python操作无论通过何种方式去连接MySQL,本质上发送到指令都是相同的，只是连接方式和操作形式不同而已 1234567891011121314151617181920212223242526272829303132333435363738394041424344import pymysql#链接mysqlconn=pymysql.connect(host=&#x27;127.0.0.1&#x27;,port=3306,user=&#x27;root&#x27;,password=&#x27;123456&#x27;,charset=&#x27;utf8&#x27;)cursor=conn.cursor()#创建游标# 1. 查看数据库# 发送指令cursor.execute(&quot;show databases&quot;)# 获取指令的结果result=cursor.fetchall()print(result)#((&#x27;information_schema&#x27;,), (&#x27;mysql&#x27;,), (&#x27;performance_schema&#x27;,), (&#x27;shujuku&#x27;,), (&#x27;sys&#x27;,))# 2. 创建数据库# 发送指令cursor.execute(&quot;create database shujuku1&quot;)# 也可以写成下面的方式cursor.execute(&quot;create database shujuku2 default charset utf8 collate utf8_general_ci&quot;)conn.commit()cursor.execute(&quot;show databases&quot;)# 3. 查看数据库result=cursor.fetchall()print(result)#((&#x27;information_schema&#x27;,), (&#x27;mysql&#x27;,), (&#x27;performance_schema&#x27;,), (&#x27;shujuku1&#x27;,), (&#x27;shujuku2&#x27;,), (&#x27;sys&#x27;,))# 4. 删除数据库# 发送指令# cursor.execute(&#x27;call drop_databases(&quot;shujuku&quot;)&#x27;)cursor.execute(&quot;drop database shujuku1&quot;)cursor.execute(&quot;drop database shujuku2&quot;)conn.commit()cursor.execute(&quot;show databases&quot;)result=cursor.fetchall()print(result)#((&#x27;information_schema&#x27;,), (&#x27;mysql&#x27;,), (&#x27;performance_schema&#x27;,), (&#x27;sys&#x27;,))# 5.进入数据 查看表# 发送指令cursor.execute(&quot;use mysql&quot;)cursor.execute(&quot;show tables&quot;)result=cursor.fetchall()print(result)#((&#x27;columns_priv&#x27;,), (&#x27;db&#x27;,), (&#x27;engine_cost&#x27;,), (&#x27;event&#x27;,), (&#x27;func&#x27;,), (&#x27;general_log&#x27;,), (&#x27;gtid_executed&#x27;,), (&#x27;help_category&#x27;,), (&#x27;help_keyword&#x27;,), (&#x27;help_relation&#x27;,), (&#x27;help_topic&#x27;,), (&#x27;innodb_index_stats&#x27;,), (&#x27;innodb_table_stats&#x27;,), (&#x27;ndb_binlog_index&#x27;,), (&#x27;plugin&#x27;,), (&#x27;proc&#x27;,), (&#x27;procs_priv&#x27;,), (&#x27;proxies_priv&#x27;,), (&#x27;server_cost&#x27;,), (&#x27;servers&#x27;,), (&#x27;slave_master_info&#x27;,), (&#x27;slave_relay_log_info&#x27;,), (&#x27;slave_worker_info&#x27;,), (&#x27;slow_log&#x27;,), (&#x27;tables_priv&#x27;,), (&#x27;time_zone&#x27;,), (&#x27;time_zone_leap_second&#x27;,), (&#x27;time_zone_name&#x27;,), (&#x27;time_zone_transition&#x27;,), (&#x27;time_zone_transition_type&#x27;,), (&#x27;user&#x27;,)) 尾言至于MySQL的其他操作和知识，以后有缘补上"},{"title":"超级小白纯纯入门，论什么都不懂如何自装笔记本固态硬盘【超详细贴心保姆级教程】","path":"/p/disk-update/","content":"前言最近国产砂疯了，以长江为首的，打下了之前虚高的内存市场价格，现在内存市场以近乎成本的价格出售，这是购买内存的最好时机了（个人观点，仅供参考）。 就存储内盘来说，很多人都会遇到存储内存不够的情况，将一些文件删了又下，下了又删，在狭小的存储空间给文件不断寻找着可以存放的地方，过着紧巴巴的日子（夸张）。当然也有一些解决办法，从根本上处理这些燃眉的问题——那就是扩容。增加你的存储空间，装一个固态硬盘或者机械硬盘。 而我就以我最近自装固态硬盘的经验出一篇不是很专业的攻略。 ↓↓ ↓↓ ↓↓ ↓↓ ↓↓ ↓↓ 本篇攻略以win10 x64位操作系统 联想拯救者r9000x2021款为例，具体情况自己多加思考和研究，请以具体情况为准。 ↑↑ ↑↑ ↑↑ ↑↑ ↑↑ ↑↑ 话不多说，先给出几个前提条件和问题。 Q1:大概需要花费多少 1TB的话是200——500左右为参考 Q2:如何选择合适的固态硬盘 Q3:如何安全安装 Q4:如何检查硬盘的可靠性 速通版确认自己的电脑能够再加装一个固态硬盘后，选购固态硬盘后，并提前准备好螺丝刀、撬片，在电脑上提前安装好检验软件。断掉电源，使用工具拆开电脑后壳，断开电源排线。找到安防硬盘的位置，安装上硬盘后，连接电源排线，先不装好电脑后壳。开机查看是否正常，分配好磁盘后通过检验工具查看硬盘是否靠谱、正常。一切正常后，再把电脑后壳组装上去。大功告成。 详细版查看自己的电脑还能不能加装，能加装哪些接口的固态硬盘 再此之前大家可以区别一下 SATA、M2、PCIe和NVME等名词的区别 物理接口（尺寸标准） 高速信号协议（总线标注） 传输层协议（协议） M.2 , U.2 , AIC, NGFF，SATA SAS，SATA，PCIe SCSI，ATA，NVMe 这三者都需要查清楚，要不然随便买了一个可能用都没法用，签收退货都是需要时间的。 一般的： 是NVMe（协议）都是PCIe（总线） 是ATA （协议）只能是SATA(总线) SATA是目前笔记本电脑的标配，思考的问题在于支不支持PCIe 至于怎么不在拆机前查看自己能否装硬盘可以通过几种方法： 1.下载鲁大师查看 2.从本电脑自带的安全防护软件查看 3.在搜索引擎内输入你的电脑型号，在网上查看一下别人的拆机教程，看看他们是装什么盘的，把他们装的型号记住（偷师） 4.直接在官网去翻找。 比如联想的（真不知道为什么它下架了R9000X2021的配置信息,不过就这个机型他是不支持PCIe4的） Lenovo联想售后客户服务中心,提供驱动下载,配置查询,保修服务-联想服务https://newsupport.lenovo.com.cn/?pmf_group=quo&pmf_medium=quo&pmf_source=Z00015698T000 5.去购物网站找相应的客服询问。 选各类硬盘评测（评测来源于各个大网站的文章或视频，本文章在引用他人的作品会在一旁标注出来源链接）: 不做详细的评价，仅以个人的眼光进行推荐。（没有能力评价，不过长江yyds） 建议支持国产，至于为什么，差不多就一句话，想要以后都这个价甚至更便宜，那就请支持国产吧！ 【内存暗战：被国外巨头垄断卖高价的内存，为何一夜暴跌？】https://www.bilibili.com/video/BV1ga4y1K7ci/?share_source=copy_web&vd_source=f66380805a40c4e5466841793735f07b 国产性能已经差不多是顶尖水平，而且基本都是五年质保，这不心动？ 就固态硬盘来说容量越大传输速度越快，硬盘约稳定。 有独立缓存的比没有独立缓存的稳定一点，但是温度更高一点。 1.致态pc0005（有独立缓存） 内存容量 官方 第三方 512GB 319 —— 1TB 519 499 2TB 缺货 —— 2.致态7100 参考来源： 【2023年4月固态硬盘推荐，国产白菜价硬盘层出不穷，大人时代变了。】https://www.bilibili.com/video/BV1Lh411G7Uz/?share_source=copy_web&vd_source=f66380805a40c4e5466841793735f07b 3.致态TIplus5000(听说存在联想笔记本弹盘的风险(小概率事件)所以排在后头) 官方旗舰店链接：（比较放心） https://item.jd.com/100008608665.html#crumb-wraphttps://item.jd.com/100008608665.html#crumb-wrap 我买的是PC005，这不是对自己的学习数据好一点嘛，对我的数据负责。 装0.准备工具(为什么会是0呢？没有工具怎么装？没有工具拿着硬盘就只能望洋兴叹，没有撬片就已经很致命了) 撬片（必须） 螺丝刀 （必须）吸盘（选用） 建议买工具直接买那种多螺丝头的，以免自己电脑的螺丝钉型号问题。并且买那种工具箱送装机工具的那种（包含撬片等），省得单独买。直接搜装机工具即可 有的人会想需不需要硬盘支架固定，这个你得看你的接口，还有看实际情况。M.2的基本是不需要的。SATA接口的可能会用到。硬盘实在是会松动，没有支架可以选择塞点东西稳定一下（不建议塞纸） 软件： CrystalDiskInfo 用来检查基本信息。主要看通电次数、序列号，时间 CrystalDiskMark 用来检查读写速度（测速软件） 软件下载地址：（两个软件都在这个网址内，第二个往下滑滑就是） Download - Crystal Dew World en] (crystalmark.info) 官方网址打开的比较慢，博主将该软件上传到网盘供大家下载，不放心的话还是建议官网下载。 链接: https://pan.baidu.com/s/1M3wR9L5V0Iv3kvIevm8gnw 提取码: zmzj 复制这段内容后打开百度网盘手机App，操作更方便哦 ​ ↑致命装机 1.做好数据备份。假若操作失误，或者极其不幸的发生电路板静电事故导致数据丢失那就得不偿失（虽然这种情况只有失，但只要装机的时候不要太逆天就基本不会发生） 可以使用百度云盘，OneDrive、阿里云盘、夸克云盘、腾讯微云等软件进行云存储。（记得加密要紧文件） 也可以使用U盘，移动硬盘进行备份。 2.彻底关机，拔掉插头。进行比较彻底的断电。 【关机≠彻底关机，你的电脑真的关机了吗？也许从来没有！-哔哩哔哩】https://b23.tv/j5HScvC 输入 win+R 弹出电脑命令窗口，并在里面输入如下命令 1shutdown /s /t 0 3.拆开后盖。！释放静电！在对可能触碰到电子元件的操作都建议先去水池洗手把静电释放，以免手上的静电损害电子元件。 不建议穿化纤的衣服，条件好的可以准备一个静电手环或者穿一件皮衣，带一个金属眼镜(黄仁勋bushi)。 玩笑来源： 【拆装电脑注意防静电】https://www.bilibili.com/video/BV1ft4y1F7oR/?share_source=copy_web&vd_source=f66380805a40c4e5466841793735f07b 总得来说只要多洗手，不会有啥大问题的，记得把手擦干。 正式拆机其实没有太多操作，就拆一个后壳。 先把把固定后壳盖螺丝拧下来（注意放好螺丝钉，建议拿一个小盒子装起来，不要弄丢了），然后根据自己电脑的品牌不同，后壳和框架的紧密程度不一，有的拧开螺丝就能够直接将后盖和电脑分离，但是现在一般都是比较紧密的，这个时候需要利用到撬片，为什么不直接用银行卡之类的卡片呢？首先银行卡没有那么薄，在其次把撬片放进去撬开是一个会磨损的过程。 所以在使用撬片建议撬片的材质是塑料的，用撬片把后盖撬开是装硬盘中最难的一个步骤了，也是最容易劝退小白的步骤了。 首先不要慌张。 建议从出气口开始撬开，本机有一个向着出气口反方向的卡扣，就是触摸板的那一边。 先用撬片撬动开来，然后将后壳往出风口滑。这里还可以借助到吸盘，把后壳吸住，这样更好拉一点，因为没有很好的用力点，扒拉的时候可能还会往下压。 下方图片来源于下方链接第一个视频的截图。我自己装的时候既没有拍照也有没有录像，真是莫大的悲哀。 成功取下后盖后，先把电源排线断开。找到SSD卡槽，我的空卡槽上有一个螺帽限位，先把螺帽取下，取出新买的固态硬盘，以15°~30°的角度插入，注意豁口形状，不要插反了。插入可能没有完全插进去，需要用一点力气推进去，以另一边是否对准螺丝孔为例，然后拧上螺丝，其中致钛还有带一个限位螺孔的部件（实际上自带两个部件：一个螺孔和一个螺丝钉，以至于你装完后会多出一个螺丝钉），看着装进去即可，最终固定硬盘的螺丝钉不要拧太紧，适当即可。 最终成品是硬盘与底面保持平行。 然后连上电源排线，这里先跳到 验 的步骤 检验无误后，有得人会额外加一个散热片。如果装上散热片还能正常装后壳，那就可以再装一个散热片，如果塞不下，还是算了。 最后，先装后壳有卡槽的部位，以卡槽方向塞入后，各按四个角，能听到啪嗒的声音。拧上螺丝钉，连上电源，打开电脑再检查一下有无问题。如果出现问题，建议还是到专业人员那去处理。 操作视频参考：（为什么博主不自己录一个，没有手机支架，也米有合适的地方放手机进行录制。）建议装机前找到自己电脑的装机操作视频多看几遍，再开始装。 【R9000X加装三星980 1T固态硬盘 全程实拍快剪】https://www.bilibili.com/video/BV1x34y1R7Xz/?share_source=copy_web&vd_source=f66380805a40c4e5466841793735f07b 【【装机教程P5】M.2固态硬盘的安装方法】https://www.bilibili.com/video/BV1bP411K79i/?share_source=copy_web&vd_source=f66380805a40c4e5466841793735f07b 验在装上固态硬盘后，先不要把后盖装上。先连接电源排序，将电源排线推至合适位置能够听到‘啪嗒’一声，并且有红灯亮起提示，表示链接上了。这时候开机，先对新装的硬盘进行磁盘管理。 右键此电脑，点击管理 在 存储 中找到 磁盘管理 有人奇怪为什么1T只有950多G，是不是商家吞了。其实不是，而是进制不同，这个字节到太都是1000进1，而计算机是以1024进1。 这里的磁盘0应该是显示灰色的 未分配状态 然后右击新建卷 如果你是只是当作常用盘，而不是系统盘，就可以一直默认，无脑下一步、确定即可。 然后这时候拿出之前准备好的软件工具，进行检验。 插电原读写速度 原速度 不插电新硬盘读写速度 插电源再测 插电新硬盘读写速度 装上时不插电源 长江yyds!!! 通电次数2为正常现象，该次数包含了检测。 序列号记得和包装盒上的序列号核对一下 如果你还想进行一步分盘操作的话 在此电脑—（右键）管理—磁盘管理-（选中新增的磁盘，右键）压缩卷 变回去的话对主盘扩展卷即可。 不过现在大容量时代，基本上不分盘的，不过还是看个人需求。（你看看，这个博主就乱分盘） 到这里就结束了全部的装机步骤啦！ 可喜可贺！！！ 至于怎么把新装的固态硬盘设置为系统盘，有缘再讲吧。","tags":["装机大业"],"categories":["硬件"]},{"path":"/css/newYear.css","content":"@media screen and (min-width: 850px){ .NewYear { width: 260px; height: 300px; display: inline-block; background: url(/assets/other/longgyaj.gif) no-repeat 50%/100%; vertical-align: middle; position: fixed; left: 85.8%; top: 55px; z-index: 999; cursor: pointer; animation: new-year 1.2s ease-in-out 0s infinite alternate; margin-left: -1px; transform-origin: 50% 0; pointer-events: none; } } @keyframes new-year{ 0% { transform: rotate(10deg); } 100%{ transform: rotate(-10deg); } }"},{"path":"/bookmark/index.html","content":"随记收藏收藏 前端学习 Vue3Js渐进式前端框架，你们说很简单，但是我怎么学不会呢 后端学习 Django姜go!张戈？不好意思我晕了DjangoRestFramework姜go泼辣私,我服啦SpringBoot浅尝辄止Express浅尝辄止,十分简便啊，能看懂一些些 推荐学习网站 菜鸟编程梦开始的地方博客园每次修bug找到进去都很安心力扣一日一道，就简避难，不愧是我洛谷python真不适合刷这个 设计灵感和素材 iconfont阿里特供的矢量图标库UnsplashPhotos for everyone.爱给网音效配乐、3D模型、视频素材 免费下载FlaticonAccess 3,260,000 vector icons.花瓣网花瓣网 - 陪你做生活的设计师（创意灵感天堂，搜索、发现设计灵感、设计素材） 开发工具 在线工具镜像源和软件包thum.io快速生成网站截图BOCE检测网站状态bejson在线JSON校验格式化工具（Be JSON）清华大学开源软件镜像站https://mirrors.tuna.tsinghua.edu.cn阿里云官方镜像站https://developer.aliyun.com/mirror/ 摸鱼 黑神话·悟空官网既见未来，为何不buySteamDBsteam你还能喜加一吗？微信读书产品很不错，不过没有当初体验卡随便读的盛况了MyFreeMP3在线免费听，免费下"},{"path":"/about/index.html","content":"半醒着的阳光一点我的个人简介 自我介绍建站初衷&nbsp;&nbsp;我是半醒着的阳光，一个渴望从事软件开发行业的超级菜鸟。对很多事务都有着很浓烈的兴趣：如编码、历史、绘画、数学、游戏、小说等，虽然广泛涉猎，但很多都不是很了解，只是希望分享关于这些的个人见解。 很早的时候就有这种想法，一开始想搞个个人的小说网站，想自己写小说，自己搞些便以阅读很酷炫的页面动画，但是没能力完成。但在2023年的4月份在知乎上发布了一篇关于笔记本如何装固态硬盘的文章后，又开始了这一想法——想分享一些个人的见闻，分享知识，自己也想了解更多知识。 在一次招聘面试的时候，我自己又没有做什么项目，面试官问我有没有个人博客，我答道：“没有，我就没有那种个人博客网站。有的只是那种论坛的文章，但是我做了很多笔记。”有种莫名的失落感，我其实很早就应该有的。 &nbsp;&nbsp;更多详细的个人性格介绍和建站初衷在Hello World中可阅 博客发展史碎碎念2023年9 月 17日接触Hexo和利用GitHubPages部署基于Hexo的stellar的模板博客2023年9 月 22日较全面的阅读了Stellar官方文档，并从各个大佬那个性化了个人博客。开始着手整理和发布笔记。2023年9 月 23日基于GitHub Action的动态友链和朋友圈。2023年9 月 24日更换域名——www.bxzdyg.cn 2023年年度总结 @MonsterHunter Rise@Baldur's Gate 3@MonsterHunter World@Baldur's Gate 3@MonsterHunter Rise@MonsterHunter Rise O1 2023年的小目标：学习技术，挣钱 来自2024年年初的复盘：已有《阶段性成果》 正常 40% KR1 小成就：游戏鉴赏家 通关《博德之门3》通关《杀戮尖塔》AC20带萌新VAN《怪物猎人崛起》单刷《怪物猎人世界》米拉小姐15min左右加5min 已完成 100% KR2 小尝试：尝试转行当个画家 还是失败了，只能临摹，画的太慢了，也不会上色~ 2023年又浪费了两个月时间……@临摹@临摹@临摹@临摹@临摹@临摹@临摹@临摹@临摹@临摹@临摹@临摹 未完成 -20% KR3 小目标：完成博客的搭建和主要个性化页面设计 黑夜模式欢迎语接入音乐大量的废话 正常 60% KR-1 丰富个人博客网站（我需要更多的前端知识，迫切需要大佬） 接入赞助我……求大佬们打赏接入Steam让大家看看我傲人的游戏时长多写几篇佳作，发布技术文章。嘿！让大家看看 未完成 10% KR-2 开发、测试和发布 Stellar真棒 风险 0% KR4 毕设情况 后端前端测试运维论文和pptelasticsearch购物搜索的中文提示词该怎么设计？！业务实现了，效率性能呢?十年前的老网站，不入流，且不合适的拼接技术感觉没啥问题啊，哈哈哈，怎么了这是？！一个头两个大前面还堵着呢 延期 90% 技术支持 名称 链接 备注 Hexo https://hexo.io/zh-cn/https://hexo.io/zh-cn/ 快速、简洁且高效的博客框架 Stellar https://xaoxuu.com/wiki/stellar/https://xaoxuu.com/wiki/stellar/ 博客主题 Github https://github.com/https://github.com/ 代码托管 Vercel https://vercel.com/https://vercel.com/ 实现无服务器部署 Waline https://waline.js.org/https://waline.js.org/ 静态网站评论系统 LeanCloud https://console.leancloud.app/https://console.leancloud.app/ 评论的数据库 腾讯云 https://cloud.tencent.com/https://cloud.tencent.com/ 域名提供商 // Aplayer默认关闭歌词 // 创建一个MutationObserver实例，用于监听DOM的变化 var observer = new MutationObserver(function (mutations) { // 查找页面中class为\"aplayer-icon-lrc\"的元素 var lrcButton = document.querySelector(\".aplayer-icon-lrc\"); // 如果找到了lrcButton if (lrcButton) { // 延迟1毫秒执行点击操作 setTimeout(function () { lrcButton.click(); }, 1); // 打印\"success\"到控制台 console.log(\"success\"); // 断开MutationObserver实例，停止监听DOM的变化 observer.disconnect(); } }); // 监听整个文档及其子节点的变化 observer.observe(document, { childList: true, subtree: true });"},{"path":"/comments/index.html","content":"留言板 &nbsp;&nbsp;你可以在这里留盐，我会找到你的，放心大胆发言，欢迎再来关顾我的小站，就怕一段时间我又消失了，请来提醒我。&nbsp;&nbsp;当然，你可以给我提出一些更好的意见，也可以提携我走入行业深处，教会我更多编程、历史、小说、游戏等方面的知识，因为我还是个超级小白。&nbsp;&nbsp;最后，愿来者都能有所收获！"},{"path":"/css/darkmode.css","content":"#Dark:root { --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --alpha20: rgba(0,0,0,0.2); --alpha50: rgba(0,0,0,0.5); --alpha60: rgba(0,0,0,0.6); --alpha75: rgba(0,0,0,0.75); --alpha100: #000; --sidebar-bg: #383d42; --text: #fff; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333; } @media screen and (max-width: 667px) { #Dark:root { --site-bg: #000; } } #Dark:root { --blur-bg: rgba(0,0,0,0.5); } #Dark .float-panel { --blur-bg: rgba(0,0,0,0.4); } #Dark .tag-plugin.tag { --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e; } #Dark .tag-plugin[color='red'] { --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e; } #Dark .tag-plugin[color='orange'] { --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e; } #Dark .tag-plugin[color='yellow'] { --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e; } #Dark .tag-plugin[color='green'] { --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e; } #Dark .tag-plugin[color='cyan'] { --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1; } #Dark .tag-plugin[color='blue'] { --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1; } #Dark .tag-plugin[color='purple'] { --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1; } #Dark .tag-plugin[color='light'] { --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin[color='dark'] { --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff; } #Dark .tag-plugin[color='warning'], #Dark .tag-plugin[color='light'] { --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin { /* --theme: var(--text-p1); */ --theme-border: var(--block-border); --theme-block: var(--block); --theme-codeblock: var(--block); } #Dark .social-wrap a.social:hover { box-shadow: none; } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .header p { color: var(--text-p2); } #Dark .widget-wrapper.timeline .tag-plugin.timeline .timenode .body { border-radius: 12px; background: var(--alpha50); box-shadow: none; } #Dark a.button.start.gradient { transition: 0.38s ease-out; position: relative; z-index: 0; background: linear-gradient(to right, #4c95fa, #38c9fa, #24f9c4, #24f9c4, #38c9fa, #4c95fa); background-size: 1000%; color: #fff; text-shadow: 0 0 1px rgba(0,0,0,0.12); animation: glow 60s linear infinite; } /* aplayer音乐播放器样式 */ #Dark .aplayer { background: #26292c; font-family: Arial,Helvetica,sans-serif; margin: 5px; box-shadow: 0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1); border-radius: 12px; overflow: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; line-height: normal; position: relative; } #Dark .aplayer .aplayer-list ol li { position: relative; height: 32px; line-height: 32px; padding: 0 15px; font-size: 12px; border-top: 1px solid #383d42; cursor: pointer; transition: all .2s ease; overflow: hidden; margin: 0; } /* 当前选择歌曲 */ #Dark .aplayer .aplayer-list ol li.aplayer-list-light { background: #f4f4f4; color: #373737; font-size: small; font-weight: bold; } /* 经过字体颜色和大小变化 */ #Dark .aplayer .aplayer-list ol li:hover { background: #efefef; color: #ff5722; font-size: small; font-weight: bold; } .aplayer .aplayer-list ol li.aplayer-list-light, .aplayer .aplayer-list ol li:hover { font-size: small; font-weight: bold; } .aplayer .aplayer-info .aplayer-music .aplayer-title { font-size: 17px; } /* waline评论样式 */ #Dark .wl-count{ padding: .375em; font-weight: bold; font-size: 1.25em; color: #fff; } #Dark .cmt-body.waline{ --waline-white: #000; --waline-light-grey: #666; --waline-dark-grey: #999; /* 布局颜色 */ --waline-color: #fff; --waline-bgcolor: var(--block); --waline-bgcolor-light: #272727; --waline-border-color: #333; --waline-disable-bgcolor: #444; --waline-disable-color: #272727; /* 特殊颜色 */ --waline-bq-color: #272727; /* 其他颜色 */ --waline-info-bgcolor: #272727; --waline-info-color: #666; } #Dark .wl-user-name { color: #999; } /* 不是ai制作标识 */ #Dark #notbyai { content: url(\"/assets/website/Written-By-Human-black.png\"); }"},{"title":"Git","path":"/notes/Git.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"title":"友链","path":"/friends/index.html","content":"自是因缘而来…… 我的朋友 申请友链 &nbsp;&nbsp;和我建立的友链关系，我会经常关顾您的站点。当你满足下面的条件，你可以直接申请友链，我会及时回应你的请求。&nbsp;&nbsp;不满足，你也可以先申请上，规矩并没有那么死。假如你的站点变成了一个僵尸站(一年以上没有动态也没有文章)或无法正常访问，我会暂时下架你的网站链接，我并不会嫌麻烦。当您的站点恢复时留言即可!&nbsp;&nbsp;最后我希望通过博文的形式丰富自己的学习内容，在一个偏向于技术的圈子里学到更多！ 大陆内能够正常访问 有实质性原创内容的 HTTPS 站点，发布过至少 3 篇原创文章，内容题材不限。 合法的、非营利性、无商业广告（有广告的会酌情考虑）、无木马植入。 与 博主 有至少 3 次有效互动（有内容的留言或者 issue 等）。 我已满足全部条件，快告诉我如何交换友链！第一步：新建Issue新建 Github Issue按照模板格式填写并提交。为了实现正常预览和提高预览速度，你需要检查提供的图片链接能正常访问，且优化图片大小第二步：添加友链等待我的审核12345&quot;title&quot;: &quot;BXZDYG&quot;,&quot;url&quot;: &quot;https://blog.bxzdyg.cn/&quot;,&quot;avatar&quot;: &quot;https://blog.bxzdyg.cn/assets/website/avatar/avatar.png&quot;,&quot;screenshot&quot;: &quot;https://blog.bxzdyg.cn/assets/website/screenshot/my_screenshot.png&quot;,&quot;description&quot;: &quot;BoBoBlog&quot;待管理员审核通过，添加了 active 标签后，回来刷新即可生效。同时请将本站添加到你的友链中：如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客更新。 期待友链 xaoxuu星日语PhantomShawn 派大星PANOSHU 关于交友 &nbsp;&nbsp;从高中到大学的交友经验来看，我愈发觉得良好的朋友关系有以下几点&nbsp;&nbsp;1. 需要恰当的距离。&nbsp;&nbsp;2. 人与人之间需要最起码的尊重，有些玩笑能不开最好还是不要开，你觉得是玩笑，不一定我觉得是。言语最好不要太轻浮。&nbsp;&nbsp;3. 要学会体谅对方，我也很傻，脑子反应有点慢。"},{"path":"/js/darkmode.js","content":"/** * 监听系统主题 * @type {MediaQueryList} */ var OSTheme = window.matchMedia('(prefers-color-scheme: dark)'); OSTheme.addListener(e => { if (window.localStorage.getItem('Theme_Mode') === 'auto') { ThemeChange('auto'); } }) /** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */ const AutoMode = (htmlElement) => { var date = new Date(); var hours = date.getHours(); if (hours < 18 && hours >= 6) { document.querySelector(\"html\").id = \"Light\"; } else { document.querySelector(\"html\").id = \"Dark\"; } // if (htmlElement.id === \"Light\") { // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = \"Dark\"; // } else { htmlElement.id = \"Light\"; } } let autoTimer; /** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */ const ThemeChange = (theme) => { // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(\"html\"); let themeBtnIcon; try { themeBtnIcon = document.querySelector(\"#start > aside > div > footer > div > a:last-child > i\") } catch { // 元素不存在 } if (theme === 'light' || (theme === 'auto' && !OSTheme.matches)) { htmlElement.id = \"Light\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-sun fa-spin fa-spin-reverse'; } } else { htmlElement.id = \"Dark\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-moon fa-fade'; } } if (theme === 'auto') { if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-circle-half-stroke fa-flip'; } AutoMode(htmlElement); autoTimer = setInterval(function () { AutoMode(htmlElement); }, 1000 * 60 * 30); // 半小时一次 } window.localStorage.setItem('Theme_Mode', theme); } /** * 初始化博客主题 */ switch (window.localStorage.getItem('Theme_Mode')) { case 'light': ThemeChange('light'); break; case 'dark': ThemeChange('dark'); break; default: ThemeChange('auto'); } /** * 切换主题模式 */ // 绑定按钮点击事件 try { document.querySelector(\"#start > aside > div > footer > div > a:last-child\").onclick = () => { if (window.localStorage.getItem('Theme_Mode') === 'auto') { hud.toast('🌞白天模式'); ThemeChange('light'); } else if (window.localStorage.getItem('Theme_Mode') === 'light') { hud.toast('🌙 夜间模式'); ThemeChange('dark'); } else { hud.toast('🌞/🌙 自动模式'); ThemeChange('auto'); } } } catch { // 元素不存在 }"},{"path":"/css/override.css","content":".page-footer .text p { text-align: center; }"},{"title":"Django","path":"/notes/Django.html","content":"pycharm初始化django待编辑……qwq其实写了的，一定是不见了！"},{"title":"PyCharm","path":"/notes/PyCharm.html","content":"PyCharm 快捷键12345678910111213141516复制到粘贴板 : ctrl+c粘贴粘贴板的内容:ctrl+v复制当前这一行: ctrl+d删除当前这一行: ctrl+x打开搜索框(针对当前文件) : ctrl+f随处搜索\t:\tshift+shift注释当前这一行： ctrl+/撤回 : ctrl+z取消撤回 : ctrl+shift+z运行代码 : shift+F10运行当前文档代码:shift+ctrl+F10选择文档运行代码:shift+alt+F10代码格式标准化（对齐）: ctrl+alt+l缩进 :Tab向前取消缩进 :shift+Tab多行代码合并到一行：ctrl + shift + j 软件包厂库使用PyCharm自带的python仓库源，(https://pypi.python.org/simple)速度可能过慢用国内的仓库源可以加快python下载包的速度,国内源如下：阿里云1https://mirrors.aliyun.com/pypi/simple/清华大学1https://pypi.tuna.tsinghua.edu.cn/simple/豆瓣(douban)1https://pypi.douban.com/simple/中国科学技术大学1https://pypi.mirrors.ustc.edu.cn/simple/设置背景和主题设置活动界面文件头注释模板设置步骤：打开PyCharm，选择File –&gt; Settings –&gt; Editor –&gt; Code Style –&gt; File and Code Templates –&gt; Python Script123# @Time : $&#123;DATE&#125; $&#123;TIME&#125;# @Author : BXZDYG# @Software: $&#123;PRODUCT_NAME&#125;效果如下123# @Time : 2023/5/26 12:56# @Author : BXZDYG# @Software: PyCharm123456# -*- coding: utf-8 -*-# @Time : $&#123;DATE&#125; $&#123;TIME&#125;# @Author : BXZDYG# @Software: $&#123;PRODUCT_NAME&#125;# @File : $&#123;NAME&#125;# @Comment :效果如下123456# -*- coding: utf-8 -*-# @Time : 2023/9/8 15:12# @Author : BXZDYG# @Software: PyCharm# @File : t.py# @Comment :12345678910111213141516171819202122232425$ &#123;PROJECT_NAME&#125; - 当前项目的名称。$ &#123;NAME&#125; - 当前文件名。$ &#123;USER&#125; - 当前用户的登录名。$ &#123;DATE&#125; - 当前的系统日期。$ &#123;TIME&#125; - 当前系统时间。$ &#123;YEAR&#125; - 当年。$ &#123;MONTH&#125; - 当月。$ &#123;DAY&#125; - 当月的当天。$ &#123;HOUR&#125; - 目前的小时。$ &#123;MINUTE&#125; - 当前分钟。$ &#123;PRODUCT_NAME&#125; - 将在其中创建文件的IDE的名称。$ &#123;MONTH_NAME_SHORT&#125; - 月份名称的前3个字母。 示例：1月，2月等$ &#123;MONTH_NAME_FULL&#125; - 一个月的全名。 示例：一月，二月等函数的注释这个部分这么规整，不完全是手动敲出来的。只要在函数下面输入三个引号（半角）回车即可。注意类的下面并不可以，因为类并没有参数。预构建共享索引设置PyCharm运行内存Plugins翻译翻译插件第二个建议使用百度翻译，需要去申请一下百度翻译的api百度翻译开放平台 (baidu.com)把相应的信息填进去缩略图CodeGlance Pro效果展示导出设置和恢复默认设置如何打断点先打断点，再重新启动程序git提交作者签名1BXZDYG &lt;1476341845@qq.com&gt;"},{"title":"Node.js常用命令","path":"/notes/Node.js常用命令.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"title":"Linux常用命令","path":"/notes/Linux常用命令.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"path":"/notes/index.html","content":"随记收藏随记 @tianhao_wang@eberhard@eberhard@eberhard@eberhard@vklemen"},{"title":"Visual Studio Code","path":"/notes/Visual Studio Code.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"title":"Vue","path":"/notes/Vue.html","content":"使用vite构建和下载首先创建一个空文件夹1yarn create vite选择构建vue项目，并为其项目根目录命名初始化后，安装相关依赖12yarnnpm installVuex12yarn add vuexnpm install vuex --savevue-router12yarn add vue-routernpm install vue-router --saveaxios12yarn add axiosnpm install axios --savesass12yarn add sass sass-loader -devnpm install sass sass-loader -dev --saveelement-plus12yarn add element-plusnpm install element-plus --save文件资源管理在src下创建views文件夹1mkdir -p src/view在src下创建store&#x2F;index.js文件及其相关文件Linux:1mkdir -p src/store &amp;&amp; touch src/store/index.js &amp;&amp; touch src/store/getters.js &amp;&amp; touch src/store/states.js &amp;&amp; touch src/store/mutations.js &amp;&amp; touch src/store/actions.jswindows:\t123456mkdir src\\store ; cd . &gt; src\\store\\index.js;cd . &gt; src\\store\\getters.js;cd . &gt; src\\store\\states.js;cd . &gt; src\\store\\mutations.js;cd . &gt; src\\store\\actions.js;在src下创建router文件夹Linux:1mkdir -p src/router &amp;&amp; touch src/router/index.jswindows:1mkdir src\\router ; cd . &gt; src\\router\\index.js在src下创建http文件Linux:1mkdir -p src/http &amp;&amp; touch src/http/index.jswindows:1mkdir src\\http ; cd . &gt; src\\http\\index.js在src下创建styles文件夹并且创建variables.scss文件Linux:1mkdir -p src/styles &amp;&amp; touch src/styles/variable.scsswindows:1mkdir src\\styles ; cd . &gt; src\\styles\\variable.scss通用工具函数（utils）和共享代码(shared)文件夹Linux:1mkdir -p src/utils &amp;&amp; mkdir -p src/sharedwindows:1mkdir src\\utils ; mkdir src\\shared挂载和配置vite-vue\\vite.config.js12345678910111213141516171819202122232425262728293031323334353637383940414243import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;const API_SERVER_ADDRESS = &#x27;127.0.0.1:8000&#x27; // 后端地址export default defineConfig(&#123; plugins: [vue()], css: &#123; preprocessorOptions: &#123; scss: &#123; additionalData: `@import &quot;@/styles/variables.scss&quot;;`, // `additionalData` 选项用于指定要在每个 SCSS 文件中自动导入的内容。您可以根据需要修改路径和文件名 &#125;, &#125;, &#125;, resolve: &#123; alias: &#123; &#x27;@&#x27;: &#x27;/src&#x27;, &#125;, &#125;, server: &#123; host: &#x27;0.0.0.0&#x27;, open: false, proxy: &#123; &#x27;/api&#x27;: &#123; target: `http://$&#123;API_SERVER_ADDRESS&#125;/`, changeOrigin: true, // 允许跨域 rewrite: path =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;), // pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;,//将 /api 替换为空字符串 secure: false,//禁用 HTTPS 安全性检查 cookieDomainRewrite: &#x27;&#x27;,//设置为空字符串可以确保代理请求中的 Cookie 在跨域时正确处理 &#125;, &#x27;/socket&#x27;: &#123;//webSocket代理 target: `ws://$&#123;API_SERVER_ADDRESS&#125;/`, ws: true,//开启ws, 如果是http代理此处可以不用设置 changeOrigin: true, // pathRewrite: &#123; &#x27;^/socket&#x27;: &#x27;&#x27; &#125;//奇了怪了，这个也不行 rewrite: path =&gt; path.replace(&#x27;/socket/&#x27;, &#x27;/&#x27;), &#125;, &#125;,&#125;,&#125;)vite-vue\\src\\http\\index.js12345678910111213141516171819202122232425262728293031323334353637import axios from &quot;axios&quot;;const httptool = axios.create(&#123; // baseURL: &#x27;http://127.0.0.1:8000/&#x27;, baseURL: &#x27;/api&#x27;, //请求的公共路径，即在使用的时候会自动加上的前缀，和vite.config.js的匹配使用httptool就直接连接后端如果还是需要别请求的服务器，这里改 timeout: 1000, //最大请求超时时间，请求超过这个时间就报错 headers: &#123; &#x27;X-Custom-Header&#x27;: &#x27;foobar&#x27; &#125; //预设的请求头，一般工作当中这里填写隐藏了客户端身份字段&#125;);// 添加请求拦截器// httptool.interceptors.request.use(function (config) &#123;// // Do something before request is sent// console.log(&#x27;config&#x27;)// console.log(config)// console.log(&quot;Http请求之前&quot;)// return config;// &#125;, function (error) &#123;// // Do something with request error// console.log(&quot;Http请求错误&quot;)// return Promise.reject(error);// &#125;);//// // 添加响应拦截器// httptool.interceptors.response.use(function (response) &#123;// // Any status code that lie within the range of 2xx cause this function to trigger// // Do something with response data// console.log(&#x27;response&#x27;)// console.log(response)// console.log(&quot;Http响应之前&quot;)// return response;// &#125;, function (error) &#123;// // Any status codes that falls outside the range of 2xx cause this function to trigger// // Do something with response error// console.log(&quot;Http响应错误&quot;)// return Promise.reject(error);// &#125;);export default httptool;vite-vue\\src\\router\\index.js1234567891011121314151617181920212223242526272829import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;const routes = [ &#123; path: &quot;/&quot;, component: () =&gt; import(&#x27;@/views/Index/Index.vue&#x27;), name: &quot;Home&quot;, alias: [&#x27;/home&#x27;, &#x27;/index&#x27;, &#x27;/index.html&#x27;],//别名：实现多路径定向到一个组件 meta: &#123; title: &quot;首页&quot; &#125;, // children: [ // &#123; // path: &#x27;info&#x27;, // component: () =&gt; import(&#x27;@/views/xxx.vue&#x27;), // name: &#x27;xxx&#x27;, // meta: &#123;title: &#x27;子路由&#x27;&#125; // &#125;, // ] &#125;]const router = createRouter(&#123; history: createWebHistory(),//路由的模式 不带#号的 routes&#125;)// router.beforeEach(async (to, from, next) =&gt; &#123; // 前置路由// if(to.meta.title)&#123;//判断是否有标题// document.title = to.meta.title// &#125;// return next();// &#125;)export default routervite-vue\\src\\store\\index.js123456789101112import Vuex from &#x27;vuex&#x27;import state from &quot;./state.js&quot;;import mutations from &quot;./mutations.js&quot;;import getters from &quot;./getters.js&quot;;import actions from &quot;./actions.js&quot;;export default new Vuex.Store(&#123; state, mutations, getters, actions&#125;)vite-vue\\src\\store\\state.js1234export default &#123; // user: &#123;&#125;, // 用户 // token:localStorage.token || sessionStorage.token , // 用户Token&#125;vite-vue\\src\\store\\mutations.js12345678export default &#123; // setUser(state, user) &#123; // state.user = user // &#125;, // setToken(state, token) &#123; // state.token = token // &#125;&#125;vite-vue\\src\\store\\actions.js12345678910111213141516import httptool from &quot;../http&quot;;export default &#123; getUserAction(ctx, payload) &#123; const &#123;username, password&#125; = payload; httptool.post(&#x27;/authorizations/&#x27;, &#123; username: username, password: password &#125;, &#123; responseType: &#x27;json&#x27;, // withCredentials: true &#125;).then((res) =&gt; &#123; ctx.commit(&#x27;setUser&#x27;, res.data)//ctx下面存在一个commit方法 &#125;) &#125;,&#125;你可能会多使用modules多套一层，但是自己手动加了最终挂载vite-vue\\src\\main.js123456789101112import &#123; createApp &#125; from &#x27;vue&#x27;// import &#x27;./style.css&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/dist/index.css&#x27;import router from &quot;./router/index.js&quot;;import store from &#x27;./store&#x27;;const app = createApp(App)app.use(ElementPlus)app.use(router)app.use(store)app.mount(&#x27;#app&#x27;)一些准则个人文件资源设计代码风格的一些设定utils 文件夹通常用于存放与功能无关的通用工具函数，比如日期处理、字符串处理、HTTP 请求等。这些函数可以被项目中的多个组件或模块共享使用。shared 文件夹通常用于存放与项目特定功能相关的共享代码，比如自定义的表单验证规则、数据处理逻辑等。这些代码在整个项目中需要重复使用，并且与项目的特定功能紧密相关。assets一般静态资源文件的存储位置static 打包之后assets会被处理到static有压缩的，如果不想被处理，可以先放在这里"},{"title":"Proxy","path":"/wiki/vue/Proxy.html","content":"前后端分离如果涉及到Cookie还是免不了服务代理 Proxy代理配置vite.config.js1234567891011121314151617181920212223export default defineConfig(&#123; plugins: [vue()], resolve: &#123; // dedupe:[&#x27;vue&#x27;], alias: &#123; &#x27;@&#x27;: &#x27;/src&#x27;, &#125;, &#125;, server: &#123; host: &#x27;0.0.0.0&#x27;, open: false, proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://127.0.0.1:8000/&#x27;, changeOrigin: true, // 允许跨域 rewrite: path =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;),//将 /api 替换为空字符串 // 相当于pathRewrite: &#123; &#x27;^/api/&#x27;: &#x27;/&#x27; &#125;, secure: false,//禁用 HTTPS 安全性检查 cookieDomainRewrite: &#x27;&#x27;,//设置为空字符串可以确保代理请求中的 Cookie 在跨域时正确处理 &#125;, &#125;, &#125;,&#125;) 同时在我们之前创建的封装了axios的js文件 123456789import axios from &quot;axios&quot;; //要导入安装的包，则直接填写包名即可// axios.defaults.withCredentials=true;//允许携带cookie跨域//创建实例const httptool = axios.create(&#123; // baseURL: &#x27;http://127.0.0.1:8000/&#x27;, baseURL: &#x27;/api&#x27;,//请求的公共路径，一般填写服务器api地址 timeout: 1000, //最大请求超时时间，请求超过这个时间就报错 headers: &#123;&#x27;X-Custom-Header&#x27;: &#x27;foobar&#x27;&#125; //预设的请求头，一般工作当中这里填写隐藏了客户端身份字段&#125;); 将baseURL修改成下面的，是我们每次通过axios请求的url额外添加/api,以避免和正常的前端路由混淆然后一般的请求url就不必向之前写的那么长，当然，单独设置baseURL也是能够做得到 1234567 httptool.post(&#x27;/authorizations/&#x27;, &#123; username: this.username, password: this.password&#125;, &#123; responseType: &#x27;json&#x27;, // withCredentials: true // 跨域情况可以携带cookie&#125;) 也不必写withCredentials: true"},{"title":"快速开始","path":"/wiki/django/快速开始.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"title":"快速开始","path":"/wiki/mysql/快速开始.html","content":"待编辑……qwq其实写了的，一定是不见了！"},{"title":"Axios","path":"/wiki/vue/Axios.html","content":"axiso 怎么读？ [æk’siəʊ:s] Chinglish:艾克瑟斯&#x2F;艾克丝伊欧姿 释义 abbr. axiology 价值论; axiom 公理; axiological 价值论的（地）; axiologist 价值论者 axio是什么意思_axio的翻译_音标_读音_用法_例句_爱词霸在线词典 (iciba.com) 默认情况下，我们项目中并没有对axios包的支持，所以我们需要下载安装。 在项目根目录中使用npm安装包 12npm install axiosyarn add axios axios&#x2F;axios: Promise based HTTP client for the browser and node.js (github.com) 也可以直接下载min.js版本通过script标签导入 接着在main.js文件中，导入axios并把axios对象挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。 而vue3好像还需要下载一个vue-axios包。 为什么我这么讲呢？因为我并不全局使用啊,封装成一个js文件，每次使用时引用即可。额，我也没有使用过。不过在网上冲浪看到我也提一句吧~ 1npm i axios vue-axios --save 123456789101112131415import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router&#x27;import axios from &#x27;axios&#x27;import VueAxios from &#x27;vue-axios&#x27;const app = createApp(App)app.use(VueAxios, axios).use(router) //然而只是这样全局并不能用;app.provide(&#x27;axios&#x27;, app.config.globalProperties.axios) //这句不写, 组件里无法注入全局axios, 也就无法使用app.mount(&#x27;#app&#x27;) 参考文章：Vue3 中使用 “vue-axios“_vue-axios vue3_白瑕的博客-CSDN博客 或者把axios分装成一个单独的js文件，调用时导入即可 我们在src目录下新建一个http.js 导入axios并通过create方法实例化一个http请求对象，这样我们才能在组件中使用 123456789import axios from &quot;axios&quot;; //要导入安装的包，则直接填写包名即可//创建实例const httptool = axios.create(&#123; baseURL: &#x27;http://127.0.0.1:8000/&#x27;,//请求的公共路径，一般填写服务器api地址 timeout: 1000, //最大请求超时时间，请求超过这个时间就报错 headers: &#123;&#x27;X-Custom-Header&#x27;: &#x27;foobar&#x27;&#125; //预设的请求头，一般工作当中这里填写隐藏了客户端身份字段&#125;);export default httptool; 在组件中使用axios获取数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;import httptool from &quot;@/http&quot;;export default &#123; name: &quot;Register_page&quot;//不能使用Register , methods: &#123; send() &#123; // httptool.get(&quot;请求地址&quot;,) // http://127.0.0.1:8000/sers/gensetview/?id=1 // http://127.0.0.1:8000/填写在http.js中的BaseURL // sers/gensetview/ 填写在axios的http请求方法的第一个参数里面，与BaseURL拼接成一个完整的URL httptool.get(&quot;sers/gensetview/1&quot;, &#123; params: &#123; id: &#x27;1&#x27;, &#125;, //查询字符串 headers: &#123;&quot;Company&quot;: &quot;Vue Company&quot;&#125;,//自定义请求头 &#125;).then(response =&gt; &#123;//回调函数 console.log(response); console.log(response.data);//http响应的请求体数据 console.log(response.data.data);//http响应的请求体数据[.data.data是表示对分提供的data还有一层data,这个data是服务端定义的不是每次都有] &#125; ).catch(error=&gt;&#123;//捕获并打印异常 console.log(error) //可以是本地的错误信息也可以是服务端的错误信息 console.log(error.response) //接收来自服务端的响应错误，如果服务端没有错误，则没有response属性 &#125;) // const &#123; data: res &#125; = this.http.get(&#x27;/sers/gensetview/1&#x27;) // console.log(res) &#125; &#125;, components: &#123; Menu &#125;,&#125;&lt;/script&gt;&lt;template&gt; &lt;h1&gt;这是Register3页面&lt;/h1&gt; &lt;Menu&gt;&lt;/Menu&gt; &lt;button @click=&quot;send&quot;&gt;点击发送请求&lt;/button&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt; 使用的时候，因为本质上来说，我们使用axios发起http请求，本质上是javascript提供的ajax,所以也会收到和普通的javascript同源策略的影响。 解决跨域问题一、后端 官方文档（超详细）：Django-cors-headers ·皮皮 (pypi.org) 1.安装在后端Django项目中安装django-cors-headers 1pip install django-cors-headers 2.注册app12345INSTALLED_APPS = [ ..., &quot;corsheaders&quot;, ...,] 3.添加一个中间件类来侦听响应：123456MIDDLEWARE = [ ..., &quot;corsheaders.middleware.CorsMiddleware&quot;, &quot;django.middleware.common.CommonMiddleware&quot;, ...,] 4.配置CORS_ALLOWED_ORIGINS：指的是允许访问的客户端 123456CORS_ALLOWED_ORIGINS = [ &quot;https://example.com&quot;, &quot;https://sub.example.com&quot;, &quot;http://localhost:8080&quot;, &quot;http://127.0.0.1:9000&quot;,] 可以是本地也可以是其他的url 甚至可以使用通配符*表示同意任何客户端访问，在这里写作&quot;*&quot; 5.配置CORS_ALLOW_HEADERS123CORS_ALLOW_HEADERS =[ &quot;*&quot;] 这里的Post请求的data参数写错了多了一个{}， 其他配置 12345678910111213141516171819202122232425CORS_ALLOW_HEADERS = [ &quot;Accept&quot;, &quot;Accept-Encoding&quot;, &quot;Authorization&quot;, &quot;Content-Type&quot;, &quot;Cookie&quot;, &quot;DNT&quot;, &quot;X-CustomHeader&quot;, &quot;Keep-Alive&quot;, &quot;User-Agent&quot;, &quot;X-Requested-With&quot;,]CORS_ALLOW_METHODS = [ &#x27;DELETE&#x27;, &#x27;GET&#x27;, &#x27;OPTIONS&#x27;, &#x27;PATCH&#x27;, &#x27;POST&#x27;, &#x27;PUT&#x27;,]CORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = [ &quot;http://127.0.0.1:5173&quot;, &quot;http://localhost:5173&quot;,] ##src/View/Robot.vue 1234567891011121314151617181920212223242526272829303132333435363738&lt;script&gt;import httptool from &quot;@/http&quot;;export default &#123; name: &quot;chatRobot&quot;, data() &#123; return &#123; message: &#x27;&#x27; &#125; &#125;, methods: &#123; send() &#123; //发起请求 const data = &#123; &quot;name&quot;: this.message, &quot;age&quot;: &#x27;18&#x27; &#125; httptool.post(&#x27;sers/gensetview/&#x27;, data).then(res =&gt; &#123; console.log(res.data); console.log(res); &#125;).catch(error =&gt; &#123; console.log(error); console.log((error.response)); &#125;) &#125; &#125;&#125;&lt;/script&gt;&lt;template&gt; &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt; &lt;button @click=&quot;send&quot;&gt;发送请求&lt;/button&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt; 数据库中被添加了对应的值 Get请求也没有问题了 常用的axios请求方法在工作中，我们基本都是通过axios来发起http请求来读取或者上传数据到服务端的。 axios针对http即请求提供了多个不同的请求方法。根据是否有请求体，写法上可以分2类： 1234567891011121314151617181920212223242526272829//get、delete、head、options\t用法参数一致axios.get(&#x27;url地址&#x27;,&#123; //url地址如果没有加上协议，则axios会自动根据实例化的baseURL参数自动拼接。 parms:&#123; &quot;&quot;:&quot;&quot;,\t//键值对，查询字符串 地址栏?号后面信息 &#125;, header:&#123; &quot;&quot;:&quot;&quot;,\t//键值对，自定义请求头 &#125;&#125;).then(&#123;response=&gt;&#123; //请求成功时，可以通过response.data来获取服务端的请求体数据 &#125;&#125;).catch(error=&gt;&#123; //异常发生时会自动调用这里的代码，同时第一个参数表示异常对象\t//error.response;/获取来自服务端的异常信息，如果服务端没有异常，则response的值为undefind&#125;)//post,put,patch\t用法参数一致axios.get(&#x27;url地址&#x27;,&#123; &quot;&quot;:&quot;&quot;,\t//键值对，请求体数据 &#125;,&#123; header:&#123; &quot;&quot;:&quot;&quot;,\t//键值对，自定义请求头 &#125;&#125; ).then(&#123;response=&gt;&#123; //请求成功时，可以通过response.data来获取服务端的请求体数据 &#125;&#125;).catch(error=&gt;&#123; //异常发生时会自动调用这里的代码，同时第一个参数表示异常对象\t//error.response;/获取来自服务端的异常信息，如果服务端没有异常，则response的值为undefind&#125;) 12345678910//实例方法axios##request（config）axios##get（url[， config]）axios##delete（url[， config]）axios##head（url[， config]）axios##options（url[， config]）axios##post（url[， data[， config]]）axios##put（url[， data[， config]]）axios##patch（url[， data[， config]]）axios##getUri（[config]） 同源策略以及解决方案所谓的同源策略，实际上是浏览器内部提供的一个为了保护用户在服务端的数据而提供的一种安全机制。同源策略的作用主要是为了限制javascript在非法的客户端下执行的一种安全策略。 所谓的同源，实际上就是把客户端的请求u地址与服务端的请求u地址进行协议，域名P),端口三者的比较，如果三者一致，则表示双方同源，否则任意一个位置不一致则表示不同源。 因为同源策略的问题，所以我们一般情况下只要使用了ajax进行服务端的数据的操作都会面临着同源策略的拦截和影响。一般在开发中这个问题，我们也叫ajax的跨域（跨源）问题。 所谓的跨域实际是就是让我们的javascript在基于与服务端不同源的客户端下正常运行。 1127.0.0.1/:1 Access to XMLHttpRequest at &#x27;http://127.0.0.1:8000/sers/gensetview/&#x27; from origin &#x27;http://127.0.0.1:8080&#x27; has been blocked by CORS policy: Request header field x-custom-header is not allowed by Access-Control-Allow-Headers in preflight response. 在工作中，跨域的解决方案一般无非以下三种： cors方案 ,W3C维护的一个跨资源共享的协议。这个协议要求服务端通过响应头的方式高数服务端是否允许访问 服务端代理（Proxy Server），自己搭建一个可控的代理服务端（自己的服务端项目），因为同源策略只存在于览器，所以我们让客户端直接请求代理服务器，然后代理服务器接收客户端请求以后，执行代码请求目标服务端边获取到客户端需要的数据 jsonp方案，原则上来说是利用HTML中的某些默认能跨域的标签来实现。script,link,src,iframe,… axios拦截器类似中间件或钩子的一个代码段。栏截器的作用：在使用axiosi进行htp请求和响应处理过程中，编写一些公共代码的，公共的代码提示，公共的错误处理甚至包括，页面跳转(动画)，权限判断… 官方示例代码 12345678910111213141516171819// Add a request interceptoraxios.interceptors.request.use(function (config) &#123; // Do something before request is sent return config; &#125;, function (error) &#123; // Do something with request error return Promise.reject(error); &#125;);// Add a response interceptoraxios.interceptors.response.use(function (response) &#123; // Any status code that lie within the range of 2xx cause this function to trigger // Do something with response data return response; &#125;, function (error) &#123; // Any status codes that falls outside the range of 2xx cause this function to trigger // Do something with response error return Promise.reject(error); &#125;); 在我们封装的http组件中继续添加拦截器的部分 12345678910111213141516171819202122232425262728293031323334353637import axios from &quot;axios&quot;; //要导入安装的包，则直接填写包名即可//创建实例const httptool = axios.create(&#123; baseURL: &#x27;http://127.0.0.1:8000/&#x27;,//请求的公共路径，一般填写服务器api地址 timeout: 1000, //最大请求超时时间，请求超过这个时间就报错 headers: &#123;&#x27;X-Custom-Header&#x27;: &#x27;foobar&#x27;&#125; //预设的请求头，一般工作当中这里填写隐藏了客户端身份字段&#125;);// 添加请求拦截器httptool.interceptors.request.use(function (config) &#123; // Do something before request is sent console.log(&#x27;config&#x27;) console.log(config) console.log(&quot;Http请求之前&quot;) return config;&#125;, function (error) &#123; // Do something with request error console.log(&quot;Http请求错误&quot;) return Promise.reject(error);&#125;);// 添加响应拦截器httptool.interceptors.response.use(function (response) &#123; // Any status code that lie within the range of 2xx cause this function to trigger // Do something with response data console.log(&#x27;response&#x27;) console.log(response) console.log(&quot;Http响应之前&quot;) return response;&#125;, function (error) &#123; // Any status codes that falls outside the range of 2xx cause this function to trigger // Do something with response error console.log(&quot;Http响应错误&quot;) return Promise.reject(error);&#125;);export default httptool; Register.vue 123456789101112131415161718192021222324252627282930313233343536373839&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;import httptool from &quot;@/http&quot;;export default &#123; name: &quot;Register_page&quot;,//不能使用Register methods: &#123; send() &#123; httptool.get(&quot;sers/gensetview/1&quot;, &#123; params: &#123; id: &#x27;1&#x27;, &#125;, //查询字符串 headers: &#123;&quot;Company&quot;: &quot;Vue Company&quot;&#125;,//自定义请求头 &#125;).then(response =&gt; &#123;//回调函数 console.log(&quot;返回数据response&quot;); console.log(response); console.log(&quot;返回数据response.data&quot;); console.log(response.data);//http响应的请求体数据 console.log(&quot;返回数据response.data.data&quot;); console.log(response.data.data);//http响应的请求体数据[.data.data是表示对分提供的data还有一层data,这个data是服务端定义的不是每次都有] &#125; ).catch(error=&gt;&#123;//捕获并打印异常 console.log(error) //可以是本地的错误信息也可以是服务端的错误信息 console.log(error.response) //接收来自服务端的响应错误，如果服务端没有错误，则没有response属性 &#125;) &#125; &#125;, components: &#123; Menu &#125;,&#125;&lt;/script&gt;&lt;template&gt; &lt;h1&gt;这是Register3页面&lt;/h1&gt; &lt;Menu&gt;&lt;/Menu&gt; &lt;button @click=&quot;send&quot;&gt;点击发送GET/1请求&lt;/button&gt;&lt;/template&gt; 设置一般的http请求头 auth的token封装如何封装?1234567891011service.interceptors.request.use( (config) =&gt; &#123; const token = useAuthStore().token if (token) config.headers.Authorization = `Bearer $&#123;token&#125;` return config &#125;, (error) =&gt; &#123; return Promise.reject(error.response) &#125;,) 这里的service就是创建的axios实例"},{"title":"Vite项目构建工具","path":"/wiki/vue/Vite项目构建工具.html","content":"vite是用于替代vue-cli而推出的新一代vue项目构建工具。在vue3.0版本中，推荐我们使用vite构建vue项目 工具链 | Vue.js (vuejs.org) 开始 | Vite 官方中文文档 (vitejs.dev) 安装和搭建项目123##安装vite+vue3项目 Viteyarn create vitenpm create vite@latest 如果使用的是vue2进行开发可以使用Vite1的版本 切换到工作目录下 基本上回车后就构建好了，真的是非常快 123√ Project name: ... vite-project√ Select a framework: » Vue√ Select a variant: » JavaScript 将文件使用webstorm打开，安装所需依赖 12yarnnpm install 运行项目 123yarn devyarn run devvite 启动配置 1--port=8000 --host=0.0.0.0 阅览文件发现index.html从public移至根目录，而且还多了一段导入/src/main.js的代码 1&lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt; 项目配置项目根目录下新增了一个vitew.config.js文件，我们可以通过vite配置一些插件和外部依赖 1234567import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// https://vitejs.dev/config/export default defineConfig(&#123; plugins: [vue()],&#125;) 项目打包1vite build 打包成功后会在根目录生成一个dist文件 不管我们使用的是vue-cli还是vite进行项目构建和管理，将来要进行项目的部署迁移到外网服务器时，都是需要使用打包后的项目代码，打包后的代码会进行压缩，并且只需要运行在http服务器下面即可。我们一般在公司里面往往使用nginx来运行打包后的web前端项目。 除了nginx,还可以使用前端开发人员经常用于进行项目测试的Iive-server测试服务器来运行打包后的vue项目代码。 12##npm install -g live-serveryarn add live-server 切换到dist目录下,运行项目,这个文件是将来部署到服务器的源码 1liver-server"},{"title":"Vue对象提供的属性功能","path":"/wiki/vue/Vue对象提供的属性功能.html","content":"过滤器[v3已废弃]过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中 定义过滤器的两种方式 使用Vue.filter()进行全局定义123456Vue.filter(&#x27;RMB1&#x27;,function(v)&#123; if(v===0)&#123; return v &#125; return v+&#x27;元&#x27;\t&#125;) 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;../js/vue.2.7.10.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./filter_price.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;p&gt;价格:&#123;&#123; price |RMB &#125;&#125;&lt;/p&gt;&lt;!--和Django中类似--&gt;&lt;/div&gt;&lt;script&gt; //全局过滤器 // Vue.filter(&quot;RMB&quot;, (data) =&gt; &#123; // return data.toFixed(2)+&#x27;￥&#x27;; // &#125;); var vm = new Vue(&#123; el: &quot;#app&quot;, data: &#123; price: 3.99999 &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123Vue.filter(&quot;RMB&quot;, (data) =&gt; &#123; return data.toFixed(2)+&#x27;￥&#x27;;&#125;); 在vue对象通过filter属性定义(局部过滤器)123456789101112var vm = new Vue(&#123; el: &quot;#app&quot;, data: &#123; price: 3.99999 &#125;, //局部变量 filters: &#123; RMB(data) &#123; return data.toFixed(2) + &#x27;￥&#x27;; &#125; &#125; &#125;) 计算和侦听属性计算属性我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时不易发现数据被调整了，所以vue提供了一个计算属性(computed),可以让我们把调整data数据代码存在该属性中。 #实例货币汇率转换 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; input[type=text] &#123; /*input和[]需要紧挨着*/ width: 60px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;!-- &#123;&#123;a_money&#125;&#125;美元=&#123;&#123; (a_money * rate).toFixed(5) &#125;&#125;人民币--&gt;&lt;!--一般写法--&gt; &#123;&#123;a_money&#125;&#125;美元=&#123;&#123; p_money &#125;&#125;人民币 &lt;input type=&quot;text&quot; v-model=&quot;a_money&quot;&gt;美元&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; a_money: 0, rate: 6.4701 &#125; &#125;, //计算属性，实际上而言，这里的每一个方法最终对html都是一个变量，这个变量在已有的基础上通过计算得到的 computed: &#123; p_money() &#123; return (this.a_money * this.rate).toFixed(5) &#125; &#125;, &#125;).mount(&quot;#box&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可写计算属性&#x2F;&#x2F;对象写法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; input[type=text] &#123; /*input和[]需要紧挨着*/ width: 60px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;input type=&quot;password&quot; v-model=&quot;password&quot;&gt; &lt;p&gt;&#123;&#123;password&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;topassword&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; topassword: &#x27;&#x27;//这里的命名方式不能使用_password，_password可能是私有属性 &#125; &#125;, //对象写法 --计算属性--存储器 computed: &#123; password: &#123; //读取器 get() &#123; //base64加密 return atob(this.topassword) &#125;, //存储器 set(data) &#123; this.topassword = btoa(data) &#125; &#125; &#125;, methods() &#123; &#125;, mounted() &#123; &#125;, &#125;).mount(&quot;#box&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 监听属性侦听属性，可以帮助我们侦听data某个数据的变化,从而做出相应的自定义操作。 侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;button @click=&quot;number--&quot;&gt;-&lt;/button&gt; &lt;input type=&quot;text&quot; v-model=&quot;number&quot;&gt; &lt;button @click=&quot;number++&quot;&gt;+&lt;/button&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; number: 0, max_num: 10 &#125; &#125;, //watch中的所有方法名,就是data或者computer中的变量 watch: &#123; number() &#123;//此处表示number的变化，当number一旦改变，此处自动调用 if (this.number &lt; 0) &#123; this.number = 0 &#125; else if (this.number &gt; this.max_num) &#123; this.number = this.max_num &#125; &#125;, &#125;, methods() &#123; &#125;, mounted() &#123; &#125;, &#125;).mount(&quot;#box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 可以用在用户设置某一个数据置顶的情况(比如购物车默认地址) 1234567891011121314watch:&#123;\t&#x27;default_address_id&#x27;: function () &#123; for (let default_address of this.addresses) &#123; if (this.default_address_id === default_address.id) &#123; // console.log(default_address) let index = this.addresses.indexOf(default_address) if (index !== 0) &#123; this.addresses.splice(index) this.addresses.splice(0, 0, default_address) &#125; &#125; &#125; &#125;&#125; 小案例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; select, option &#123; width: 120px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; 省份:&lt;select v-model=&quot;province&quot;&gt; &lt;option :value=&quot;province.name&quot; v-for=&quot;province in province_list&quot;&gt;&#123;&#123;province.name&#125;&#125;&lt;/option&gt;&lt;/select&gt; 城市:&lt;select v-model=&quot;city&quot;&gt; &lt;option :value=&quot;city.name&quot; v-for=&quot;city in citys&quot;&gt;&#123;&#123;city.name&#125;&#125;&lt;/option&gt;&lt;/select&gt; 地区:&lt;select v-model=&quot;dist&quot;&gt; &lt;option :value=&quot;dist.name&quot; v-for=&quot;dist in dists&quot;&gt;&#123;&#123;dist.name&#125;&#125;&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; dists: [], provinces: [], citys: [], dist: &#x27;&#x27;, province: &#x27;&#x27;, city: &#x27;&#x27;, province_list: [ &#123;&#x27;id&#x27;: 1, &#x27;name&#x27;: &#x27;江西省&#x27;&#125;, &#123;&#x27;id&#x27;: 2, &#x27;name&#x27;: &#x27;浙江省&#x27;&#125;, &#123;&#x27;id&#x27;: 3, &#x27;name&#x27;: &#x27;湖南省&#x27;&#125;, &#123;&#x27;id&#x27;: 4, &#x27;name&#x27;: &#x27;广东省&#x27;&#125;, ], city_list: [ &#123;&#x27;id&#x27;: 5, &#x27;name&#x27;: &#x27;抚州市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 6, &#x27;name&#x27;: &#x27;九江市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 7, &#x27;name&#x27;: &#x27;鹰潭市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 8, &#x27;name&#x27;: &#x27;上饶市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 9, &#x27;name&#x27;: &#x27;南昌市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 10, &#x27;name&#x27;: &#x27;杭州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 11, &#x27;name&#x27;: &#x27;温州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 12, &#x27;name&#x27;: &#x27;宁波市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 13, &#x27;name&#x27;: &#x27;金华市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 14, &#x27;name&#x27;: &#x27;台州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 15, &#x27;name&#x27;: &#x27;长沙市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 16, &#x27;name&#x27;: &#x27;湘潭市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 17, &#x27;name&#x27;: &#x27;广州市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 18, &#x27;name&#x27;: &#x27;深圳市&#x27;, &quot;pid&quot;: 4&#125;, &#123;&#x27;id&#x27;: 19, &#x27;name&#x27;: &#x27;汕头市&#x27;, &quot;pid&quot;: 4&#125;, ], dist_list: [ &#123;&quot;id&quot;: 20, &quot;name&quot;: &#x27;芙蓉区&#x27;, &quot;pid&quot;: 15&#125;, &#123;&quot;id&quot;: 21, &quot;name&quot;: &#x27;天心区&#x27;, &quot;pid&quot;: 15&#125;, &#123;&quot;id&quot;: 22, &quot;name&quot;: &#x27;临川区&#x27;, &quot;pid&quot;: 5&#125;, &#123;&quot;id&quot;: 23, &quot;name&quot;: &#x27;金溪县&#x27;, &quot;pid&quot;: 5&#125;, &#123;&quot;id&quot;: 24, &quot;name&quot;: &#x27;龙湾区&#x27;, &quot;pid&quot;: 11&#125;, &#123;&quot;id&quot;: 25, &quot;name&quot;: &#x27;瓯海区&#x27;, &quot;pid&quot;: 11&#125;, &#123;&quot;id&quot;: 25, &quot;name&quot;: &#x27;越秀区&#x27;, &quot;pid&quot;: 17&#125;, ] &#125; &#125;, //bug当province变更新值的时候，如果之前已经选择了地区,那么地区的数组不会为空--已解决 //当选择江西抚州金溪县后更改为浙江温州瓯海区后再更换为江西抚州金溪县会自动填值--莫名其妙没了 //watch中的所有方法名,就是data或者computer中的变量 watch: &#123; province() &#123;//此处表示number的变化，当number一旦改变，此处自动调用 // this.citys=[]; this.city=&#x27;&#x27;//解决方法 let province_id = -1;//初始化，首个省份id为-1 for (let provice of this.province_list) &#123; //of左边 返回的是循环中的成员 in左边 返回的是循环中的下标 if (provice.name === this.province) &#123; // console.log(key) province_id = provice.id; break;//退出循环 &#125; &#125; this.citys = [] for (let key of this.city_list) &#123; if (key.pid === parseInt(province_id)) &#123; this.citys.push(key);//给数组追加成员; &#125; &#125; &#125;, city() &#123; let city_id = -1;//初始化，首个省份id为-1 for (let city of this.city_list) &#123; //of左边 返回的是循环中的成员 in左边 返回的是循环中的下标 if (city.name === this.city) &#123; city_id = city.id; break;//退出循环 &#125; &#125; this.dists = [] let count = false for (let key of this.dist_list) &#123; if (key.pid === parseInt(city_id)) &#123; this.dists.push(key);//给数组追加成员; count = true &#125; &#125; &#125; &#125;, &#125;).mount(&quot;#box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; vue2.7版本简便写法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.2.7.10.js&quot;&gt;&lt;/script&gt; &lt;style&gt; select, option &#123; width: 120px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;!-- 此处优化只是减少代码量，但是存在地区选择后重新选择身份地区不清空的bug--&gt; 省份:&lt;select v-model=&quot;province_id&quot;&gt; &lt;option :value=&quot;province.id&quot; v-for=&quot;province in province_list&quot;&gt;&#123;&#123;province.name&#125;&#125;&lt;/option&gt;&lt;/select&gt; 城市:&lt;select v-model=&quot;city_id&quot;&gt; &lt;option :value=&quot;city.id&quot; v-if=&quot;city.pid===province_id&quot; v-for=&quot;city in city_list&quot;&gt;&#123;&#123;city.name&#125;&#125;&lt;/option&gt;&lt;/select&gt; 地区:&lt;select v-model=&quot;dist_id&quot;&gt; &lt;option :value=&quot;dist.id&quot; v-if=&quot;dist.pid===city_id&quot; v-for=&quot;dist in dist_list&quot;&gt;&#123;&#123;dist.name&#125;&#125;&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;&lt;script&gt; var vm = new Vue(&#123; el: &quot;#box&quot;, data() &#123; return &#123; dist_id: &#x27;&#x27;, province_id: &#x27;&#x27;, city_id: &#x27;&#x27;, province_list: [ &#123;&#x27;id&#x27;: 1, &#x27;name&#x27;: &#x27;江西省&#x27;&#125;, &#123;&#x27;id&#x27;: 2, &#x27;name&#x27;: &#x27;浙江省&#x27;&#125;, &#123;&#x27;id&#x27;: 3, &#x27;name&#x27;: &#x27;湖南省&#x27;&#125;, &#123;&#x27;id&#x27;: 4, &#x27;name&#x27;: &#x27;广东省&#x27;&#125;, ], city_list: [ &#123;&#x27;id&#x27;: 5, &#x27;name&#x27;: &#x27;抚州市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 6, &#x27;name&#x27;: &#x27;九江市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 7, &#x27;name&#x27;: &#x27;鹰潭市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 8, &#x27;name&#x27;: &#x27;上饶市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 9, &#x27;name&#x27;: &#x27;南昌市&#x27;, &quot;pid&quot;: 1&#125;, &#123;&#x27;id&#x27;: 10, &#x27;name&#x27;: &#x27;杭州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 11, &#x27;name&#x27;: &#x27;温州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 12, &#x27;name&#x27;: &#x27;宁波市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 13, &#x27;name&#x27;: &#x27;金华市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 14, &#x27;name&#x27;: &#x27;台州市&#x27;, &quot;pid&quot;: 2&#125;, &#123;&#x27;id&#x27;: 15, &#x27;name&#x27;: &#x27;长沙市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 16, &#x27;name&#x27;: &#x27;湘潭市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 17, &#x27;name&#x27;: &#x27;广州市&#x27;, &quot;pid&quot;: 3&#125;, &#123;&#x27;id&#x27;: 18, &#x27;name&#x27;: &#x27;深圳市&#x27;, &quot;pid&quot;: 4&#125;, &#123;&#x27;id&#x27;: 19, &#x27;name&#x27;: &#x27;汕头市&#x27;, &quot;pid&quot;: 4&#125;, ], dist_list: [ &#123;&quot;id&quot;: 20, &quot;name&quot;: &#x27;芙蓉区&#x27;, &quot;pid&quot;: 15&#125;, &#123;&quot;id&quot;: 21, &quot;name&quot;: &#x27;天心区&#x27;, &quot;pid&quot;: 15&#125;, &#123;&quot;id&quot;: 22, &quot;name&quot;: &#x27;临川区&#x27;, &quot;pid&quot;: 5&#125;, &#123;&quot;id&quot;: 23, &quot;name&quot;: &#x27;金溪县&#x27;, &quot;pid&quot;: 5&#125;, &#123;&quot;id&quot;: 24, &quot;name&quot;: &#x27;龙湾区&#x27;, &quot;pid&quot;: 11&#125;, &#123;&quot;id&quot;: 25, &quot;name&quot;: &#x27;瓯海区&#x27;, &quot;pid&quot;: 11&#125;, &#123;&quot;id&quot;: 25, &quot;name&quot;: &#x27;越秀区&#x27;, &quot;pid&quot;: 17&#125;, ] &#125; &#125;, &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 修饰符也叫指令修饰符，它的作用就是为了增加或者限制指令本身的工作作用 12345678.stop #阻止事件冒泡，是当前标签事件无效.once #限制触发事件为一次性绑定，一次性后不在生效.prevent\t#阻止标签的默认跳转行为.number #把表单输入的内容转换为数值类型.13.trim #把表单输入的内容左右两边的空格删除.lazy #表单数据同步事件设置为每次更新数据 阻止事件冒泡和刷新页面事件冒泡1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;father&quot;&gt; &lt;p @click=&quot;show2&quot;&gt;一段话 &lt;a href=&quot;&quot; @click.prevent.stop=&quot;show1&quot;&gt;阻止事件冒泡和刷新页面&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;box2&quot;&gt; &lt;div id=&quot;father2&quot;&gt; &lt;p onclick=&quot;show(&#x27;p&#x27;)&quot;&gt;一段话 &lt;a href=&quot;&quot; onclick=&quot;show(&#x27;a&#x27;)&quot;&gt;链接&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;box3&quot;&gt; &lt;div id=&quot;father3&quot;&gt; &lt;p id=&quot;p&quot;&gt;一段话 &lt;a href=&quot;&quot; id=&quot;a&quot;&gt;链接&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; //在js中，针对事件冒泡阶段，如果父元素和子元素，绑定了同类事件，子元素触发了以后，父元素也跟着触发，这就是事件冒泡 //事件冒泡有好有坏，看开发者如何使用 //事件冒泡说的明白一点就是子元素和父元素都有点击事件，触发子元素的点击事件，父元素也跟着触发。但是触发父元素的点击事件，子元素并不会被触发 //好处：方便的实现事件委托，优化js代码 //坏处会造成不必要的事件触发。此时需要我们阻止冒泡事件 vm = Vue.createApp(&#123; data() &#123; return &#123; message: &quot;hello&quot; &#125; &#125;, methods: &#123; show1() &#123; console.log(&#x27;a标签被点击了&#x27;) &#125;, show2() &#123; console.log(&#x27;p标签被点击了&#x27;) &#125; &#125;, &#125;).mount(&quot;#box&quot;) function show(el) &#123; console.log(el + &#x27;被点击了&#x27;) &#125; var box2 = document.getElementById(&quot;box2&quot;); box2.onclick = function (ev) &#123; var e = ev || window.event; preventDef(e); alert(&quot;后续操作&quot;); &#125; function preventDef(e) &#123; //e.preventDefault() : 非 IE 使用 // e.returnValue = false ：IE 使用 //兼容写法 if (e.preventDefault) &#123; e.preventDefault(); &#125; else &#123; window.event.returnValue = false; &#125; &#125; //分隔符 var div = document.querySelector(&quot;#father3&quot;) var a = document.querySelector(&quot;#a&quot;) var p = document.querySelector(&quot;#p&quot;) div.onclick = () =&gt; &#123; show(&#x27;div标签&#x27;) &#125;; a.onclick = (e) =&gt; &#123; console.log(e) //阻止事件冒泡 e.preventDefault() show(&#x27;a&#x27;) &#125;; p.onclick = () =&gt; &#123; show(&#x27;p&#x27;) &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 使用.stop和.prevent 事件委托:优化代码，提高性能，避免卡顿123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;ul class=&quot;father&quot;&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; //批量绑定事件 // var li_list = document.querySelectorAll(&#x27;li&#x27;) // for (li of li_list) &#123; // // console.log(li) // // li.onclick = () =&gt; &#123; // li.onclick = function()&#123; // console.log(this.innerHTML);//显示当前元素内部的HTML // &#125; // &#125; //事件委托:优化代码，提高性能，避免卡顿 var ul = document.querySelector(&#x27;ul&#x27;) ul.onclick = (e) =&gt; &#123; console.log(e.target);//本质//获取触发事件的目标元素 console.log(e.target.innerHTML);//本质//获取触发事件的目标元素 &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 综合案例-todolist123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; .list_con &#123; width: 600px; margin: 50px auto 0; &#125; .inputtxt &#123; width: 550px; height: 30px; border: 1px solid #ccc; padding: 0px; text-indent: 10px; &#125; .inputbtn &#123; width: 40px; height: 30px; border: 1px solid #ccc; padding: 0px; &#125; .list &#123; margin: 0; padding: 0; list-style: none; margin-top: 20px; &#125; .list li &#123; height: 40px; line-height: 40px; &#125; .list li span &#123; float: left; &#125; .list li a &#123; float: right; text-decoration: none; margin: 0 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot; class=&quot;list_con&quot;&gt; &lt;h2&gt;To do list&lt;/h2&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;txt1&quot; class=&quot;inputtxt&quot; v-model=&quot;addtxt&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;增加&quot; id=&quot;btn1&quot; class=&quot;inputbtn&quot; @click=&quot;addTask&quot;&gt; &lt;ul id=&quot;list&quot; class=&quot;list&quot;&gt; &lt;!--javascritp:; #阻止a标签跳转--&gt; &lt;li v-for=&quot;(task,index) in task_lsit&quot;&gt; &lt;span&gt;&#123;&#123;task&#125;&#125;&lt;/span&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;up&quot; @click=&quot;upTask(index)&quot;&gt; ↑ &lt;/a&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;down&quot; @click=&quot;downTask(index)&quot;&gt; ↓ &lt;/a&gt; &lt;a href=&quot;javascript:;&quot; class=&quot;del&quot; @click=&quot;removeTask(index)&quot;&gt; 删除 &lt;/a&gt;&lt;!--通过下标删除数组中对应的成员--&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; addtxt: &#x27;&#x27;, task_lsit: [ &#x27;学习html&#x27;, &#x27;学习css&#x27;, &#x27;学习javascript&#x27;, ] &#125; &#125;, methods: &#123; addTask() &#123; // this.task_lsit.unshift(this.addtxt); this.task_lsit.push(this.addtxt); //unshift是数组首位添加一个成员 //push是数组末尾添加一个成员 //shift是删除数组首位成员 this.addtxt = &#x27;&#x27;//添加成功后刷新输入框内容 &#125;, removeTask(index) &#123; // delete this.task_lsit[index]//这样只是将数组内容删除了并且补充为empty，对应li标签并未被删除， // 并不是真的删除相当于this.task_lsit[index] = &#x27;&#x27; //使用.splice(起始下标,成员个数,...插入成员1,插入成员2,插入成员3)//也可以用来插入成员 this.task_lsit.splice(index, 1)//处理数组的高阶函数 &#125;, //==表示判断两边数据的值是否相等，===表示判读左右两边数据的值和数据类型是否一致 upTask(index) &#123; if ((index - 1) &gt;= 0) &#123; let task = this.task_lsit.splice(index, 1)[0]//[&#x27;学习css&#x27;][0] // console.log(task) this.task_lsit.splice(index - 1, 0, task) &#125; &#125;, downTask(index) &#123; if ((index + 1) &lt;= this.task_lsit.length) &#123; let task = this.task_lsit.splice(index, 1)[0]//[&#x27;学习css&#x27;][0] // console.log(task) this.task_lsit.splice(index + 1, 0, task) &#125; &#125; &#125;, mounted() &#123; &#125;, &#125;).mount(&quot;#box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"},{"title":"Vue快速入门","path":"/wiki/vue/Vue快速入门.html","content":"vue2教程: 2-2 vue初体验_哔哩哔哩_bilibili vue3教程: 2-vue的开发调试工具vue-devtool插件安装_哔哩哔哩_bilibili 这里有网友发布的vue2和vue3的学习教程，主要是那个路飞学城的老师讲的课，没错就是那个python之父而本笔记主要是vue3的学习过程,个人喜欢配上大量示例图，希望你能够有所收获。好了 就这么开始学习之旅吧！从此刻开始我又多了一项好像学过但是想不起来，想起来又不会用的技术 那，什么是vue呢？ vue.js是目前前端web开发最流行的工具库（三大前端开发框架之一），由尤雨溪2014年2月发布的。 另外几个常见的工具库:react.js(企业级开发用的比较多)&#x2F;angular.js&#x2F;jQuery 官方网站： ​\t中文：Vue.js - 渐进式 JavaScript 框架 | Vue.js (vuejs.org) ​\t英文：Vue.js - The Progressive JavaScript Framework | Vue.js (vuejs.org) 可能你之前学过JQuery,你可能疑问，JQuery不也是挺好用的吗？系统的学习后，你会发现Vue是相当好用 JQuery作为老牌的前端大哥，已经走到了风口的浪尖上 JQuery和vue的定位是不一样的 121. JQuery的定位是获取元素和完成特效。2. vue的定位是方便操作和控制数据和完成特效。 安装Vue下载js文件 基于脚本导入(适用于前后端不分离)​\t下载vue.js文件，通过script标签 github地址:Release v3.3.4 · vuejs&#x2F;core (github.com)你可以通过cdn下载一个min的版本，我就随便给一个链接 https://unpkg.com/vue@3.2.36/dist/vue.global.js 当然你也可以通过npm包管理器下载vue整个模块。当前我们vue其他的功能都没有学习使用的需求，只要得到vue.min.js就行 在nodel_modules中的vue中的dist中的 Vue 获得 vue.min.js 文件_卡尔特斯的博客-CSDN博客 vue.global.js&#x3D;vue.js 基于项目构建工具（适用于前后端分离​\t安装项目构建工具，自动构建成一个独立的项目​\t目前官方推荐的项目构建工具构建项目:vue-CLI,vite 我们先通过vue.js的第一种那个方式完成学习，这种使用方式类似于JQuery,开发中可以使用开发版本vue-x.x.x.js,产品上线要换成vue.min.js 当然这不是我说的，因为我个人还没有上线什么vue开发的项目，不过还是有机会的 Vue简单尝试通过script导入vue后，当我们给Vue对象赋值时 123456789&lt;script&gt; var vm=html.createApp(&#123; data() &#123; return &#123; message: &quot;这就是数据，一般来自服务端，客户端通过Ajax来请求的&quot;//通过正则来匹配 &#125; &#125; &#125;).mount(&#x27;##app&#x27;)//控制对应的id元素&lt;/script&gt; 可以在前端的控制台上获取和修改数据 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;!-- &#123;&#123;message&#125;&#125; 表示把vue对象的data属性中对应的数据输出到页面 --&gt; &lt;!-- &#123;&#123;在通过双标签显示数据&#125;&#125;--&gt; &lt;p&gt;hello vue!&lt;/p&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; is_delete &#125;&#125;&lt;/p&gt; &lt;!-- 下面nodata没有数据，就是因为在data中没有设置预设值--&gt; &lt;p&gt;&#123;&#123; nodata &#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script&gt; //vue的代码始于初始化一个bue对象，这给对象的名字建议叫vm,通过Vue.createApp // 所以每次操作从声明一个vue变量开始 var vm = Vue.createApp(&#123; data() &#123; //data是将要展示到HTML标签中的数据。一般会在这里设置vue变量,并给变量一个默认值 return &#123; message: &quot;这就是数据，一般来自服务端，客户端通过Ajax来请求的&quot;,//通过正则来匹配 num: 100, is_delete: true &#125; &#125; &#125;).mount(&#x27;##app&#x27;)//控制对应的id元素 // mount:设置vue可操作的html内容范围,值一般是css的id选择去，个人感觉像是xpath语法 //data:保存vue.js显示到前端html页面数据&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果如下 vue的浏览器开发工具（扩展)扩展链接 Installation | Vue Devtools (vuejs.org) 很酷炫，也很有用，在检查数据的时候就知道了 Vue的M-V-VM思想MVVM是Model-View-ViewModel的缩写，它是一种基于前端开发的架构模式。是一种代码分工 flowchart LR Model-->ModelView ModelViewView ModelView-->Model Model指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。 view指代的就是HTML文档中的DOM元素。负责视图处理 ViewModel指代的是vue.js中我们编写的代码时的vm对象，他是vue.js的核心,负责链接View和Model,保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中就是vm对象自动完成。vm对象会时刻的监控View和Model的编号，并保持双方数据的一致性！！！这个特性也被称为双向绑定 编写代码，让我们更清晰的了解MVVM 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;!-- &#123;&#123;message&#125;&#125; 表示把vue对象的data属性中对应的数据输出到页面 --&gt; &lt;!-- &#123;&#123;在通过双标签显示数据&#125;&#125;--&gt; &lt;p&gt;hello vue!&lt;/p&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123; is_delete &#125;&#125;&lt;/p&gt; &lt;!-- 下面nodata没有数据，就是因为在data中没有设置预设值--&gt; &lt;p&gt;&#123;&#123; nodata &#125;&#125;&lt;/p&gt;&lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;--&gt; &lt;input type=&quot;text&quot; v-model.number=&quot;num&quot;&gt;&lt;!-- 当手动往input输入值后就变成了字符串拼接每次在末尾添上一个1--&gt;&lt;/div&gt;&lt;script&gt; //vue的代码始于初始化一个bue对象，这给对象的名字建议叫vm,通过Vue.createApp // 所以每次操作从声明一个vue变量开始 var vm = Vue.createApp(&#123; data() &#123; //data是将要展示到HTML标签中的数据。一般会在这里设置vue变量,并给变量一个默认值 //data中声明的所有数据都会被vm对象进行遍历，赋值给vm对象作为属性。 //我们要访问或操作data里面的数据直接通过this来访问 return &#123; message: &quot;这就是数据，一般来自服务端，客户端通过Ajax来请求的&quot;,//通过正则来匹配 num: 100, is_delete: true &#125; &#125;, mounted() &#123; //会在vue加载html完成后自动执行这一部分 //js原生的定时函数，两个参数，参数一是匿名函数或者函数名，参数二是时间 setInterval(() =&gt; &#123; this.num += 1;//this表示vm对象，相当于python里的self &#125;, 1000) &#125;, &#125;).mount(&#x27;##app&#x27;)//控制对应的id元素 // mount:设置vue可操作的html内容范围,值一般是css的id选择去，个人感觉像是xpath语法 //data:保存vue.js显示到前端html页面数据&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 12345vm.$el//可控制范围 ##app的内部 vm.$el.parentElement//可控制范围vm.$data //vm对象中要显示在页面中的数据对象vm.$data.message//访问data里面的数据vm.message//message就是data里面声明的对象，可以使用vm.变量名显示其他数据,message只是示例，在vm对象的内部可以直接通过this,num获取数据 1234567891011121314151617181920211.如果要输出data里面的数据作为普通双标签的内容，需使用&#123;&#123; &#125;&#125;\t用法: vue对象的data属性， data()&#123; return&#123; name&quot;小明&quot; &#125; &#125; 标签元素: &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;2.如果要输出data里面的数据作为表单元素的内容，需使用vue.js提供的元素属性vue-model vue对象的data属性， data()&#123; return&#123; name&quot;小明&quot; &#125; &#125; 表单元素: &lt;input v-model=&quot;name&quot;&gt;\t使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面凡是使用这个数据都会发生变化。\t用户修改了的数据，会变成字符串格式！ 显示数据 在双标签中显示纯文本数据一般通过&#123;&#123; &#125;&#125;来完成，双括号中还可以支持js表达式和符合js语法的代码，列如函数调用 在表单输入框中显示数据要使用v-model来完成数据的显示 如果双标签的内容要显示id数据包含html代码，则使用v-html来完成 12345678910111213141516vue对象的data属性， data()&#123; return&#123; &quot;message&quot;: &#x27;&lt;img src=&quot;./static/img-2.jpg&quot; &gt;&#x27;, &#125; &#125; 标签元素: &lt;!-- &quot;message&quot;:&#x27;&lt;img src=&quot;./static/img-2.jpg&quot; &gt;&#x27; 的结果相当于↓ 实体化了，而不是标签 --&gt; &lt;p&gt;&amp;lt;img src=&amp;quot;./static/img-2.jpg&amp;quot;&amp;gt;&lt;/p&gt; &lt;!-- 应当--&gt; &lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt; v-html必须在html标签里面作为属性写出来，而且只能写在普通双标签中，单标签元素或是表单元素都不行 小作业12345678910111213141516171819202122232425262728293031323334&#123; goods: [ &#123; &quot;name&quot;: &quot;python入门&quot;, &#x27;price&#x27;: 150, &#x27;page&#x27;: 200 &#125;, &#123; &quot;name&quot;: &quot;python进阶&quot;, &#x27;price&#x27;: 100, &#x27;page&#x27;: 300 &#125;, &#123; &quot;name&quot;: &quot;python高级&quot;, &#x27;price&#x27;: 500, &#x27;page&#x27;: 200 &#125;, &#123; &quot;name&quot;: &quot;python研究&quot;, &#x27;price&#x27;: 300, &#x27;page&#x27;: 200 &#125;, &#123; &quot;name&quot;: &quot;python放弃&quot;, &#x27;price&#x27;: 60, &#x27;page&#x27;: 290 &#125;, &#123; &quot;name&quot;: &quot;python入土&quot;, &#x27;price&#x27;: 555, &#x27;page&#x27;: 1 &#125; ]&#125; 1.把上面的数据采用table的形式输出到页面2.价格大于150的单元格设置橙色背景[orange]3.page页数大于200，字体改为红色，否则为黑色 警告此处为个人本题答案仅供参考，非唯一答案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; table, tr, th, td &#123; text-align: center; border-collapse: collapse; /*合并边框*/ border: 1px solid red; &#125; th, td &#123; width: 120px; height: 32px; line-height: 32px; vertical-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;书名&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;页数&lt;/th&gt; &lt;/tr&gt; &lt;tr v-for=&quot;(book,key) in goods&quot;&gt; &lt;td&gt;##&#123;&#123;key + 1&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;book.name&#125;&#125;&lt;/td&gt; &lt;td v-if=&quot;book.price&gt;150&quot; :style=&quot;&#123;backgroundColor: &#x27;orange&#x27;&#125;&quot;&gt;&#123;&#123;book.price&#125;&#125;&lt;/td&gt; &lt;td v-else &gt;&#123;&#123;book.price&#125;&#125;&lt;/td&gt; &lt;td v-if=&quot;book.page&gt;200&quot; :style=&quot;&#123;color:&#x27;red&#x27;&#125;&quot;&gt;&#123;&#123;book.page&#125;&#125;&lt;/td&gt; &lt;td v-else :style=&quot;&#123;color:&#x27;black&#x27;&#125;&quot;&gt;&#123;&#123;book.page&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp( &#123; data() &#123; return &#123; goods: [ &#123;&quot;name&quot;: &quot;python入门&quot;, &#x27;price&#x27;: 150, &#x27;page&#x27;: 200&#125;, &#123;&quot;name&quot;: &quot;python进阶&quot;, &#x27;price&#x27;: 100, &#x27;page&#x27;: 300&#125;, &#123;&quot;name&quot;: &quot;python高级&quot;, &#x27;price&#x27;: 500, &#x27;page&#x27;: 200&#125;, &#123;&quot;name&quot;: &quot;python研究&quot;, &#x27;price&#x27;: 300, &#x27;page&#x27;: 200&#125;, &#123;&quot;name&quot;: &quot;python放弃&quot;, &#x27;price&#x27;: 60, &#x27;page&#x27;: 290&#125;, &#123;&quot;name&quot;: &quot;python入土&quot;, &#x27;price&#x27;: 555, &#x27;page&#x27;: 1&#125;, ] &#125; &#125; &#125; ).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"},{"title":"Vue组件化开发基础和浅入","path":"/wiki/vue/Vue组件化开发基础和浅入.html","content":"脚本化组件[component]组件(Component)是自定义封装代码的功能。在前端开发的过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同意的功能。 而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css生命功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为”组件”。 所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。 这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。 vue的组件有两种：默认组件[全局组件]和单文件组件。组件名：小写加横杠 默认组件全局注册123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;../js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;header-nav&gt;&lt;/header-nav&gt;&lt;!--vm对象外的，即使使用组件名的标签也无法调用组件--&gt;&lt;div id=&quot;box&quot;&gt; &lt;header-nav&gt;&lt;/header-nav&gt; &lt;header-nav&gt;&lt;/header-nav&gt; &lt;!-- &lt;ul&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;详情&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;/ul&gt;--&gt;&lt;/div&gt;&lt;script&gt; //组件声明 //组件使用/其实和过滤器的使用方式很相似 // Vue.component(&quot;组件名&quot;, &#123; // data() &#123; // &#125;,//组件内部的数据 // methods: &#123;&#125;,//组件内部操作方法 // template:&quot;&quot;,//组件内部的html代码 // &#125;); //一般使用的方法组件名作为标签使用，所以组件名一般以两个单词左右 //组件内部的数据是隔离开来的是互相独立的，在操作过程中，又属于当前组件的vm对象进行控制 //以往我们学习过的所有代码都可以在组件中使用 const headerNav = &#123;//导航栏 data() &#123; return &#123; nav_list: [&#x27;首页&#x27;, &#x27;注册&#x27;, &#x27;详情&#x27;, &#x27;列表&#x27;], num: 0//组件与组件之间的数据是隔离开来的 &#125; &#125;,//组件内部的数据 methods: &#123; show(nav) &#123; alert(nav) &#125; &#125;,//组件内部操作方法 template: ` &lt;ul&gt; &lt;li v-for=&quot;nav in nav_list&quot;&gt;&lt;a href=&quot;&quot; @click.prevent=&quot;show(nav)&quot;&gt;&#123;&#123; nav &#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;button @click=&quot;num++&quot;&gt;+&lt;/button&gt; &lt;input type=&quot;text&quot; v-model.number=&quot;num&quot;&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;详情&lt;/a&gt;&lt;/li&gt;--&gt; &lt;!-- &lt;li&gt;&lt;a href=&quot;&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;--&gt; &lt;/ul&gt;`,//组件内部的html代码 &#125;; //设计模式：链式调用：方法以当前对象作为返回值 const vm = Vue.createApp(&#123; data() &#123; return &#123;&#125; &#125;, methods: &#123;&#125;, mounted() &#123; &#125;, // &#125;); // vm.component(&#x27;header-nav&#x27;, headerNav); // vm.mount(&quot;##box&quot;); &#125;).component(&#x27;header-nav&#x27;, headerNav).mount(&quot;##box&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 局部注册123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;../js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;header-nav&gt;&lt;/header-nav&gt;&lt;!--vm对象外的，即使使用组件名的标签也无法调用组件--&gt;&lt;div id=&quot;box&quot;&gt; &lt;header-nav&gt;&lt;/header-nav&gt; &lt;header-nav&gt;&lt;/header-nav&gt; &lt;headerNav&gt;&lt;/headerNav&gt; &lt;!-- 无用 --&gt;&lt;/div&gt;&lt;script&gt; const headerNav = &#123;//导航栏 data() &#123; return &#123; nav_list: [&#x27;首页&#x27;, &#x27;注册&#x27;, &#x27;详情&#x27;, &#x27;列表&#x27;], num: 0//组件与组件之间的数据是隔离开来的 &#125; &#125;,//组件内部的数据 methods: &#123; show(nav) &#123; alert(nav) &#125; &#125;,//组件内部操作方法 template: ` &lt;ul&gt; &lt;li v-for=&quot;nav in nav_list&quot;&gt;&lt;a href=&quot;&quot; @click.prevent=&quot;show(nav)&quot;&gt;&#123;&#123; nav &#125;&#125;&lt;/a&gt;&lt;/li&gt; &lt;button @click=&quot;num++&quot;&gt;+&lt;/button&gt; &lt;input type=&quot;text&quot; v-model.number=&quot;num&quot;&gt; &lt;/ul&gt;`,//组件内部的html代码 &#125;; //设计模式：链式调用：方法以当前对象作为返回值 const vm = Vue.createApp(&#123; data() &#123; return &#123;&#125; &#125;, methods: &#123;&#125;, mounted() &#123; &#125;, component: &#123; // &#x27;header-nav&#x27;:headerNav,//写法一 // &#x27;headerNav&#x27;:headerNav,//写法二:js中属性值和属性名都是同一个变量名，则可以简写成一句话,而且如果叫做会自动headerNav转换为header-nav headerNav//相当于headerNav:headerNav//调用标签名还是&lt;header-nav&gt; &#125; // &#125;); // vm.component(&#x27;header-nav&#x27;, headerNav); // vm.mount(&quot;##box&quot;); &#125;).mount(&quot;##box&quot;); // &#125;).component(&#x27;header-nav&#x27;, headerNav).mount(&quot;##box&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"},{"title":"Vue对象的生命周期","path":"/wiki/vue/Vue对象的生命周期.html","content":"Vue对象的生命周期/vuelifecycle.png 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &#123;&#123;message&#125;&#125; &lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; message: &quot;hello&quot; &#125; &#125;, beforeCreate() &#123; //data初始化之前 console.log(&#x27;data初始化之前:beforeCreate:&#x27; + this.message);//undefined console.log(this.$data);//&#123;&#125;//空对象，可以复制一下，复制的内容是&#123;&#125; console.log(this.$el);//null &#125;, created() &#123; //data数据已经被注入到vm对象 //工作中,往往在这个created方法中使用ajax请求获取服务端的数据，并加载到data属性中。 console.log(&#x27;data数据已经被注入到vm对象:created:&#x27; + this.message);//hello console.log(this.$data);//&#123;&quot;message&quot;: &quot;hello&quot;&#125; console.log(this.$el);//null &#125;, beforeMount() &#123; // data数据渲染到html模板之前 console.log(&#x27;data数据渲染到html模板之前&#x27;); console.log(this.$el)//null &#125;, mounted() &#123; // data数据渲染到html模板之后 console.log(&#x27;data数据渲染到html模板之后&#x27;);//工作中，一般在这里编写页面初始化操作代码，在用户看到页面之前，修改html代码就要在这里编写 console.log(this.$el);//&quot;hello&quot;--&gt;##text console.log(this.$el.parentElement);//获取这个dom标签对象 &#125;, beforeUpdate() &#123; //data数据更新之前的钩子 console.log(&#x27;data数据更新之前的钩子&#x27;);//工作中这里编写就是判断是否有效 console.log(this.message);//data在此次数据被改动,此处为获取当前的数据 console.log(this.$data.message);//data在次数据被改动,此处为获取当前的数据 console.log(this.$el.parentElement.innerHTML);//此处为获取当前对象的文本内容，是更新之前的数据，还没有同步到Html中 &#125;, updated() &#123; //data数据更新之后的钩子 console.log(&#x27;data数据更新之后的钩子&#x27;);//工作中这里编写就是数据改动以后，同步保存到本地，或者ajax请求到服务端,保存到数据库代码 console.log(this.message);//data数据已被改动,此处为获取当前的数据，即改动后的数据 console.log(this.$data.message);// console.log(this.$el.parentElement.innerHTML);//此处为获取当前对象的文本内容，是更新之前的数据，还没有同步到Html中 &#125;, &#125;).mount(&quot;#box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结: 123在vue使用的过程中,如果要初始化操作，把初始化操作的代码放在mounted中执行mounted阶段就是vm已经把data数据实现到页面以后。一般页面初始化使用。列如，用户访问页面加载成功以后，就要执行ajax请求。另一个就是created,这个阶段就是在vue对象创建以后，把ajax请求后端数据的代码放入created"},{"title":"Vue常用指令","path":"/wiki/vue/Vue常用指令.html","content":"指令(Directives)是带有”v-“前缀的特殊属性。每一个指令在vue中都有固定的作用。 在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。 指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制内容或属性。 因为vue的历史版本原因，所以一部分指令都有两种写法: left 第一种写法1234v-html=&quot;html代码&quot; &#123;&#123; 普通文本 &#125;&#125;:属性名=&quot;属性值&quot; @事件名=&quot;js代码&quot; right 第二种写法1234无v-text=&quot;普通文本&quot; v-bind:属性名=&quot;属性值&quot; v-on:事件名 官方文档:内置指令 | Vue.js (vuejs.org) vue的指令无就是针对html文档中的属性,标签文本,事件,样式和数据进行操作和页面控制 属性操作格式: 1&lt;标签名 : 标签属性=&quot;data属性&quot;&gt;&lt;/标签名&gt; 示例 ##通过计时器实现图片切换 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; .btn &#123; width: 500px; height: 100%; border: 1px solid red; padding: 3px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot; class=&quot;btn&quot;&gt; &lt;img :src=&quot;img_url&quot; :alt=&quot;img_alt&quot;&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; img_alt: &quot;这是一张图片&quot;, img_url: &quot;./static/register_font.png&quot;, &#125; &#125;, mounted() &#123; setInterval(() =&gt; &#123; if (this.img_url === &quot;./static/register_font.png&quot;) &#123; this.img_url = &quot;./static/success_font.png&quot; &#125; else &#123; this.img_url = &quot;./static/register_font.png&quot; &#125; &#125;, 1000) &#125; &#125;).mount(&quot;##box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ##实现密显示和隐藏 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /*ctrl + shift + j 多行代码合并到一行*/ .pwd &#123; width: 140px; margin-right: 6px; &#125; .btn &#123; cursor: pointer; user-select: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot; class=&quot;btn&quot;&gt; &lt;label for=&quot;user&quot;&gt;账号:&lt;input type=&quot;text&quot; v-model=&quot;user&quot; id=&quot;user&quot;&gt;&lt;/label&gt; &lt;br&gt; &lt;label for=&quot;password&quot;&gt;密码:&lt;input :type=&quot;pwd_type&quot; v-model=&quot;password&quot; id=&quot;password&quot; class=&quot;pwd&quot; @click=&quot;pwd_type=(pwd_type===&#x27;password&#x27;?text:&#x27;password&#x27;)&quot;&gt;&lt;span&gt; &lt;!-- 这里的v-model是什么意思为什么要在这里写, 而且这个写的是否显示后，再次点击输入框会变得只能在第一个位置输入, 虽然可以通过左右键来调整--&gt; &lt;!--这里的v-model可以时后台获取对应的文本内容--&gt; class=&quot;btn&quot;&gt;&amp;##128064;&lt;/span&gt;&lt;/label&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; pwd_type: &quot;password&quot; &#125; &#125;, mounted() &#123; &#125; &#125;).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 表单输入绑定 | Vue.js (vuejs.org) 123456789101112131415161718&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;const checkedNames = ref([])&lt;/script&gt;&lt;template&gt; &lt;div&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/div&gt; &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot; /&gt; &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot; /&gt; &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot; /&gt; &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;&lt;/template&gt; 事件绑定有两种事件操作的写法，@事件名 和 v-on:事件名 12&lt;button v-on:click=&quot;num++&quot;&gt;按钮1&lt;/button&gt; &lt;!--常用写法--&gt;&lt;button @click=&quot;num+=5&quot;&gt;按钮2&lt;/button&gt; 说明: 1234567891.使用@事件名来进行事件的绑定语法:&lt;h1 @click=&quot;num++&quot;&gt;&#123;&#123;num&#125;&#125;&lt;/num&gt;2.绑定的事件的事件名,全部都是js的事件名:\t@submit --&gt;\tonsubmit\t表单提交事件\t@focus --&gt;\tonfoucs 获取焦点事件\t@blur --&gt;\tonblur 失去焦点事件\t@click --&gt;\tonclick 点击事件\t... 示例： ##点击事件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;!-- 写法一--&gt; &lt;button @click=&quot;num1++&quot;&gt;点赞1(&#123;&#123;num1&#125;&#125;)&lt;/button&gt; &lt;br&gt; &lt;!-- 写法二--&gt; &lt;button @click=&quot;dianzan1&quot;&gt;点赞2(&#123;&#123;num2&#125;&#125;)&lt;/button&gt; &lt;br&gt; &lt;!-- 写法三--&gt; &lt;button @click=&quot;dianzan2&quot;&gt;点赞3(&#123;&#123;num3&#125;&#125;)&lt;/button&gt; &lt;!-- @click的值既可以是js代码，也可以是methods中定义的方法，如dianzan2()括号内无需参数，则可以省略 --&gt; &lt;button @click=&quot;dianzan3(2)&quot;&gt;点赞4(&#123;&#123;num4&#125;&#125;)&lt;/button&gt; &lt;!-- 含参↑--&gt; &lt;br&gt; &lt;!-- 写法四--&gt; &lt;!-- .once修饰符表示只执行一次--&gt; &lt;button @click.once=&quot;dianzan1&quot;&gt;点赞2(&#123;&#123;num2&#125;&#125;)&lt;/button&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp( &#123; data() &#123; return &#123; num1: 0, num2: 0, num3: 0, num4: 0, // dianzan1: 0 // methods和data中的变量名不能一样否则出错，错误信息如下 // vue.3.3.4.js:1516 [Vue warn]: Data property &quot;dianzan1&quot; is already defined in Methods. // at &lt;App&gt; &#125; &#125;, methods: &#123; dianzan1() &#123; this.num2 += 1 &#125;, dianzan2() &#123; if (this.num3 &lt; 1) &#123; this.num3 += 1 &#125; &#125;, dianzan3(n) &#123; this.num4 += n &#125; &#125; &#125; ).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ##完成商城购物车中的商品增加减少数量 步骤： 给vue对象添加操作数据的方法 在标签中使用指令调用操作数据的方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; table, tr, td &#123; border: 1px solid red; border-collapse: collapse; /* 合并边框 */ &#125; td &#123; width: 120px; text-align: center; /*文本居中*/ vertical-align: center; /*文本垂直居中*/ &#125; .btn &#123; width: 40px; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;td&gt;商品库存&lt;/td&gt; &lt;td&gt;购买数量&lt;/td&gt; &lt;td&gt;商品小计&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;python入门&lt;/td&gt; &lt;td&gt;&#123;&#123;good_price&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;has_num&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;button @click=&quot;num--&quot;&gt;-&lt;/button&gt; &lt;input class=&quot;btn&quot; type=&quot;text&quot; v-model=&quot;num&quot;&gt; &lt;button @click=&quot;num++&quot;&gt;+&lt;/button&gt; &lt;/td&gt; &lt;td&gt;&#123;&#123;(num * good_price).toFixed(2)&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;python爬虫&lt;/td&gt; &lt;td&gt;&#123;&#123;good_price&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;has_num&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;button @click=&quot;sub_num&quot;&gt;-&lt;/button&gt; &lt;input class=&quot;btn&quot; type=&quot;text&quot; v-model=&quot;num&quot;&gt; &lt;button @click=&quot;add_num&quot;&gt;+&lt;/button&gt; &lt;/td&gt; &lt;td&gt;&#123;&#123;(num * good_price).toFixed(2)&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;django&lt;/td&gt; &lt;td&gt;30000&lt;/td&gt; &lt;td&gt;&#123;&#123;has_num&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;button @click=&quot;num--&quot;&gt;-&lt;/button&gt; &lt;input class=&quot;btn&quot; type=&quot;text&quot; v-model=&quot;num&quot;&gt; &lt;button @click=&quot;num++&quot;&gt;+&lt;/button&gt; &lt;/td&gt; &lt;!-- 保留数值的两位小数--&gt; &lt;td&gt;&#123;&#123;(num * good_price).toFixed(2)&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp( &#123; data() &#123; return &#123; num: 0, has_num: 100, good_price: 29.9 &#125; &#125;, methods: &#123; sub_num() &#123; if (this.num &gt;= 1) &#123; this.num -= 1 &#125; &#125;, add_num() &#123; if (this.num &lt; this.has_num) &#123; this.num += 1 &#125; &#125; &#125; &#125; ).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 思考和缺陷:无法不通过枚举设置之操作一个tb里面的数据，而获取的数据又如何通过打包。用户不通过按钮手动输入数据变成字符串后，再加减就是字符串拼接操作 操作样式操作样式,本质上就是属性操作,使用冒号: 控制标签class类名格式 1&lt;h1 :class=&quot;值&quot;&gt;元素&lt;/h1&gt; 值可以是字符串、对象、对象名、数组 示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;style&gt; .cls1 &#123; color: blue; &#125; .cls2 &#123; background-color: orange; &#125;&lt;/style&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;li class=&quot;cls1&quot;&gt;1&lt;/li&gt; &lt;li class=&quot;cls1 cls2&quot;&gt;2&lt;/li&gt; &lt;li :class=&quot;exterior1&quot;&gt;3&lt;/li&gt;&lt;!--对象名--&gt; &lt;li :class=&quot;[exterior1,exterior2]&quot;&gt;4&lt;/li&gt;&lt;!--数组--&gt; &lt;li :class=&quot;&#123;cls1:true,cls2:is_add_true&#125;&quot;&gt;5&lt;/li&gt;&lt;!--对象--&gt; &lt;li :class=&quot;&#123;cls1:true,cls2:is_add_true&#125;&quot; @click=&quot;chang_cls2&quot;&gt;5+1&lt;/li&gt; &lt;li :class=&quot;exterior3&quot; @click=&quot;is_add_true=!is_add_true&quot;&gt;5+2&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; //小驼峰，多个单词组成第一个单词小写后面每个单词首字母大写 vm = Vue.createApp( &#123; data() &#123; return &#123; exterior1: &quot;cls1&quot;, exterior2: &quot;cls2&quot;, is_add_true: true, exterior3:&#123; cls1:true, cls2:false &#125; &#125; &#125;, methods: &#123; chang_cls2() &#123; this.is_add_true = !this.is_add_true;//取反 &#125; &#125; &#125; ).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 控制标签style样式（一般开发不用这个）123456789101112131415161718192021222324252627282930格式1:值是json对象，对象写在元素的:style属性中\t标签元素: &lt;div :style=&quot;&#123;color:activeColor,fontSize:fontSSize +&#x27;px&#x27;&#125;&quot;&gt;&lt;/div&gt;\tdata数据如下: data:&#123; activeColor:&quot;red&quot;, fontSize:30 &#125;格式2：值是对象变量名，对象在data中进行声明\t标签元素： &lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;\tdata数据如下: data:&#123; styleObject:&#123; color:&quot;red&quot;, fontSize:&quot;13px&quot; &#125; &#125;格式3：值是数组\t标签元素: &lt;div v-bind:style=&quot;[style,style]&quot;&gt;&lt;/div&gt;\tdata数据如下： data:&#123; style1:&#123; color:&quot;red&quot; &#125;,style1:&#123; background:&quot;yellow&quot;, fontSize:&quot;21px&quot; &#125; &#125; 示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;ul&gt; &lt;!-- 行间样式，缺点太多:增加代码的长度，耦合性高--&gt; &lt;li style=&quot;background-color: orange&quot;&gt;第一个&lt;/li&gt; &lt;li style=&quot;background-color: orange;color: cornflowerblue&quot;&gt;第二个&lt;/li&gt; &lt;li :style=&quot;&#123;&#x27;background&#x27;:&#x27;orange&#x27;&#125;&quot;&gt;第三个&lt;/li&gt;&lt;!--不加单引号就是变量，因为默认值是json，或者2使用驼峰式的命名方式--&gt; &lt;li :style=&quot;&#123;backgroundColor:&#x27;orange&#x27;&#125;&quot;&gt;第四个&lt;/li&gt; &lt;li :style=&quot;&#123;backgroundColor:bgcolor&#125;&quot;&gt;第四个+1&lt;/li&gt; &lt;li :style=&quot;&#123;backgroundColor:&#x27;orange&#x27;,color:&#x27;cornflowerblue&#x27;&#125;&quot;&gt;第五个&lt;/li&gt; &lt;li :style=&quot;[sty1,sty2]&quot;&gt;第六个&lt;/li&gt; &lt;li :style=&quot;sty1&quot; @click=&quot;chang_color&quot;&gt;第七个&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; //小驼峰，多个单词组成第一个单词小写后面每个单词首字母大写 vm = Vue.createApp( &#123; data() &#123; return &#123; bgcolor:&#x27;orange&#x27;, sty1:&#123;backgroundColor:&#x27;orange&#x27;,color:&#x27;cornflowerblue&#x27;,userSelect:&#x27;none&#x27;&#125;, sty2: &#123;width:100+&#x27;px&#x27;&#125;, &#125; &#125;, methods: &#123; chang_color() &#123; if(this.sty1.color===&#x27;cornflowerblue&#x27;)&#123; this.sty1.color=&#x27;red&#x27;; &#125;else &#123; this.sty1.color=&#x27;cornflowerblue&#x27;; &#125;//取反 &#125; &#125; &#125; ).mount(&quot;##app&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 实例-vue版本选项卡1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;选项卡&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; ##option-card .titlebar span &#123; height: 32px; width: 100px; display: block; /*设置当前元素的显示模式为块级/块状 /*background-color: gray;*/ text-align: center; /* 文本居中*/ text-decoration: none; /* 隐藏下划线*/ vertical-align: middle; /*垂直居中，不过需要设置行高才有效？*/ line-height: 32px; background-color: ##afafaf; color: ##000; float: left; margin-right: 4px; &#125; ##option-card .titlebar:after &#123; clear: both; display: block; content: &quot;&quot;; &#125; ##option-card .contentbox .content &#123; width: 500px; height: 350px; background-color: yellow; display: none; &#125; ##option-card .contentbox .active &#123; display: block; &#125; ##option-card .titlebar .current &#123; background-color: yellow; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!--&lt;div id=&quot;option-card&quot;&gt;--&gt;&lt;!-- &lt;div class=&quot;titlebar&quot;&gt;--&gt;&lt;!-- &lt;span :class=&quot;&#123;current:current_title===&#x27;体育新闻&#x27;&#125;&quot; @click=&quot;current_title=&#x27;体育新闻&#x27;&quot;&gt;体育新闻&lt;/span&gt;--&gt;&lt;!-- &lt;span :class=&quot;&#123;current:current_title===&#x27;财政资讯&#x27;&#125;&quot; @click=&quot;current_title=&#x27;财政资讯&#x27;&quot;&gt;财政资讯&lt;/span&gt;--&gt;&lt;!-- &lt;span :class=&quot;&#123;current:current_title===&#x27;娱乐八卦&#x27;&#125;&quot; @click=&quot;current_title=&#x27;娱乐八卦&#x27;&quot;&gt;娱乐八卦&lt;/span&gt;--&gt;&lt;!-- &lt;/div&gt;--&gt;&lt;!-- &lt;div class=&quot;contentbox&quot;&gt;--&gt;&lt;!-- &amp;lt;!&amp;ndash; &lt;div class=&quot;content active&quot; :class=&quot;current_title===&#x27;体育新闻&#x27;?&#x27;active&#x27;:&#x27;&#x27;&quot;&gt;体育新闻&lt;/div&gt;&amp;ndash;&amp;gt;--&gt;&lt;!-- &lt;div :class=&quot;&#123;content:true,active:current_title===&#x27;体育新闻&#x27;&#125;&quot;&gt;体育新闻&lt;/div&gt;--&gt;&lt;!-- &lt;div :class=&quot;&#123;content:true,active:current_title===&#x27;财政资讯&#x27;&#125;&quot;&gt;财政资讯&lt;/div&gt;--&gt;&lt;!-- &lt;div :class=&quot;&#123;content:true,active:current_title===&#x27;娱乐八卦&#x27;&#125;&quot;&gt;娱乐八卦&lt;/div&gt;--&gt;&lt;!-- &lt;/div&gt;--&gt;&lt;!--&lt;/div&gt;--&gt;&lt;div id=&quot;option-card&quot;&gt; &lt;div class=&quot;titlebar&quot;&gt; &lt;span :class=&quot;&#123;current:current_title===0&#125;&quot; @click=&quot;current_title=0&quot;&gt;体育新闻&lt;/span&gt; &lt;span :class=&quot;&#123;current:current_title===1&#125;&quot; @click=&quot;current_title=1&quot;&gt;财政资讯&lt;/span&gt; &lt;span :class=&quot;&#123;current:current_title===2&#125;&quot; @click=&quot;current_title=2&quot;&gt;娱乐八卦&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;contentbox&quot;&gt; &lt;!-- &lt;div class=&quot;content active&quot; :class=&quot;current_title===&#x27;体育新闻&#x27;?&#x27;active&#x27;:&#x27;&#x27;&quot;&gt;体育新闻&lt;/div&gt;--&gt; &lt;div :class=&quot;&#123;content:true,active:current_title===0&#125;&quot;&gt;体育新闻&lt;/div&gt; &lt;div :class=&quot;&#123;content:true,active:current_title===1&#125;&quot;&gt;财政资讯&lt;/div&gt; &lt;div :class=&quot;&#123;content:true,active:current_title===2&#125;&quot;&gt;娱乐八卦&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; current_title: 0, &#125; &#125; &#125;).mount(&quot;##option-card&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果展示 条件渲染指令v-if,v-else-if,v-else1234567891011121314标签元素\t&lt;div id=&quot;box&quot;&gt; &lt;p v-if=&quot;is_login&quot;&gt;尊贵的游客欢迎来到我们的网站&lt;/p&gt; &lt;p v-else&gt;尊敬的会员欢迎来到我们的网站&lt;/p&gt;&lt;!--要贴合在v-if的后面，就是于前面一个v-if存在关联，不会受注释影响--&gt; &lt;p v-if=&quot;!is_login&quot;&gt;尊敬的会员欢迎来到我们的网站&lt;/p&gt; &lt;button @click=&quot;is_login=!is_login&quot;&gt;登录/登出&lt;/button&gt;&lt;/div&gt;data 数据 data() &#123; return &#123; is_login:true//表示登录与否,ture未登录，flase登录 &#125; &#125;, 12345678910111213141516标签元素 &lt;div id=&quot;box&quot;&gt; &lt;p v-if=&quot;role===1&quot;&gt;尊敬的会员欢迎来到我们的网站&lt;/p&gt; &lt;p v-else-if=&quot;role===2&quot;&gt;尊敬的vip会员欢迎来到我们的网站&lt;/p&gt;&lt;!--要贴合在v-if的后面，就是于前面一个v-if存在关联，不会受注释影响--&gt; &lt;p v-else&gt;尊贵的游客欢迎来到我们的网站&lt;/p&gt; &lt;button @click=&quot;role=0&quot;&gt;登出&lt;/button&gt; &lt;button @click=&quot;role=1&quot;&gt;登录&lt;/button&gt; &lt;button @click=&quot;role=2&quot;&gt;充vip&lt;/button&gt; &lt;/div&gt;data 数据 data() &#123; return &#123; role:0 &#125; &#125; v v-if,v-else-if,v-else多层嵌套12345678910111213141516171819202122标签元素 &lt;div id=&quot;box&quot;&gt; &lt;div v-if=&quot;role===0&quot;&gt; &lt;p&gt;尊贵的游客欢迎来到我们的网站&lt;/p&gt; &lt;p&gt;您还尚未登录&lt;/p&gt; &lt;/div&gt; &lt;div v-else&gt; &lt;p v-if=&quot;role===1&quot;&gt;尊敬的会员欢迎来到我们的网站&lt;/p&gt; &lt;p v-else-if=&quot;role===2&quot;&gt;尊敬的vip会员欢迎来到我们的网站&lt;/p&gt; &lt;!--要贴合在v-if的后面，就是于前面一个v-if存在关联，不会受注释影响--&gt; &lt;button @click=&quot;role=2&quot;&gt;充vip&lt;/button&gt; &lt;/div&gt; &lt;button @click=&quot;role=0&quot;&gt;登出&lt;/button&gt; &lt;button @click=&quot;role=1&quot;&gt;登录&lt;/button&gt; &lt;/div&gt;data 数据 data() &#123; return &#123; role:0 &#125; &#125; v-show用法和v-if大致一样，区别在于两点： v-show后面不能使用v-else或者v-else-if v-show隐藏元素时,使用的时display:none来隐藏的，而v-if是直接从HTML文档中移除元素[DOM操作中的remove] 1234567891011标签元素 &lt;div id=&quot;box&quot;&gt; &lt;p v-show=&quot;is_show&quot;&gt;登陆成功&lt;/p&gt;&lt;!--is_show等于true v-show的作用相当于给标签添加了一个样式style=&quot;display: none;使标签不可见--&gt; &lt;button @click=&quot;is_show=!is_show&quot;&gt;登陆/登出&lt;/button&gt; &lt;/div&gt;data数据 data() &#123; return &#123; is_show:true &#125; &#125;, 列表渲染指令在vue中，可以通过v-for指令将一组数据渲染到页面中，数据可以是数组或者对象 数据是数组时 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; table, tr, th, td &#123; text-align: center; border-collapse: collapse; /*合并边框*/ border: 1px solid red; &#125; th, td &#123; width: 120px; height: 32px; line-height: 32px; vertical-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;/tr&gt; &lt;!-- &lt;tr v-for=&quot;role,key in book&quot;&gt;&amp;lt;!&amp;ndash;jinja2语法和Django的for模板语法差不多&amp;ndash;&amp;gt;--&gt; &lt;!-- 可行但是会有报错提示--&gt; &lt;tr v-for=&quot;(role,rank) in book&quot;&gt;&lt;!--加入(可以避免报错，也是官方建议的写法)--&gt; &lt;td&gt;##&#123;&#123;rank + 1&#125;&#125;&lt;/td&gt;&lt;!--获取当前次数--&gt; &lt;!-- &lt;td&gt;##&#123;&#123;rank&#125;&#125;&lt;/td&gt;&amp;lt;!&amp;ndash;获取当前次数&amp;ndash;&amp;gt;--&gt; &lt;!-- &lt;td&gt;##&#123;&#123;book.length-key&#125;&#125;&lt;/td&gt;&amp;lt;!&amp;ndash;倒序&amp;ndash;&amp;gt;--&gt; &lt;td&gt;&#123;&#123;role.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;role.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;role.age&#125;&#125;&lt;/td&gt; &lt;td v-if=&quot;role.sex&quot;&gt;男&lt;/td&gt; &lt;td v-else&gt;女&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; book: [ &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;男主&quot;, &quot;age&quot;: 18, &#x27;sex&#x27;: true &#125;, &#123; &quot;id&quot;: 7, &quot;name&quot;: &quot;女主&quot;, &quot;age&quot;: 19, &#x27;sex&#x27;: false &#125;, &#123; &quot;id&quot;: 9, &quot;name&quot;: &quot;女2&quot;, &quot;age&quot;: 19, &#x27;sex&#x27;: false &#125;, &#123; &quot;id&quot;: 11, &quot;name&quot;: &quot;女儿&quot;, &quot;age&quot;: 9, &#x27;sex&#x27;: false &#125;, &#123; &quot;id&quot;: 13, &quot;name&quot;: &quot;完结撒花&quot;, &quot;age&quot;: 50, &#x27;sex&#x27;: true &#125; ] &#125; &#125;, methods() &#123; &#125;, mounted() &#123; &#125;, &#125;).mount(&quot;##box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 数据是对象时 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;./js/vue.3.3.4.js&quot;&gt;&lt;/script&gt; &lt;style&gt; table, tr, th, td &#123; text-align: center; border-collapse: collapse; /*合并边框*/ border: 1px solid red; &#125; th, td &#123; width: 120px; height: 32px; line-height: 32px; vertical-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;box&quot;&gt; &lt;ul&gt; &lt;li&gt;人物ID:&#123;&#123;roles.id&#125;&#125;&lt;/li&gt; &lt;li&gt;人物姓名:&#123;&#123;roles.name&#125;&#125;&lt;/li&gt; &lt;li&gt;背景信息:&lt;!-- &lt;ul v-for=&quot;(key,value) in roles.attrs&quot;&gt;&amp;lt;!&amp;ndash;v-for可以放在这个位置也可以放在下面的位置,不过放在上面是循环ul对象&amp;ndash;&amp;gt;--&gt; &lt;ul&gt; &lt;li v-for=&quot;(key,value) in roles.attrs&quot;&gt;&#123;&#123;key + &#x27;:&#x27; + value&#125;&#125;&lt;/li&gt;&lt;!-- &lt;li&gt;&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;/li&gt;--&gt; &lt;li&gt;&#123;&#123;key+&#x27;:&#x27;+value&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;年龄:&#123;&#123;roles.age&#125;&#125;&lt;/li&gt; &lt;li v-if=&quot;roles.sex===true&quot;&gt;性别: 男&lt;/li&gt; &lt;li v-else&gt;性别: 女&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;script&gt; vm = Vue.createApp(&#123; data() &#123; return &#123; roles: &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;男主&quot;, attrs: &#123;//背景信息 &#x27;生活世界&#x27;: &#x27;异世界&#x27;, &#x27;能力品阶&#x27;: 180, &#x27;穿越时间&#x27;: &#x27;2023年8月3日&#x27; &#125;, &quot;age&quot;: 18, &#x27;sex&#x27;: true &#125;, &#125; &#125;, methods() &#123; &#125;, mounted() &#123; &#125;, &#125;).mount(&quot;##box&quot;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"},{"title":"Vue路由","path":"/wiki/vue/Vue路由.html","content":"入门 | Vue Router (vuejs.org) 安装 1yarn add vue-router@next ##@next表示安装最新版本 vue3.0默认是router4+的版本而vue2使用的是3的版本 查看安装的router包 12yarn list | findstr router\t##windos用这种即可yarn list | grep router\t##windos上好像并不支持grep 路由初始化在src/router/index.js文件内 123456789101112131415161718192021222324252627282930313233// 路由的列表import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;import Home from &quot;@/View/Home.vue&quot;;// import Home from &#x27;../View/Home.vue&#x27;// import Register_page from &quot;@/View/Register.vue&quot;;export default createRouter(&#123; history: createWebHistory(),//路由的模式 带不带##号 // history，指定路由模式，此处使用的是history模式 vue2中history命名为mode // createWebHistory history模式 ==&gt;https:http://localhost:8080/ // createMemoryHistory 带缓存的history模式 ==&gt;https:http://localhost:8080/login // createWebHashHistory hash模式 ==&gt;https:http://localhost:8080/##/login routes: [ // &#123; // path: &quot;url地址&quot;, // component:组件对象 // name:&quot;路由别名&quot; // &#125;, &#123; path: &quot;/&quot;, //组件的访问路径 component: Home, //不能加引号，直接填写对象即可 name: &quot;Home&quot; //路由别名，按Django开发的惯性来看，应该是可以用来反解析路由名 &#125;, &#123; path: &quot;/register&quot;, // component: Register_page, component: () =&gt; import(/* webpackChunkName: &quot;Register_page&quot; */ &#x27;../View/Register.vue&#x27;), name: &quot;Register&quot; &#125;, ] &#125;); 在App.vue,代码 1234567891011121314&lt;template&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;style&gt;##app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: ##2c3e50; margin-top: 60px;&#125; 页面跳转测试在Menu.vue中进行测试 123456789101112131415161718192021222324252627组件标签跳转[本质上还是js跳转] &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt;js代码跳转&lt;template&gt;\t&lt;button @click.prevent=&quot;goto(&#x27;/&#x27;)&quot;&gt;主页&lt;/button&gt; &lt;button @click.prevent=&quot;goto(&#x27;/register&#x27;)&quot;&gt;注册&lt;/button&gt;&lt;/template&gt;&lt;script&gt;const Menu = &#123; name: &quot;Menu&quot;, methods: &#123; goto(url)&#123; this.$router.push(url); //跳转到指定的url地址对应的页面中 this.$router.back(); //返回上一个页面 this.$router.go(1); //跳转到指定的n个页面,正数表示前进，负数表示后退 this.$router.forward(); //前进下一个 &#125; &#125;&#125;export default Menu;&lt;/script&gt;html原生href跳转\t&lt;p&gt;&lt;a href=&quot;/&quot;&gt;html-Home&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;/register&quot;&gt;html-Register&lt;/a&gt;&lt;/p&gt; tag1&lt;router-link class=&quot;col02&quot; tag=&quot;li&quot; :to=&quot;&#x27;/goods/&#x27;+sku.id&quot;&gt;&lt;img :src=&quot;sku.default_image_url&quot;&gt;&lt;/router-link&gt; vue-router 3.1.x 以上版本 也是建议使用v-slot处理 原来的tag形式浏览器中没有效果 123&lt;router-link :to=&quot;&#x27;/goods/&#x27;+sku.id&quot; custom v-slot=&quot;&#123; navigate &#125;&quot;&gt; &lt;li @click=&quot;navigate&quot; @keypress.enter=&quot;navigate&quot; role=&quot;link&quot; class=&quot;col02&quot;&gt;&lt;img :src=&quot;sku.default_image_url&quot;&gt;&lt;/li&gt;&lt;/router-link&gt; 不同页面的参数传递你可以在同一个路由设置有多个参数，它们将会映射到$route.params相应的字段。列如 匹配模式 匹配路径 $route.params &#x2F;users&#x2F;:username &#x2F;user&#x2F;eduardo { username : ‘eduardo’ } &#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId &#x2F;user&#x2F;eduardo&#x2F;post&#x2F;123 {username:’eduardo’,postId:’123’} 除了$route.params之外，$route对象还公开了其他信息，如$route.query(如果URL存在参数)、$route.hash等 Menu.vue 1234567891011&lt;template&gt; &lt;nav&gt; &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt; | &lt;router-link to=&quot;/goods&quot;&gt;Goods&lt;/router-link&gt; | &lt;router-link to=&quot;/list&quot;&gt;List&lt;/router-link&gt; &lt;/nav&gt;&lt;/template&gt; 发送和接受查询字符串参数Goods.vue 数据获取部分均在这一个页面不多写 123456789101112131415161718192021222324252627282930313233343536&lt;template&gt; &lt;h1&gt;Goods页面&lt;/h1&gt; &lt;p&gt;&#123;&#123;goods_id_query&#125;&#125;号商品的详细信息-query&lt;/p&gt; &lt;p&gt;&#123;&#123;goods_id_params&#125;&#125;号商品的详细信息-params&#123;&#123;cat&#125;&#125;&lt;/p&gt; &lt;nav&gt; &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt; | &lt;router-link to=&quot;/goods&quot;&gt;Goods&lt;/router-link&gt; | &lt;router-link to=&quot;/list&quot;&gt;List&lt;/router-link&gt; &lt;/nav&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;GoodsPage&#x27;, data()&#123; return&#123; goods_id_query:0, goods_id_params:Number, cat:Number &#125; &#125;, created() &#123; //接受地址栏的查询字符串 //router用于跳转，router由于获取url的查询参数 this.goods_id_query=this.$route.query.id//id就是查询参数，这一点和express很相 console.log(this.$route.query.cat); //接受路由参数 this.goods_id_params=this.$route.params.id; this.cat=this.$route.params.cat; &#125;&#125;&lt;/script&gt; List.vue 1234567891011121314151617181920212223242526&lt;template&gt; &lt;h1&gt;List页面&lt;/h1&gt; &lt;nav&gt; &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt; | &lt;router-link to=&quot;/goods&quot;&gt;Goods&lt;/router-link&gt; | &lt;router-link to=&quot;/list&quot;&gt;List&lt;/router-link&gt; &lt;/nav&gt; &lt;ul&gt; &lt;li&gt;&lt;router-link to=&quot;/goods?id=1&quot;&gt;1号商品&lt;/router-link&gt;&lt;/li&gt; &lt;li&gt;&lt;router-link to=&quot;/goods?id=5&quot;&gt;5号商品&lt;/router-link&gt;&lt;/li&gt; &lt;li&gt;&lt;router-link to=&quot;/goods?id=14&amp;cat=7&quot;&gt;14号商品&lt;/router-link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;br&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name:&#x27;ListPage&#x27;,&#125;&lt;/script&gt; 发送和接受路由参数Goods.vue 1如上 List.vue 1234567891011121314151617181920212223&lt;template&gt; &lt;h1&gt;List页面&lt;/h1&gt; &lt;nav&gt; &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; | &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt; | &lt;router-link to=&quot;/goods&quot;&gt;Goods&lt;/router-link&gt; | &lt;router-link to=&quot;/list&quot;&gt;List&lt;/router-link&gt; &lt;/nav&gt; &lt;ul&gt; &lt;li&gt;&lt;router-link to=&quot;/goods/1&quot;&gt;商品1&lt;/router-link&gt;&lt;/li&gt; &lt;li&gt;&lt;router-link to=&quot;/goods/5&quot;&gt;商品5&lt;/router-link&gt;&lt;/li&gt; &lt;li&gt;&lt;router-link to=&quot;/goods/14/7&quot;&gt;商品14幸运7&lt;/router-link&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name:&#x27;ListPage&#x27;,&#125;&lt;/script&gt; 命名路由(反向解析name) 命名路由 | Vue Router (vuejs.org) 除了 path 之外，你还可以为任何路由提供 name。这有以下优点： 没有硬编码的 URL params 的自动编码&#x2F;解码。 防止你在 url 中出现打字错误。 绕过路径排序（如显示一个） 1234567const routes = [ &#123; path: &#x27;/user/:username&#x27;, name: &#x27;user&#x27;, component: User, &#125;,] 要链接到一个命名的路由，可以向 router-link 组件的 to 属性传递一个对象： 123&lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;&gt; User&lt;/router-link&gt; 这跟代码调用 router.push() 是一回事： 1router.push(&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125; &#125;) 在这两种情况下，路由将导航到路径 /user/erina。 完整的例子在这里. 嵌套路由嵌套路由是vue-router提供给开发者应用在同一个页面组件下切换不同自组建的时候用的 123456789101112131415routes: [\t&#123; path: &quot;/user&quot;,//动态路由,设置路由的一部分作为参数，写法必须是 :参数名 component: UserSpace, children:[ &#123; path:&#x27;friend&#x27;, component:UserFriend &#125;, &#123; path:&#x27;order&#x27;, component:UserOrder &#125;, ] &#125;, ] 在views/UserSpace.vue中 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;template&gt; &lt;h1&gt;用户公共代码[页面头部]&lt;/h1&gt; &lt;Menu&gt;&lt;/Menu&gt; &lt;nav v-if=&quot;$route.path===&#x27;/user&#x27;&quot;&gt;&lt;a&gt;当前时间：&#123;&#123; currentTime &#125;&#125;欢迎回来:阳光&lt;/a&gt;&lt;/nav&gt; &lt;nav&gt; &lt;router-link to=&quot;/user&quot;&gt;个人主页&lt;/router-link&gt; | &lt;router-link to=&quot;/user/friend&quot;&gt;好友列表&lt;/router-link&gt; | &lt;router-link to=&quot;/user/order&quot;&gt;我的订单&lt;/router-link&gt; &lt;/nav&gt; &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;export default &#123; name: &#x27;UserSpace&#x27;, data() &#123; return &#123; currentTime: Date &#125; &#125;, methods: &#123; getCurrentTime() &#123; const data = new Date(); const hours = data.getHours(); const minutes = data.getMinutes()&lt;10 ? &#x27;0&#x27;+data.getMinutes() : data.getMinutes(); const seconds = data.getSeconds()&lt;10 ? &#x27;0&#x27;+data.getSeconds() : data.getSeconds(); this.currentTime = `$&#123;hours&#125;:$&#123;minutes&#125;:$&#123;seconds&#125;` &#125; &#125;, mounted() &#123; this.getCurrentTime();//进入页面调用该方法获取当前时间 clearInterval(myTimeDisplay );//销毁之前定时器 var myTimeDisplay = setInterval(() =&gt; &#123; this.getCurrentTime(); //每秒更新一次时间 &#125;, 1000); &#125;, components:&#123; Menu, &#125;&#125;&lt;/script&gt; 编写这样一段代码，实现子路由嵌套父路由的组件和url，并且判断在父路由则显示用户信息和当前时间 (http://127.0.0.1:8080/user) (http://127.0.0.1:8080/user/friend) src/views/UserOrder.vue 1234567891011121314&lt;template&gt;&lt;h2&gt;Order&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;上课&lt;/li&gt; &lt;li&gt;上课&lt;/li&gt; &lt;li&gt;上课&lt;/li&gt; &lt;li&gt;上课&lt;/li&gt; &lt;li&gt;上课&lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script setup&gt;//setup-vue3的语法糖&lt;/script&gt; src/views/UserFriend 12345678910111213&lt;template&gt;&lt;h2&gt;Friend&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;小红&lt;/li&gt; &lt;li&gt;小白&lt;/li&gt; &lt;li&gt;小绿&lt;/li&gt; &lt;li&gt;小紫&lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script setup&gt;//setup-vue3的语法糖&lt;/script&gt; 路由守卫 导航守卫 | Vue Router (vuejs.org) 路由守卫：也叫导航守卫，功能作用类似于上面的axios的拦截器。我们可以基于导航守卫编写一些在页面跳转过程中需要编写的公共代码，例如：权限的验证，页面的公共初始化，页面跳转之前的一些公共逻辑。 前置守卫在前置路由打印对应的方法信息 1234567891011router.beforeEach((to, from, next) =&gt; &#123; console.log(to) //下一个页面的路由对象 console.log(from) //当前页面的路由对象 console.log(next) // console.log(next()) //执行next()就会往下一个页面跳转 return next() // console.log(to) //下一个页面的路由对象 // console.log(to.name) //to.name获取下一个路由定义的别名即name // console.log(to.query) //下一个页面的路由的查询参数 为键值对 // console.log(to.query.id) //下一个页面的路由的查询参数的id键的值 为值 12345router.beforeEach((to, from, next) =&gt; &#123; console.log(to) //下一个页面的路由对象 console.log(to.name) //to.name获取下一个路由定义的别名即name console.log(to.query) //下一个页面的路由的查询参数 为键值对 console.log(to.query.id) //下一个页面的路由的查询参数的id键的值 为值 前置路由拦截用户的应用 12345678910111213141516171819202122232425262728293031323334// 路由的列表import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;import Home from &quot;@/views/Home.vue&quot;;import Goods from &quot;@/views/Goods.vue&quot;;import List from &quot;@/views/List.vue&quot;;import UserSpace from &quot;@/views/UserSpace.vue&quot;;import UserFriend from &quot;@/views/UserFriend.vue&quot;;import UserOrder from &quot;@/views/UserOrder.vue&quot;;const routes = [ //省略]const router = createRouter(&#123; history: createWebHistory(process.env.BASE_URL),//路由的模式 带不带##号 routes&#125;)//导航首位//前置守卫，在页面跳转之前需要完成的判断逻辑,公共代码router.beforeEach((to, from, next) =&gt; &#123; // if ((to.path != &quot;/&quot;) &amp;&amp; to.path != &#x27;/login&#x27;) if ((to.name != &quot;Home&quot;) &amp;&amp; to.path != &#x27;Login&#x27;)&#123; if (to.query.user==&#x27;小明&#x27;)&#123; next(); &#125;else &#123; next(&#123;name:&quot;Home&quot;&#125;) // next(&#123;name:&quot;/&quot;&#125;) &#125; &#125; else next()&#125;)export default router (http://127.0.0.1:8080/user?user=小明)不这样填写内容无非正常访问user页面，或者只能访问登陆和主页面 后置首位1234router.afterEach((to, from, failure) =&gt; &#123; // if (!failure) sendToAnalytics(to.fullPath) if (!failure) console.log(&#x27;对不起你没有权限进入&#x27;)&#125;) (路由)独享守卫1234567891011const routes = [ &#123; path: &quot;/goods/:id&quot;,//动态路由,设置路由的一部分作为参数，写法必须是 :参数名 component: Goods, beforeEnter: (to, from) =&gt; &#123; // reject the navigation console.log(to); console.log(from); return true &#125;,] 问题vue-router能不能根据当前访问的路由修改对应的组件，指在router的配置文件index.js实施大致意识未动态路由匹配动态路径，因为我想后匹配到端渲染的SSR静态模板文件，省去一部分的渲染功夫 解决思路 一、直接在路由配置中进行动态导入路（失败，可跳过）123456&#123; path: &#x27;/user/:id&#x27;, // component: User component: () =&gt; import((`@/views/User$&#123;route.params.id&#125;.vue`)), &#125; 为定义？那我就拿出来 1234567891011121314const User = (to, from, next) =&gt; &#123; // 可以访问到 route 对象 // const id = to.params.id const id = to.params.id return import(`../views/User$&#123;id&#125;.vue`)&#125;... &#123; path: &#x27;/user/:id&#x27;, component: User // component: () =&gt; import((`@/views/User$&#123;route.params.id&#125;.vue`)), &#125; 这种根本就四不像，像是路由守卫(导航守卫)，又没有对应的方法和实例调用 总而言之在router和组件的script之外没有办法拿到router,使用了useRouter不知道能不能行，反正我当初在试了半天也不行 那使用导航守卫吧 二、使用前置守卫进行拦截然后更改成对应的组件1.直接替换组件 1234567891011121314151617181920import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(), routes: [ &#123; path: &#x27;/user/:id&#x27;, component: User &#125; ]&#125;)router.beforeEach( (to, from, next) =&gt; &#123; console.log(to.params) console.log(to.query) console.log(from.params) console.log(from.query) //1.直接替换组件: to.matched[0].components.default = User2 next();&#125;)export default router 2.动态导入组件 123456789101112131415161718192021import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;const router = createRouter(&#123; history: createWebHistory(), routes: [ &#123; path: &#x27;/user/:id&#x27;, component: User &#125; ]&#125;)router.beforeEach( async (to, from, next) =&gt; &#123; console.log(to.params) console.log(to.query) console.log(from.params) console.log(from.query) const dynamic_component =await import(`../views/User$&#123;to.params.id&#125;.vue`) //2.动态导入组件: to.matched[0].components.default = dynamic_component.default next();&#125;)export default router 三、vue的vue-loader(vite默认携带)可以分离组件的template、script、style，通过src导入那么能不能在template初始化之前修改src的属性(失败)假如使用这一个方法组件就可以固定动态改变的就是页面内容，上面的方法反之，页面内容不会动态改变"},{"title":"WebSocket","path":"/wiki/vue/WebSocket.html","content":"在前后端分离的websocket通信中也需要在请求中设置特殊的参数来验证用户的信息 那么如何设置websocket的请求头呢 如何设置websocket的请求头我是真的找不到，但是可以在请求的时候携带协议，token作为协议的内容 12345678910111213141516 methods: &#123; initWebSocket()&#123; //初始化webscoket连接 //连接服务器 this.websocket = new WebSocket( &#x27;ws://127.0.0.1:8000/&#x27; + &#x27;ws/chat/&#x27; + this.roomName + &#x27;/&#x27;,[this.token] ) this.websocket.onmessage = this.webSocketOnMessage; this.websocket.onopen = this.webSocketOnOpen; this.websocket.onerror = this.webSocketOnError; this.websocket.onclose = this.webSocketOnClose; &#125;&#125; 而这就是设置设置Sec-WebSocket-Protocol的值,后端也能够正常获取，只不过传输回来也必须携带协议"},{"title":"组合API","path":"/wiki/vue/组合API.html","content":"9组合API(setup、ref) TIP 因为setup是围绕beforeCreate和created生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在setup函数中编写。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;script&gt;import &#123;computed, onBeforeMount, onMounted, reactive, ref, watch&#125; from &quot;vue&quot;;export default (&#123; name: &quot;GroupAPI&quot;, data() &#123; return &#123;num: 10&#125; &#125;, setup() &#123;//setup会自动执行，并且会在beforeCreated钩子方法执行之前就自动执行 console.log(this); //undefined setup执行的时候连this都没有定义，多以我们不可能在setup调用选项api方法 console.log(&quot;setup被执行了&quot;); let data = &#123;name: &#x27;xiaoming&#x27;, age: 17, sex: true&#125;//把数据(对象)通过reactive函数进行处理的目的是为了转换为响应式数据 //一旦把数据转换为响应式数据，则vm对象就会自动的维护和保持数据的全局一致性 //也就是Html中修改了数据，vm对象中的setup里面的数据也会发生改动 //如果希望数据提供给视图模板HTML中 let user = reactive(data) let message=&#x27;hello&#x27;; // let message = 100; // let msg=reactive(message); // let msg=reactive(&#123;value:message&#125;);//如果想使用reactive使数据发生响应需要转换为对象 let msg = ref(message);//或者直接使用ref ref的本质就是上面代码的简写 // console.log(msg.value)//setup代码中如果要调用经过ref处理过的数据，需要value属性来操作//但是无法&lt;p&gt;&#123;&#123;msg.value&#125;&#125;&lt;/p&gt;获得数据 // msg.value = 4000;//修改也是通过value属性来操作 let change_user_info = () =&gt; &#123; user.age = 30//此处操作的不只是user对象，也是data对象(根对象) &#125; let add_msg = () =&gt; &#123; msg.value++ // msg //Must use `.value` to read or write the value wrapped by `ref()` vue/no-ref-as-operand//使用ref()不能够单独使用msg setup()里面需要添加.value属性 &#125; //钩子方法的调用组合[API中不再提供created和beforeCreated,原来这2个钩子方法中代码直接写在setup中即可] onBeforeMount(() =&gt; &#123; console.log(&quot;onBeforeMounted&quot;) &#125;) onMounted(() =&gt; &#123; console.log(&quot;onMounted&quot;) &#125;); //监听数据 // watch(&quot;变量名&quot;, (new_value,old_value) =&gt; &#123; // // &#125;) watch(msg, () =&gt; &#123; if(msg.value===&#x27;python&#x27;)&#123; console.log(&quot;message的值不能为python了&quot;) msg.value=2000 &#125; &#125;) //计算属性 let new_msg=computed(()=&gt;&#123; return msg.value*4; &#125;) return &#123; user,//user:user简写 data,//非响应数据 不能使用v-model msg,//非响应数据 不能使用v-model message,//非响应数据 不能使用v-model add_msg, change_user_info, new_msg, &#125; &#125;, beforeCreate() &#123; console.log(&#x27;钩子beforeCreate执行力&#x27;); &#125;&#125;)&lt;/script&gt;&lt;template&gt; &lt;p&gt;组合API的基本使用&lt;/p&gt; &lt;p&gt;显示对象数据&lt;/p&gt; &lt;p&gt;&#123;&#123; user &#125;&#125;&lt;/p&gt; &lt;input type=&quot;text&quot; v-model=&quot;user.age&quot;&gt; &lt;button @click=&quot;change_user_info&quot;&gt;点击修改&lt;/button&gt; &lt;p&gt;显示普通数据&lt;/p&gt; &lt;p&gt;&#123;&#123; data &#125;&#125;&lt;/p&gt; &lt;hr&gt; &lt;p&gt;显示非对象的基本数据类型&lt;/p&gt; &lt;!-- &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;--&gt; &lt;!-- &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;&amp;lt;!&amp;ndash;无法跟着改变&amp;ndash;&amp;gt;--&gt; &lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;--&gt; &lt;!-- &lt;p&gt;&#123;&#123;msg.value&#125;&#125;&lt;/p&gt;--&gt; &lt;button @click=&quot;msg++&quot;&gt;点击增加&lt;/button&gt; &lt;!-- or--&gt; &lt;button @click=&quot;add_msg&quot;&gt;函数增加&lt;/button&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;new_msg&#125;&#125;&lt;/p&gt; &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt; setup语法糖的优势更少的样板内容，更简洁的代码。能够使用纯Typescript声明 props 和抛出事件。虽说ts的性能比js更好，而且更像java我也学过一点java但是我真的不是很想学java更好的运行时性能 (其模板会被编译成与其同一作用域的渲染函数，没有任何的中间代理)。更好的 IDE 类型推断性能 (减少语言服务器从代码中抽离类型的工作)。"},{"title":"单文件组件的使用","path":"/wiki/vue/单文件组件的使用.html","content":"vue组件有两种：脚本化组件，单文件组件 脚本化组件的缺点：1.htm代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果2.普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。3.脚本化组件只是整合了js和html,但是css代码被剥离出去了。使用的时候的时候不好处理，既要引入js组件又要保存css代码一起引入到页面，相当麻烦。 创建并注册组件 在组件中编辑三个标签，编写视图，vm对象和css样式 组件内容编写template编写html代码的地方 script编写vue.js代码 style编写当前组件的样式代码 template内部有且只能有一个子标签(2.0版本的限制，3.0版本不限制)，组件所有的html代码必须被包，含在这个子标签中。 12345678910111213141516171819202122&lt;template&gt; &lt;button @click=&quot;num++&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/button&gt; &lt;button @click=&quot;num++&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/button&gt;&lt;!--vue2要求内部只能有一个子标签，但vue3可以这么写--&gt;&lt;/template&gt;&lt;script&gt;const Home = &#123; name: &#x27;Home&#x27;, data() &#123; return &#123; num: 0 &#125; &#125;&#125;export default Home;&lt;/script&gt;&lt;!--scoped表示局部样式 vue2.0如果不添加会导致样式污染其他组件 vue3也会，总之最好添加一个scoped属性--&gt;&lt;style scoped&gt;button &#123; color: red;&#125;&lt;/style&gt; 在App.vue中导入、注册并调用Home组件 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt; &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt; &lt;Home&gt;&lt;/Home&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;import Home from &quot;./components/Home&quot;; //这里导入需要在下面组件中启用export default &#123; name: &#x27;App&#x27;, components: &#123; HelloWorld, Home &#125;&#125;&lt;/script&gt;&lt;style&gt;##app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: ##2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 完成案例-点击加减数字12345&lt;template&gt; &lt;button @click=&quot;num--&quot;&gt;-&lt;/button&gt; &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt; &lt;button @click=&quot;num++&quot;&gt;+&lt;/button&gt;&lt;/template&gt; 在webstorm启动项目 其实在package.json中点击一下哪些以及设置好的命令，他会自动帮我们配置 要注意的一点就是，这个启动的包管理器就如上面所示配置信息最前面写的是Project而不是yarn,但是在后面写了yarn 在实参部分添加port和host可以更改部署的端口和IP地址 1--port=8000 --host=0.0.0.0 然后就可以运行了 组件的嵌套有时候开发vu项目时，页面也可以算是一个大组件，同时页面也可以分成多个子组件因为，产生了父组件调用子组件的情况。例如，我们就可以声明一个页面组件保存目录src&#x2F;views,并提供2个页面组件，分别是Home.vue和Register..vue,作为页面组件同时在src/components/创建一个保存子组件的目录Menu 做了几个操作： 创建Menu组件 123456789101112131415161718192021222324&lt;script&gt;const Menu=&#123; name:&quot;Menu&quot;, data()&#123; return&#123; li_list:[&#x27;主页&#x27;,&#x27;商城&#x27;,&#x27;论坛&#x27;,&#x27;注册&#x27;], num:10 &#125; &#125;&#125;export default Menu;&lt;/script&gt;&lt;template&gt; &lt;ul&gt; &lt;li v-for=&quot;(member,index) in li_list&quot; :key=&quot;index&quot;&gt;&#123;&#123;member&#125;&#125;&lt;/li&gt; &lt;button @click=&quot;num++&quot;&gt;&#123;&#123;num&#125;&#125;&lt;/button&gt;&lt;!-- &lt;li&gt;主页&lt;/li&gt;--&gt;&lt;!-- &lt;li&gt;商城&lt;/li&gt;--&gt;&lt;!-- &lt;li&gt;论坛&lt;/li&gt;--&gt;&lt;!-- &lt;li&gt;注册&lt;/li&gt;--&gt; &lt;/ul&gt;&lt;/template&gt; 从Register导入Menu 123456789101112131415161718192021&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;export default &#123; name: &quot;Register_page&quot;//不能使用Register , components: &#123; Menu &#125;&#125;&lt;/script&gt;&lt;template&gt; &lt;h1&gt;这是Register3页面&lt;/h1&gt; &lt;Menu&gt;&lt;/Menu&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt; 从Home导入Register、Menu 1234567891011121314151617181920212223&lt;template&gt;&lt;h1&gt;Home页面&lt;/h1&gt; &lt;Menu&gt;&lt;/Menu&gt; &lt;p&gt;下面是Register&lt;/p&gt; &lt;Register&gt;&lt;/Register&gt;&lt;/template&gt;&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;import Register from &quot;@/View/Register.vue&quot;;const Home = &#123; name: &#x27;Home&#x27;, data() &#123; return &#123; num: 0 &#125; &#125;, components:&#123; Menu, Register &#125;&#125;export default Home;&lt;/script&gt; 从App导入Register、Home 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;Home&gt;&lt;/Home&gt; &lt;button ref=&quot;btn&quot; class=&quot;add&quot;&gt;提交&lt;/button&gt; &lt;Register&gt;&lt;/Register&gt;&lt;/template&gt;&lt;script&gt;import Home from &quot;./View/Home&quot;; //这里导入需要在下面组件中启用import Register from &quot;@/View/Register.vue&quot;;export default &#123; name: &#x27;App&#x27;, components: &#123; Register, Home &#125;, mounted() &#123; console.log(this.$refs.btn) &#125;&#125;&lt;/script&gt;&lt;style&gt;##app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: ##2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 效果如下 #mermaid-1695282602409{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}#mermaid-1695282602409 .error-icon{fill:#a44141;}#mermaid-1695282602409 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-1695282602409 .edge-thickness-normal{stroke-width:2px;}#mermaid-1695282602409 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1695282602409 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1695282602409 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1695282602409 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1695282602409 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-1695282602409 .marker.cross{stroke:lightgrey;}#mermaid-1695282602409 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1695282602409 .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:#ccc;}#mermaid-1695282602409 .cluster-label text{fill:#F9FFFE;}#mermaid-1695282602409 .cluster-label span{color:#F9FFFE;}#mermaid-1695282602409 .label text,#mermaid-1695282602409 span{fill:#ccc;color:#ccc;}#mermaid-1695282602409 .node rect,#mermaid-1695282602409 .node circle,#mermaid-1695282602409 .node ellipse,#mermaid-1695282602409 .node polygon,#mermaid-1695282602409 .node path{fill:#1f2020;stroke:#81B1DB;stroke-width:1px;}#mermaid-1695282602409 .node .label{text-align:center;}#mermaid-1695282602409 .node.clickable{cursor:pointer;}#mermaid-1695282602409 .arrowheadPath{fill:lightgrey;}#mermaid-1695282602409 .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#mermaid-1695282602409 .flowchart-link{stroke:lightgrey;fill:none;}#mermaid-1695282602409 .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#mermaid-1695282602409 .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#mermaid-1695282602409 .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#mermaid-1695282602409 .cluster text{fill:#F9FFFE;}#mermaid-1695282602409 .cluster span{color:#F9FFFE;}#mermaid-1695282602409 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1695282602409 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#mermaid-1695282602409 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}Menu.vueRegister.vueRegister.vueMenu.vueHome.vueApp.vueMenu.vueindex.htmlmain.js 组件嵌套的style影响##Menu.vue文件中，我们对设置了button标签样式和class类选择器样式 注这里设置了局部样式 123456789101112131415161718192021222324&lt;script&gt;const Menu = &#123; name: &quot;Menu&quot;,&#125;export default Menu;&lt;/script&gt;&lt;template&gt; &lt;button&gt;子-标签选择器&lt;/button&gt;\t&lt;button class=&quot;add&quot;&gt;子-类选择器选择器&lt;/button&gt;&lt;/template&gt;&lt;style scoped&gt;div &#123; border: 1px solid red;&#125;button&#123; color: red;&#125;ul &#123; list-style: none;&#125;.add&#123; color: red;&#125;&lt;/style&gt; 在Home.vue中 12345678910111213141516171819202122232425&lt;template&gt;&lt;h1&gt;Home页面&lt;/h1&gt; &lt;button class=&quot;add&quot;&gt;类选择器&lt;/button&gt; &lt;button &gt;标签选择器&lt;/button&gt; &lt;Menu &gt;&lt;/Menu&gt;&lt;/template&gt;&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;const Home = &#123; name: &#x27;Home&#x27;, data() &#123; return &#123; total: 0 &#125; &#125;, components:&#123; Menu, &#125;&#125;export default Home;&lt;/script&gt;&lt;style scoped&gt;/*.add &#123;color: red;&#125;*/&lt;/style&gt; 在App.vue中 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;Home&gt;&lt;/Home&gt; &lt;button class=&quot;add&quot;&gt;根-类选择器&lt;/button&gt; &lt;button&gt;根-标签选择器&lt;/button&gt;&lt;!--其实写不写无所谓就跟id选择器一样--&gt;&lt;/template&gt;&lt;script&gt;import Home from &quot;./View/Home&quot;; export default &#123; name: &#x27;App&#x27;, components: &#123; Home &#125;, mounted() &#123; console.log(this.$refs.btn) &#125;&#125;&lt;/script&gt;&lt;style&gt;##app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: ##2c3e50; margin-top: 60px;&#125;&lt;/style&gt; 就样式最内部发生了改变 去掉scoped,子组件的样式就变成了全局样式，如果你不是有意为之，那么就会造成了样式污染 组件之间传递数据父组件的数据传递给子组件例列如，我们希望把父组件的数据传递给子组件可以通过props属性来进行数据传递传递数据三个步骤： 父组件的数据传递给子组件 在父组件中，调用子组件的组名除，使用属性值的方式往下传递数据 123456789101112131415161718192021&lt;template&gt;&lt;h1&gt;Home页面&lt;/h1&gt; &lt;button @click=&quot;total++&quot;&gt;Home的total:&#123;&#123;total&#125;&#125;&lt;/button&gt;&lt;!-- 父组件要发送数据给子组件，通过组件的属性传递数据，属性名就是将来的变量名，传递则需要在属性左边加上:--&gt; &lt;Menu :htotal=&quot;total&quot; total=&quot;1100&quot; title=&quot;来自home的数据呀！&quot;&gt;&lt;/Menu&gt;&lt;/template&gt;&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;const Home = &#123; name: &#x27;Home&#x27;, data() &#123; return &#123; total: 0 &#125; &#125;, components:&#123; Menu, &#125;&#125;export default Home;&lt;/script&gt; 在子组件Menu.vue中接受上面父组件传递的数据，需要在script中，使用props属性类接受。 123456789101112131415161718192021222324&lt;script&gt;const Menu = &#123; name: &quot;Menu&quot;, //来自父组件的数据,全部通过props来接受，2种写法：json写法：必须指定数据类型，数组写法：不用指定数据类型 // props:&#123; //变量名:数据类型 // 数据类型有 // Number数值(整数，浮点) // String字符串 // Boolean布尔值 // Array数组 // Object对象 // Function函数 // Promise异步对象 // default默认值 // 还可以做一些验证 // htotal:Number, // total:Number, // title:String // &#125;, props:[&quot;htotal&quot;,&#x27;total&#x27;,&quot;title&quot;],//数组写法可以不写类型&#125;export default Menu;&lt;/script&gt; 在子组件中的template中使用父组件传递过来的数据 12345&lt;template&gt; &lt;p&gt;来自父组件的数据 &lt;br&gt;变量&#123;&#123;htotal&#125;&#125;&lt;br&gt;数值：&#123;&#123;total&#125;&#125;&lt;br&gt;字符串：&#123;&#123;title&#125;&#125;&lt;/p&gt;&lt;!-- &lt;button @click=&quot;htotal++&quot;&gt;&#123;&#123; htotal &#125;&#125;&lt;/button&gt;--&gt;&lt;!-- 子组件不能直接对父组件转入的数据变量进行操作 --&gt;&lt;/template&gt; 使用父组件传递数据给子组件时，注意以下事项： 传递数据是变量，则需要在属性左边添加英文冒号。传递数据是变量，这种数据称之为”动态数据传递”，父组件数据改动的时候，子组件中被随之改动。传递数据不是变量，这种数据称之为”静态数据传递” 父组件中修改了数据，在子组件中会被同步修改。但是来自orops的数据，在子组件是不能修改的，因为不是data中声明的。在开发时这种情况，也被称为”单向数据流” 在子组件中对父组件传递的数据进行操作 1&lt;button @click=&quot;htotal++&quot;&gt;&#123;&#123; htotal &#125;&#125;&lt;/button&gt; 单向数据流 所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。 所以子组件不能直接对父组件转入的数据变量进行操作 补充:父组件传递数据到子数据的过程中，可以给子组件设置对父组件的默认值和验证 12345678910111213141516171819202122232425262728293031323334353637383940414243defineProps(&#123; // 基础类型检查 // （给出 `null` 和 `undefined` 值则会跳过任何类型检查） propA: Number, // 多种可能的类型 propB: [String, Number], // 必传，且为 String 类型 propC: &#123; type: String, required: true &#125;, // Number 类型的默认值 propD: &#123; type: Number, default: 100 &#125;, // 对象类型的默认值 propE: &#123; type: Object, // 对象或数组的默认值 // 必须从一个工厂函数返回。 // 该函数接收组件所接收到的原始 prop 作为参数。 default(rawProps) &#123; return &#123; message: &#x27;hello&#x27; &#125; &#125; &#125;, // 自定义类型校验函数 propF: &#123; validator(value) &#123; // The value must match one of these strings return [&#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;].includes(value) &#125; &#125;, // 函数类型的默认值 propG: &#123; type: Function, // 不像对象或数组的默认，这不是一个 // 工厂函数。这会是一个用来作为默认值的函数 default() &#123; return &#x27;Default function&#x27; &#125; &#125;&#125;) 子组件传递数据给父组件 在子组件中，通过his.$emit()来声明一个自定义的信号(vue中称之为自定义事件名)，父组件中针对这个信号（自定义事件）在调用子组件的组件名处进行@监听。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;script&gt;const Menu = &#123; name: &quot;Menu&quot;, //来自父组件的数据,全部通过props来接受，2种写法：json写法：必须指定数据类型，数组写法：不用指定数据类型 // props:&#123; //变量名:数据类型 // 数据类型有 // Number数值(整数，浮点) // String字符串 // Boolean布尔值 // Array数组 // Object对象 // Function函数 // Promise异步对象 // htotal:Number, // total:Number, // title:String // &#125;, props:[&quot;htotal&quot;,&#x27;total&#x27;,&quot;title&quot;],//数组写法可以不写类型 data()&#123; return&#123; num:0, message:&#x27;我是子组件里来的&#x27; &#125; &#125;, methods:&#123; add()&#123; this.num++; //this,emit(&quot;自定义事件名&quot;,变量1，变量2……) this.$emit(&quot;add_num&quot;,this.num,this.message) &#125; &#125;&#125;export default Menu;&lt;/script&gt;&lt;template&gt; &lt;p&gt;来自父组件的数据 &lt;br&gt;变量&#123;&#123;htotal&#125;&#125;&lt;br&gt;数值：&#123;&#123;total&#125;&#125;&lt;br&gt;字符串：&#123;&#123;title&#125;&#125;&lt;/p&gt; &lt;hr&gt; &lt;p&gt;要发送给父组件的数据,num=&#123;&#123;num&#125;&#125;&lt;/p&gt; &lt;button @click=&quot;add&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/button&gt; 父组件中，声明一个方法用于在自定义事件发生时用于获取数据。 12345678910111213141516171819202122232425262728&lt;template&gt;&lt;h1&gt;Home页面&lt;/h1&gt; &lt;button @click=&quot;total++&quot;&gt;Home的total:&#123;&#123;total&#125;&#125;&lt;/button&gt;&lt;!-- 父组件要发送数据给子组件，通过组件的属性传递数据，属性名就是将来的变量名，传递则需要在属性左边加上:--&gt; &lt;Menu :htotal=&quot;total&quot; total=&quot;1100&quot; title=&quot;来自home的数据呀！&quot; @add_num=&quot;get_data&quot;&gt;&lt;/Menu&gt;&lt;/template&gt;&lt;script&gt;import Menu from &quot;@/components/Menu.vue&quot;;const Home = &#123; name: &#x27;Home&#x27;, data() &#123; return &#123; total: 0 &#125; &#125;, components:&#123; Menu, &#125;, methods:&#123; get_data(num,message)&#123; console.log(&quot;子组件的数据过来了！！&quot;); console.log(`num=$&#123;num&#125;,message=$&#123;message&#125;`) &#125; &#125;&#125;export default Home;&lt;/script&gt;"},{"title":"项目构建工具","path":"/wiki/vue/项目构建工具.html","content":"在前开发中，前端开发人员方便快速构建和管理项目，一般会使用一些项目构建工具来辅助开发，而我们接下来要学习单文组件则必须依赖项目构建工具才能完成这块的学习，目前来说，vue开发中一般使用的前端开发工具无非:vue-cli和vite这2款最多人使用 Vue自动化工具（Vue-cli)vue2推荐使用vue-cli vue3推荐使用vite 一般情况下vue2.0的单文件组件使用，我们允许都会在vue-CLI中进行开发, 它可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具 官网：https://cli.vuejs.org/zh/ 安装node.js和认识node.js关于node.jsNode.js发布于2009年5月，由谷歌工程师Ryan Dahl(瑞安·达尔）开发的JavaScripti运行环境，一个让JavaScript代码运行在服务端的开发平台，它让javascript变成了服务端语言，所以nodejs开发者编写的代码本质上就是javascript代码。后端语言和前端语言的区别： 工运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上。 功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。 我们一般安装LTS(长线支持版本 Long-Time Support): node.js的版本有两大分支： 奇数版本：每年10月份发布，版本号为奇数，例如：11.0.0，叫当前版本(Current Version),维护期是3个月。偶数版本：次年04月份发布，版本号为偶数，例如：12.0.0，叫长线支持版本(Long-Time Support Version),维护期是3年。 其实是奇数版本还是偶数版本也不一定是对于的current version还是LST 不过可以去官网查看这些版本的信息，或者通过nvm的命令 1nvm list available nvm和nodejsVue CLI 由nodejs编写，所以我们需要Node.js8.9或更高版本（推荐8.11.0+）。你可以使用nvm或nvm-windows在同一台电脑中管理多个Node版本。 nvm工具的下载和安装 安装教程参考：nvm for windows 下载、安装及使用 - 掘金 (juejin.cn) nvm工具常用命令 1234567891011121314151617181920212223nvm ls ：列出所有已安装的 node 版本nvm ls-remote ：列出所有远程服务器的版本（官方node version list）nvm list ：列出所有已安装的 node 版本nvm list available ：显示所有可下载的版本 [nvm for windos 中无效，但是输出相当于nmv的命令]nvm install stable ：安装最新版 nodenvm install [node版本号] ：安装指定版本 nodenvm uninstall [node版本号] ：删除已安装的指定版本nvm use [node版本号] ：切换到指定版本 nodenvm current ：当前 node 版本nvm alias [别名] [node版本号] ：给不同的版本号添加别名nvm unalias [别名] ：删除已定义的别名nvm alias default [node版本号] ：设置默认版本 如果需要特殊 npm版本下载 123npm install -g npm@&lt;version&gt;## 例如npm install -g npm@8.5.3 如果安装较慢可以改成淘宝镜像，在安装目录的setting文件内 npm包管理器在安装node.js完成后，在node,js中会同时帮我们安装一个包管理器npm。我们可以借助npm命令来安装node,js的包。这个工具相当于python的pip包管理器。 1234567npm install -g 包名 ##安装模块-g表示全局安装，如果没有-g,则表示在当前项目安装npm list ##查看当前目录下已安装的node包npm view 包名engines ##查看包所依赖的Node的版本npm outdated ##检查包是否已经过时，命令会列出所有已过时的包npm\tupdate包名 ##更新node包npm\tuninstall/remove 包名 ##卸载node包,推荐使用remove在vite中，要不然清不掉依赖源文件配置信息npm\t命令-h ##查看指定命令的帮助文档 下载和安装后面对应的参数 12345-S, –save：dependencies-D, –save-dev：devDependencies-O, –save-optional：optionalDependencies 其他的包管理器 yarn(Facebook、Google、Exponent 和 Tilde 联合推出) cnpm(淘宝做的)… Yarn vs npm：你需要知道的一切 - 知乎 (zhihu.com) 为什么不推荐使用 cnpm？ - 简书 (jianshu.com) 注意：npm虽然是nodejs’官方提供的包管理工具，但事实上并不好用，所以有第三方开发者提供了更好用的yarn包管理器。我们可以通过npm来安装yarn包管理器。 1234567891011npm install yarnnpm install --global yarnyarn --version ##查看版本##基本命令yarn global add 包名 ##全局安装模块yarn remove ##卸载、移除或模块yarn ##根据当前目录下的package.json文件的配置自动下载安装包列表yarn install ##同上yarn dev ##根据当前目录下的package.json文件的配置启动一个http服务器运行前端项目yarn init ##根据当前目录下生成package.json配置文件，用于自动构建前端项目yarn publish ##将包发布到包管理器 中文文档 | Yarn 中文文档 (yarnpkg.cn) npm 安装 yarn - 简书 (jianshu.com) 12345678910111213141516171819202122232425262728293031npm init === yarn initnpm install === yarn 或者 yarn installnpm install taco --save === yarn add taconpm uninstall taco --save === yarn remove taconpm install taco --save-dev === yarn add taco --devnpm update --save === yarn upgradenpm install taco@latest --save === yarn add taconpm install taco --global === yarn global add taconpm init --yes/-y === yarn init --yes/-ynpm link === yarn linknpm outdated === yarn outdatednpm publish === yarn publishnpm run === yarn runnpm cache clean === yarn cache cleannpm login === yarn loginnpm test === yarn test 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849初始化项目:yarn init // 同npm init，执行输入信息后，会生成package.json文件yarn的配置项：yarn config list // 显示所有配置项yarn config get &lt;key&gt; //显示某配置项yarn config delete &lt;key&gt; //删除某配置项yarn config set &lt;key&gt; &lt;value&gt; [-g|--global] //设置配置项安装包：yarn install //安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lockyarn install --flat //安装一个包的单一版本yarn install --force //强制重新下载所有包yarn install --production //只安装dependencies里的包yarn install --no-lockfile //不读取或生成yarn.lockyarn install --pure-lockfile //不生成yarn.lock添加包（会更新package.json和yarn.lock）：yarn add [package] // 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中yarn add [package]@[version] // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数yarn add [package]@[tag] // 安装某个tag（比如beta,next或者latest）//不指定依赖类型默认安装到dependencies里，你也可以指定依赖类型：yarn add --dev/-D // 加到 devDependenciesyarn add --peer/-P // 加到 peerDependenciesyarn add --optional/-O // 加到 optionalDependencies//默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：yarn add --exact/-E // 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版yarn add --tilde/-T // 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0发布包yarn publish移除一个包yarn remove &lt;packageName&gt;：移除一个包，会自动更新package.json和yarn.lock更新一个依赖yarn upgrade 用于更新包到基于规范范围的最新版本运行脚本yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本显示某个包的信息yarn info &lt;packageName&gt; 可以用来查看某个模块的最新版本信息缓存yarn cacheyarn cache list ## 列出已缓存的每个包 yarn cache dir ## 返回 全局缓存位置 yarn cache clean ## 清除缓存 安装yarn 解决yarn install总是失败_yarn安装不成功_heeyaaa的博客-CSDN博客 以为没有安装成根据上面文章提供的方式重新安装一遍 image-20230812214841088 这什么玩意装到一半弹出个github登陆界面？？？我也没有下什么东西 yarn的安装和使用，并配置用户环境变量_yarn环境变量_麦兜:)的博客-CSDN博客 这篇文章有毒。 可我检验又是早就装好了 结果：就是一开始的安装yarn要选择全局安装，或者添加变量吧 安装Vue-cli12npm install -g @vue/cliyarn global add @vue/cli 不是说yarn没有warning吗？还有安装个vueCli这么慢，我还开了vpn 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152C:\\Users\\53078&gt;yarn -v1.22.19C:\\Users\\53078&gt;npm get registryhttps://registry.npmjs.org/C:\\Users\\53078&gt;yarn config get registrywarning package.json: No license fieldhttps://registry.yarnpkg.comC:\\Users\\53078&gt;yarn config set registry http://registry.npm.taobao.org/yarn config v1.22.19warning package.json: No license fieldsuccess Set &quot;registry&quot; to &quot;http://registry.npm.taobao.org/&quot;.Done in 0.05s.C:\\Users\\53078&gt;yarn config get registrywarning package.json: No license fieldhttp://registry.npm.taobao.org/C:\\Users\\53078&gt;yarn global add @vue/cliyarn global v1.22.19warning package.json: No license field[1/4] Resolving packages...warning @vue/cli &gt; shortid@2.2.16: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.warning @vue/cli &gt; @vue/cli-ui &gt; shortid@2.2.16: Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express@3.12.0: The `apollo-server-express` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; subscriptions-transport-ws@0.11.0: The `subscriptions-transport-ws` package is no longer maintained. We recommend you use `graphql-ws` instead. For help migrating Apollo software to `graphql-ws`, see https://www.apollographql.com/docs/apollo-server/data/subscriptions/##switching-from-subscriptions-transport-ws For general help using `graphql-ws`, see https://github.com/enisdenjo/graphql-ws/blob/master/README.mdwarning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core@3.12.0: The `apollo-server-core` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-types@3.8.0: The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-server-types@3.8.0: The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-reporting-protobuf@3.4.0: The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-types &gt; apollo-reporting-protobuf@3.4.0: The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-datasource@3.3.2: The `apollo-datasource` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-server-env@4.2.1: The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-types &gt; apollo-server-env@4.2.1: The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-datasource &gt; apollo-server-env@4.2.1: The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-server-errors@3.3.1: The `apollo-server-errors` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-server-plugin-base@3.7.2: The `apollo-server-plugin-base` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; @vue/cli-ui &gt; apollo-server-express &gt; apollo-server-core &gt; apollo-server-plugin-base &gt; apollo-server-types@3.8.0: The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.warning @vue/cli &gt; vue-codemod &gt; jscodeshift &gt; micromatch &gt; snapdragon &gt; source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve##deprecatedwarning @vue/cli &gt; vue-codemod &gt; jscodeshift &gt; micromatch &gt; snapdragon &gt; source-map-resolve &gt; resolve-url@0.2.1: https://github.com/lydell/resolve-url##deprecatedwarning @vue/cli &gt; vue-codemod &gt; jscodeshift &gt; micromatch &gt; snapdragon &gt; source-map-resolve &gt; urix@0.1.0: Please see https://github.com/lydell/urix##deprecatedwarning @vue/cli &gt; vue-codemod &gt; jscodeshift &gt; micromatch &gt; snapdragon &gt; source-map-resolve &gt; source-map-url@0.4.1: See https://github.com/lydell/source-map-url##deprecated[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed &quot;@vue/cli@5.0.8&quot; with binaries: - vueDone in 22.70s.C:\\Users\\53078&gt; 麻了切换成国内的淘宝镜像源22.70s就安装好了 image-20230813094146616 麻了，还需要手动添加环境变量，重启一下cmd就好了 image-20230813094243425 参考文章:yarn的安装和使用，并配置用户环境变量_yarn环境变量_麦兜:)的博客-CSDN博客 NPM设置淘宝镜像1.查询当前配置的镜像1npm get registry https://registry.npmjs.org/ 2.设置成淘宝镜像1npm config set registry http://registry.npm.taobao.org/ 3.换成原来的1npm config set registry https://registry.npmjs.org/ 常用淘宝镜像1234567npm install phantomjs --phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjsnpm install chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedrivernpm install operadriver --operadriver_cdnurl=http://npm.taobao.org/mirrors/operadrivernpm config set disturl https://npm.taobao.org/distnpm config set electron_mirror https://npm.taobao.org/mirrors/electron/npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/npm config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/ 1234567yarn config set disturl https://npm.taobao.org/dist -gyarn config set electron_mirror https://npm.taobao.org/mirrors/electron/ -gyarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/ -gyarn config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/ -gyarn config set chromedriver_cdnurl https://cdn.npm.taobao.org/dist/chromedriver -gyarn config set operadriver_cdnurl https://cdn.npm.taobao.org/dist/operadriver -gyarn config set fse_binary_host_mirror https://npm.taobao.org/mirrors/fsevents -g 参考文章： yarn npm 设置淘宝镜像_AlbertGou的博客-CSDN博客 npm 和 yarn 更改为淘宝镜像: http://www.mamicode.com/info-detail-3035713.html yarn npm 淘宝镜像: https://www.jianshu.com/p/f2319084efaf yarn默认的包管理服务器在国外，所以第一次使用yarn安装模块时会出现提示是否切换到淘宝镜像站，我们填写y即可 使用Vue-CLI初始化创建前端项目使用vue-cli自动化工具可以快速搭建单页应用项目目录。 该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检擦以及可用于生成环境的构建配置项目： 123456789// 生成一个基于webpack模块的新项目vue create 项目目录列如：cd ~/Desktop cd ./Desktop //windows操作vue create myproject// 启动开发服务器ctrl+c停止服务cd myproject\t##项目名需要全部小写npm run serve\t##运行这个命令就可以启动node提供的测试http服务器 此处我们选择中间vue3(通过上下键切换) 假如安装了一半突然因为网络异常，而安装失败，可以重试几次 12cd myvueprojectyarn serve 如此便可以通过提供的url访问本地前端vue服务器 1ctrl +c //停止服务器 自定义安装一、选择安装配置，空格表示选择&#x2F;取消。选择完成以后回车 二、选择vue版本 三、选择路由插件的路由模式历史状态管理模式，就是路由没有##号？ 四、选择EsLint的配置项 五、EsLint格式化的时机，把2个都勾选上就行 保存时，和运行提交时 六、EsLint和Babel是否存放在一起，还是单独 选择第二个 七、是否保存上面的安装配置为以后安装复用 下次再安装就会出现这种配置方案 要全部小写 启动服务器后 和之前的页面有些不一样，因为多配置了一个路由依赖 如果在第三部选择了n那么当前访问的路由会变的多一个##号 12http://127.0.0.1:8080/##/http://127.0.0.1:8080/##/about 生成项目目录 在windows上使用更丰富的tree命令 Window平台下tree 命令使用 - 牧白 - 博客园 (cnblogs.com) 而如果你强制使用可能会提示你 1参数太多 - 1 winodws cmd不支持丰富的tree命令,但可以使用git bash进行tree命令操作，生成文件目录 下载window for tree工具 Tree for Windows (sourceforge.net) 选择其中的Binaries.zip 解压后将其中bin目录下的tree.exe复制到C:\\\\Program Files\\Git\\usr\\bin目录下 tree 命令格式和参数： TREE [drive:][path] [&#x2F;F] [&#x2F;A] &#x2F;F 显示每个文件夹中文件的名称。（带扩展名） &#x2F;A 使用 ASCII 字符，而不使用扩展字符。(如果要显示中文，例如 tree &#x2F;f &#x2F;A &gt;tree.txt) tree命令行参数： 123456789101112131415161718192021-a 显示所有文件和目录。 ##默认-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。-C 在文件和目录清单加上色彩，便于区分各种类型。-d 显示目录名称而非内容。-D 列出文件或目录的更改时间。-f 在每个文件或目录之前，显示完整的相对路径名称。-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|“号。-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。-i 不以阶梯状列出文件或目录名称。-I 不显示符合范本样式的文件或目录名称。-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。-L 限制tree命令的分支数量,显示几级目录 ##常用-n 不在文件和目录清单加上色彩。-N 直接列出文件和目录名称，包括控制字符。-p 列出权限标示。-P 只显示符合范本样式的文件或目录名称。-q 用”?&quot;号取代控制字符，列出文件和目录名称。-s 列出文件或目录大小。-t 用文件和目录的更改时间排序。-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。 1tree -I &quot;node_modules&quot;&gt;tree.txt 排除”node_modules”目录，并且将生成的目录树导入tree.txt文件 Tree for Windows (sourceforge.net) 或者你是Ubuntu,可以参考这个文章 项目目录结构123456789101112131415161718192021222324252627282930.##项目根目录|-- README.md|-- node_modules\t##本地开发项目运行的依赖目录|-- dist ##项目完成以后，如果项目上线，会编译整个项目成js代码，编译后代码保存在这里|-- babel.config.js\t##高级代码转译器|-- jsconfig.json\t##|-- package.json\t##项目运行的配置文件|-- public ##访问入口目录| | ┕-- favicon.ico| ┕-- index.html ##项目唯一html页面，整个项目的内容都是被index.html加载提供给用户访问的|-- src ##核心开发目录，所有的源代码都保存在这里| |-- App.vue ##项目的根组件，由App.vue进行加载所有的组件页面和子组件| |-- assets ##资产目录，保存项目所需的静态资源[img/视频/音频等附件]| | ┕-- logo.png| |-- components\t##子组件目录，保存一些零零碎碎的部分页面内容的组件| | ┕-- HelloWorld.vue| |-- main.js ##全局初始化入口脚本，index.html被运行时会自动加载这个js文件| |-- router ##路由文件保存| | ┕-- index.js ##默认情况下路由文件| |-- store ##全局状态管理器，保存公共数据/公共变量的.vuex| | ┕-- index.js ##默认情况的全局变量保存文件| ┕-- views ##页面组件目录，一个vue文件就一个页面| | ┕-- AboutView.vue| ┕-- HomeView.vue|-- tree.txt|-- vue.config.js┕-- yarn.lock7 directories, 18 files 在webstorm启动项目想直接在终端执行yarn脚本启动服务器和安装package.json的依赖文件报了这么一个错误。 1234567891011121314151617PS C:\\Users\\53078\\Desktop\\myproject2&gt; yarnyarn : 无法加载文件 C:\\Program Files odejs\\yarn.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies 。所在位置 行:1 字符: 1+ yarn+ ~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccessPS C:\\Users\\53078\\Desktop\\myproject2&gt; yarn serveyarn : 无法加载文件 C:\\Program Files odejs\\yarn.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。所在位置 行:1 字符: 1+ yarn serve+ ~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 原因在于PowerShell 执行策略是一项安全功能，用于控制 PowerShell 加载配置文件和运行脚本的条件。 此功能有助于防止恶意脚本的执行 所以如果要使用yarn等脚本命令，需要更改执行策略 123get-ExecutionPolicyset-ExecutionPolicy RemoteSignedset-ExecutionPolicy Restricted Vue项目执行流程图#mermaid-1695277850518{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}#mermaid-1695277850518 .error-icon{fill:#a44141;}#mermaid-1695277850518 .error-text{fill:#ddd;stroke:#ddd;}#mermaid-1695277850518 .edge-thickness-normal{stroke-width:2px;}#mermaid-1695277850518 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1695277850518 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1695277850518 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1695277850518 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1695277850518 .marker{fill:lightgrey;stroke:lightgrey;}#mermaid-1695277850518 .marker.cross{stroke:lightgrey;}#mermaid-1695277850518 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1695277850518 .label{font-family:\"trebuchet ms\",verdana,arial,sans-serif;color:#ccc;}#mermaid-1695277850518 .cluster-label text{fill:#F9FFFE;}#mermaid-1695277850518 .cluster-label span{color:#F9FFFE;}#mermaid-1695277850518 .label text,#mermaid-1695277850518 span{fill:#ccc;color:#ccc;}#mermaid-1695277850518 .node rect,#mermaid-1695277850518 .node circle,#mermaid-1695277850518 .node ellipse,#mermaid-1695277850518 .node polygon,#mermaid-1695277850518 .node path{fill:#1f2020;stroke:#81B1DB;stroke-width:1px;}#mermaid-1695277850518 .node .label{text-align:center;}#mermaid-1695277850518 .node.clickable{cursor:pointer;}#mermaid-1695277850518 .arrowheadPath{fill:lightgrey;}#mermaid-1695277850518 .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#mermaid-1695277850518 .flowchart-link{stroke:lightgrey;fill:none;}#mermaid-1695277850518 .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#mermaid-1695277850518 .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#mermaid-1695277850518 .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#mermaid-1695277850518 .cluster text{fill:#F9FFFE;}#mermaid-1695277850518 .cluster span{color:#F9FFFE;}#mermaid-1695277850518 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1695277850518 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#mermaid-1695277850518 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}index.htmlmain.jsApp.vue路由组件一组件二组件三组件四组件a组件b组件c组件d组件e组件f组件g 整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main,js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用views页面组件，views组件会根据开发的页面需要加载components.文件夹中的其他单文件子组件。 将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“vue”，比如：”Home.vue”。"}]